{
  "nodes": [
    {
      "meta": {
        "description": "Add different script nodes and let the OpenAI assistant automatically choose which to execute based on the input.",
        "id": "openai-assistant-node",
        "name": "OpenAI Assistant",
        "icon": {
          "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3",
          "type": "URL"
        }
      },
      "nodes": [
        {
          "script": "export default async ({\n    location,\n    unit\n}, {\n    logging\n}) => {\n  if(location.includes(\"Bursa\")) {\n    if(unit && unit === \"fahrenheit\") {\n      return \"70째F\";\n    } else {\n      return \"21째C\";\n    }\n  }\n  if(unit && unit === \"fahrenheit\") {\n    return \"50째F\";\n  } else {\n    return \"10째C\";\n  }\n}",
          "type": "script",
          "description": "Get the current weather in a given location",
          "id": "1ad17f18-3cb1-4422-859a-8db157bfc629",
          "label": "Get weather",
          "onFail": null,
          "inputs": {
            "properties": {
              "unit": {
                "buildship": {
                  "options": [
                    { "value": "celsius", "label": "Celsius" },
                    { "value": "fahrenheit", "label": "Fahrenheit" }
                  ],
                  "toBeAutoFilled": true,
                  "sensitive": false,
                  "index": 1
                },
                "title": "Unit",
                "type": "string",
                "pattern": "",
                "description": "The unit of temperature, either \"celsius\" or \"fahrenheit\" use celcius by default",
                "enum": ["celsius", "fahrenheit"]
              },
              "location": {
                "title": "Location",
                "description": "The city and state, e.g. San Francisco, CA",
                "type": "string",
                "buildship": { "toBeAutoFilled": true, "index": 0 }
              }
            },
            "type": "object",
            "required": ["location"]
          },
          "meta": {
            "id": "1ad17f18-3cb1-4422-859a-8db157bfc629",
            "description": "Get the current weather in a given location with specified unit",
            "name": "Get weather"
          },
          "output": {
            "title": "Weather Info",
            "type": "string",
            "description": "Weather information for the specified location and unit",
            "buildship": {}
          }
        }
      ],
      "_libRef": {
        "libNodeRefId": "@buildship/openai-assistant-node",
        "isDirty": true,
        "libType": "public",
        "version": "2.0.3",
        "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/openai-assistant-node/2.0.3/build.cjs",
        "integrity": "v3:64e6556dbad6d1c94731238e75ae37af"
      },
      "onFail": null,
      "dependencies": { "axios": "0.28.1" },
      "label": "OpenAI Assistant",
      "inputs": {
        "required": ["assistantId", "prompt", "claudeApiKey"],
        "properties": {
          "model": {
            "pattern": "",
            "title": "Model",
            "enum": ["claude-3-opus-20240229"],
            "buildship": {
              "index": 1,
              "sensitive": false,
              "options": [{ "label": "claude-3-opus-20240229", "value": "claude-3-opus-20240229" }]
            },
            "description": "",
            "default": "claude-3-opus-20240229",
            "type": "string"
          },
          "userPrompt": {
            "type": "string",
            "pattern": "",
            "title": "User Prompt",
            "description": "",
            "buildship": { "index": 4, "sensitive": false },
            "default": ""
          },
          "maxTokens": {
            "title": "Max Tokens",
            "description": "",
            "buildship": { "sensitive": false, "index": 1 },
            "type": "number",
            "default": "",
            "pattern": ""
          },
          "claudeApiKey": {
            "pattern": "",
            "description": "The OpenAI API key to use for authentication.",
            "type": "string",
            "title": "Claude API Key",
            "buildship": { "sensitive": true, "index": 0 }
          },
          "systemPrompt": {
            "buildship": { "sensitive": false, "index": 2 },
            "type": "string",
            "description": "",
            "default": "",
            "pattern": "",
            "title": "System Prompt"
          }
        },
        "type": "object"
      },
      "output": {
        "properties": {
          "data": {
            "buildship": {
              "index": 0
            },
            "type": "object",
            "properties": {
              "model": {
                "description": "",
                "title": "Model",
                "buildship": {
                  "index": 3
                },
                "type": "string"
              },
              "stop_reason": {
                "buildship": {
                  "index": 7
                },
                "type": "string",
                "description": "",
                "title": "Stop Reason"
              },
              "id": {
                "description": "",
                "title": "Id",
                "type": "string",
                "buildship": {
                  "index": 0
                }
              },
              "type": {
                "buildship": {
                  "index": 1
                },
                "title": "Type",
                "description": "",
                "type": "string"
              },
              "content": {
                "properties": {},
                "buildship": {
                  "index": 6
                },
                "title": "Content",
                "description": "",
                "type": "array"
              },
              "usage": {
                "properties": {
                  "output_tokens": {
                    "description": "",
                    "type": "number",
                    "title": "Output Tokens",
                    "buildship": {
                      "index": 1
                    }
                  },
                  "input_tokens": {
                    "buildship": {
                      "index": 0
                    },
                    "description": "",
                    "type": "number",
                    "title": "Input Tokens"
                  }
                },
                "type": "object",
                "buildship": {
                  "index": 5
                },
                "description": "",
                "title": "Usage"
              },
              "role": {
                "description": "",
                "buildship": {
                  "index": 2
                },
                "title": "Role",
                "type": "string"
              },
              "stop_sequence": {
                "title": "Stop Sequence",
                "description": "",
                "buildship": {
                  "index": 4
                },
                "type": "array"
              }
            },
            "description": "",
            "title": "Data"
          }
        },
        "type": "object",
        "buildship": { "index": 0 }
      },
      "id": "d310c412-dc06-4264-ab8f-93e61e739843",
      "subType": "assistant",
      "type": "script",
      "integrations": [],
      "script": "import axios from \"axios\";\n\nconst nodeToClaudeTool = (node) => {\n  return {\n    // Use node.meta.id as the name of the tool. Spaces are not allowed.\n    name: node.meta.id,\n    description: node.meta.description ?? \"\",\n    input_schema: {\n      type: \"object\",\n      properties: Object.entries(node.inputs.properties)\n        .reduce((properties, [name, value]) => ({\n          ...properties, [name]: {\n            type: value.type,\n            enum: value.enum,\n            description: value.description\n          }\n        }), {}),\n      required: node.inputs.required ?? [],\n    },\n  };\n}\n\nexport default async function assistant(\n  { claudeApiKey, model, maxTokens, systemPrompt, userPrompt },\n  { logging, execute, nodes }\n) {\ntry {\n  const version = \"2023-06-01\";\n  const beta = \"tools-2024-04-04\";\n\n  const client = axios.create({\n    baseURL: \"https://api.anthropic.com/v1\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'x-api-key': claudeApiKey,\n      'anthropic-version': version,\n      'anthropic-beta': beta\n    }\n  });\n\n  const tools = nodes?.map(nodeToClaudeTool);\n\n  const initialMessages = [{\n    \"role\": \"user\",\n    \"content\": userPrompt,\n  }];\n\n  const baseRequest = {\n    \"model\": model,\n    \"max_tokens\": Number(maxTokens),\n    \"system\": systemPrompt || \"\",\n    \"tools\": tools || [],\n    \"messages\": initialMessages\n  };\n\n  const handleToolUse = async (name, toolUseContent) => {\n    return {\n      role: \"user\",\n      content: [{\n        type: \"tool_result\",\n        tool_use_id: toolUseContent.id,\n        content: await execute(name, toolUseContent.input)\n      }]\n    }\n  };\n\n    let request = { ...baseRequest };\n    let response = await client.post(\"/messages\", request);\n\n    do {\n      if (response.status !== 200) {\n        if (response.data.type === \"error\") {\n          throw response.data.error;\n        }\n        throw response;\n      }\n      let result = response.data;\n      const content = result.content;\n      \n      const isToolUse = result.stop_reason === \"tool_use\" && content instanceof Array;\n      if (isToolUse) {\n        request.messages.push({\n          role: \"assistant\",\n          content\n        });\n        const toolUses = content.filter(content => content.type === \"tool_use\");\n        for (const toolUse of toolUses) {\n          const tool = tools.find(tool => toolUse.type === \"tool_use\" && tool.name === toolUse.name);\n          const node = nodes?.find(node => node.meta.id === toolUse.name);\n          if (!tool || !node) {\n            throw new Error(`Unknown tool: ${toolUse}`);\n          }\n          const toolOutput = await handleToolUse(node.label, toolUse);\n          request.messages.push(toolOutput);\n        }\n      }\n      response = await client.post(\"/messages\", request);\n    } while (response && response.data && response.data.stop_reason !== \"end_turn\");\n\n    return { data: response.data }\n  } catch (error) {\n    return { error: error };\n  }\n}"
    },
    {
      "response": { "200": { "buildship": { "index": 0 }, "type": "object" } },
      "label": "Return",
      "type": "return",
      "description": "The Return Node is used to return values from the workflow. It is generally the last node in the workflow. The return node is optional as the API can inherently return a 200 OK response by default. [Full Documentation](https://docs.buildship.com/core-nodes/return).",
      "inputs": {
        "properties": {
          "cacheMaxAge": {
            "title": "Cache Time",
            "description": "Set cache duration in seconds",
            "default": 0,
            "type": "number",
            "buildship": { "index": 2 }
          },
          "value": {
            "type": "string",
            "description": "The value to return",
            "title": "Value",
            "default": "",
            "buildship": { "index": 1 }
          },
          "status": {
            "title": "Status code",
            "buildship": {
              "index": 0,
              "options": [
                { "value": "200", "label": "OK (200)" },
                { "value": "201", "label": "Created (201)" },
                { "value": "202", "label": "Accepted (202)" },
                { "value": "301", "label": "Redirect (301)" },
                { "value": "204", "label": "No Content (204)" },
                { "value": "400", "label": "Bad Request (400)" },
                { "value": "401", "label": "Unauthorized (401)" },
                { "value": "403", "label": "Forbidden (403)" },
                { "label": "Not Found (404)", "value": "404" },
                { "value": "500", "label": "Internal Server Error (500)" }
              ]
            },
            "enum": ["200", "201", "202", "204", "400", "401", "403", "404", "500"],
            "type": "string",
            "default": "200",
            "description": "The HTTP status code to return"
          }
        },
        "required": [],
        "type": "object"
      },
      "id": "2015571d-cabb-44e5-b429-6b1795369d18"
    }
  ],
  "trigger": {
    "output": {
      "type": "object",
      "title": "Request",
      "buildship": {},
      "properties": {
        "body": {
          "buildship": { "index": 1 },
          "description": "Body of the request",
          "title": "Body",
          "type": "object"
        },
        "query": {
          "title": "Query parameters",
          "type": "object",
          "description": "Query parameters",
          "buildship": { "index": 0 }
        },
        "headers": {
          "properties": {
            "authorization": {
              "title": "Authorization",
              "buildship": { "index": 1 },
              "type": "string",
              "description": "Authorization header"
            },
            "content-type": {
              "title": "Content-Type",
              "buildship": { "index": 0 },
              "type": "string",
              "description": "Content-Type of the request"
            }
          },
          "description": "Headers of the request",
          "buildship": {},
          "title": "Headers",
          "type": "object"
        }
      }
    },
    "instruction": { "bodyTemplate": "https://{{runtimeUrl}}/{{httpPath}}", "title": "Endpoint URL" },
    "inputs": {
      "properties": {
        "method": {
          "buildship": {
            "options": [
              { "value": "GET", "label": "GET" },
              { "label": "POST", "value": "POST" },
              { "label": "PUT", "value": "PUT" },
              { "label": "DELETE", "value": "DELETE" }
            ],
            "sensitive": false,
            "index": 1
          },
          "description": "The HTTP method for the incoming request.",
          "type": "string",
          "pattern": "",
          "enum": ["GET", "POST", "PUT", "DELETE"],
          "default": "GET",
          "title": "Method"
        },
        "path": {
          "buildship": { "index": 0, "sensitive": false },
          "title": "Path",
          "pattern": "",
          "default": "/",
          "description": "The path of the API Endpoint. Additionally, define the structure for the incoming API requests. [Learn more about API Specification here](https://docs.buildship.com/basics/api-spec#request-specification).",
          "type": "string"
        }
      },
      "type": "object",
      "required": ["method", "path"]
    },
    "script": "",
    "dependencies": {},
    "order": 1,
    "live": true,
    "testingSchema": [
      {
        "disabled": true,
        "prefill": "endpointURL",
        "type": "shortText",
        "name": "endpointURL",
        "label": "Endpoint URL"
      },
      { "type": "apiRequestData", "name": "apiRequestData", "prefill": "apiRequestData" }
    ],
    "type": "http",
    "label": "Rest API Call",
    "meta": {
      "id": "http",
      "icon": {},
      "description": "Create an API / HTTP endpoint as the trigger or starting point for your workflow. This endpoint can be used in other apps to run the workflow. [Full documentation](https://docs.buildship.com/trigger-nodes/rest-api)",
      "name": "Rest API Call"
    },
    "request": {
      "type": "object",
      "properties": {
        "query": {
          "properties": {},
          "buildship": {},
          "type": "object",
          "description": "Query parameters",
          "title": "Query"
        },
        "body": {
          "type": "object",
          "description": "Body of the request",
          "title": "Body",
          "properties": {},
          "buildship": {}
        },
        "headers": {
          "properties": {},
          "title": "Request Headers",
          "description": "Headers of the request",
          "type": "object",
          "buildship": {}
        }
      },
      "buildship": {},
      "title": "Request",
      "required": []
    },
    "id": "http"
  },
  "nodeValues": {
    "2015571d-cabb-44e5-b429-6b1795369d18": {
      "cacheMaxAge": 0,
      "value": { "keys": ["d310c412-dc06-4264-ab8f-93e61e739843"] },
      "status": "200"
    },
    "1ad17f18-3cb1-4422-859a-8db157bfc629": { "unit": "metric", "new_input-1713449208799": "", "name": "" },
    "test-node-1ad17f18-3cb1-4422-859a-8db157bfc629": { "new_input-1713449208799": "", "name": "", "unit": "metric" },
    "d310c412-dc06-4264-ab8f-93e61e739843": {
      "model": "claude-3-opus-20240229",
      "maxTokens": 1024,
      "message": { "expression": "ctx[\"root\"][\"request\"][\"query\"].message", "type": "javascript" },
      "systemPrompt": "Respond only in Turkish",
      "userPrompt": { "type": "javascript", "expression": "ctx[\"root\"][\"request\"][\"query\"].message" },
      "instructions": "Respond only in Turkish",
      "claudeApiKey": { "secretName": "claude-han" }
    },
    "http": { "path": "/city-advisor-claude", "method": "GET" }
  },
  "notes": ""
}
