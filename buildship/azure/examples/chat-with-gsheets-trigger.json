{
  "nodes": [
    {
      "id": "f1ec60a6-cd5d-4315-90e8-f45f1dd80c11",
      "type": "script",
      "name": "Azure OpenAI Assistant",
      "subType": "assistant",
      "meta": {
        "icon": { "type": "URL", "url": "https://www.svgrepo.com/show/448274/azure.svg" },
        "name": "Azure OpenAI Assistant",
        "description": "Add different script nodes and let the OpenAI assistant automatically choose which to execute based on the input.",
        "id": "azure-openai-assistant-node"
      },
      "script": "import { AssistantsClient } from \"@azure/openai-assistants\";\nimport { AzureKeyCredential } from \"@azure/openai\";\nimport { setTimeout } from \"timers/promises\";\n\nconst nodeToOpenAiFunction = (node) => {\n  return {\n    type: \"function\",\n    function: {\n      name: node.id,\n      description: node.meta.description ?? \"\",\n      parameters: {\n        type: \"object\",\n        properties: Object.entries(node.inputs.properties)\n          .reduce((properties, [name, value]) => {\n            if (value.buildship && !value.buildship.toBeAutoFilled) return properties;\n            return {\n              ...properties, [name]: {\n                type: value.type,\n                enum: value.enum,\n                description: value.description\n              }\n            }\n          }, {}),\n        required: Object.entries(node.inputs.properties).map(([name, value]) => {\n          if (value.buildship && value.buildship.toBeAutoFilled && node.inputs.required.includes(name)) return name;\n          return false;\n        }).filter(Boolean),\n      }\n    }\n  };\n}\n\nconst sleep = (ms) =>\n  new Promise((resolve) => setTimeout(ms).then(() => resolve(true)));\n\nexport default async function assistant(\n  { azureApiKey, resource, assistantId, threadId, userPrompt, builtInTools = [], instructions },\n  { logging, execute, nodes }\n) {\n  const tools = nodes?.map(nodeToOpenAiFunction) ?? [];\n\n  const endpoint = `https://${resource}.openai.azure.com`;\n  const credentials = new AzureKeyCredential(azureApiKey);\n  const assistantsClient = new AssistantsClient(endpoint, credentials);\n\n  const messages = [{ role: \"user\", content: userPrompt }];\n\n  if (threadId) {\n    await assistantsClient.createMessage(threadId, \"user\", userPrompt);\n  } else {\n    threadId = (await assistantsClient.createThread({ messages })).id;\n    logging.log(\"New thread created with ID:\", threadId);\n  }\n\n  // Retrieval tool isn't supported in Azure yet\n  // builtInTools.includes(\"retrieval\") && tools.push({ type: \"retrieval\" });\n  builtInTools.includes(\"code_interpreter\") && tools.push({ type: \"code_interpreter\" });\n\n  let runResponse = await assistantsClient.createRun(threadId, {\n    assistantId,\n    instructions,\n    tools,\n  });\n\n  do {\n    await sleep(1000);\n    runResponse = await assistantsClient.getRun(runResponse.threadId, runResponse.id);\n\n    const isToolUse = runResponse.status === \"requires_action\" && runResponse.requiredAction?.type === \"submit_tool_outputs\";\n    if (isToolUse) {\n      const toolOutputs = [];\n      const toolUses = runResponse.requiredAction?.submitToolOutputs?.toolCalls || [];\n      for (const toolUse of toolUses) {\n        let args;\n        try {\n          args = JSON.parse(toolUse.function.arguments);\n          logging.log(args);\n        } catch (err) {\n          logging.log(`Couldn't parse function arguments. Received: ${toolUse.function.arguments}`);\n          throw new Error(`Couldn't parse function arguments. Received: ${toolUse.function.arguments}`)\n        }\n        const node = nodes?.find(node => node.id === toolUse.function.name);\n        if (!node) {\n          throw new Error(`Unknown tool: ${toolUse.function.name}`);\n        }\n        const toolOutput = await execute(node.label, args);\n\n        logging.log(toolOutput);\n        toolOutputs.push({\n          toolCallId: toolUse.id,\n          output: toolOutput ? JSON.stringify(toolOutput) : \"\"\n        });\n        logging.log(\n          `Executed ${node.label} with output:`,\n          toolOutput\n        );\n      }\n      runResponse = await assistantsClient.submitToolOutputsToRun(runResponse.threadId, runResponse.id, toolOutputs);\n    }\n  } while (runResponse.status === \"queued\" || runResponse.status === \"in_progress\")\n\n  const { data } = await assistantsClient.listMessages(runResponse.threadId, { order: \"desc\" });\n\n  const resultMessage = data[0];\n\n  if (resultMessage.content[0].type === \"text\") {\n    return {\n      \"response\": resultMessage.content[0].text.value,\n      \"annotations\": resultMessage.content[0].text.annotations,\n      \"threadId\": runResponse.threadId,\n      \"messages\": data\n    };\n  }\n\n  if (resultMessage.content[0].type === \"image_file\") {\n    return {\n      \"response\": \"\",\n      \"imageFileId\": resultMessage.content[0].imageFile.fileId,\n      \"annotations\": [],\n      \"threadId\": runResponse.threadId,\n      \"messages\": data\n    };\n  }\n}",
      "inputs": {
        "type": "object",
        "required": ["userPrompt", "resource", "assistantId", "azureApiKey"],
        "properties": {
          "threadId": {
            "buildship": { "index": 4 },
            "title": "Thread ID",
            "description": "The ID of the conversation thread to use. If not specified, a new thread will be created.",
            "type": "string"
          },
          "builtInTools": {
            "buildship": {
              "index": 6,
              "options": [
                { "label": "Document Retrieval", "value": "retrieval" },
                { "label": "Code Interpreter", "value": "code_interpreter" }
              ]
            },
            "type": "array",
            "description": "Select the OpenAI assistant built-in tools to use.",
            "title": "Built-in Tools",
            "enum": ["retrieval", "code_interpreter"]
          },
          "azureApiKey": {
            "pattern": "",
            "type": "string",
            "title": "Azure API key",
            "description": "The Azure API key to use for authentication.",
            "buildship": { "index": 0, "sensitive": false }
          },
          "resource": {
            "title": "Resource",
            "description": "The name of your Azure resource.",
            "type": "string",
            "buildship": { "hidden": false, "sensitive": false, "index": 2 },
            "pattern": ""
          },
          "instructions": {
            "description": "Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.",
            "type": "string",
            "buildship": { "index": 5 },
            "title": "Instructions"
          },
          "assistantId": {
            "type": "string",
            "buildship": { "index": 1, "sensitive": false },
            "title": "Assistant ID",
            "pattern": "",
            "description": "The ID of the assistant to use. You need to create the assistant in the Azure OpenAI Studio."
          },
          "userPrompt": {
            "type": "string",
            "description": "The prompt to send to the assistant as user message.\n",
            "title": "User prompt",
            "buildship": { "index": 6, "sensitive": false },
            "default": "",
            "pattern": ""
          }
        }
      },
      "output": {
        "properties": {
          "annotations": {
            "description": "The annotations of the message",
            "buildship": { "index": 3 },
            "type": "array",
            "title": "Annotations"
          },
          "response": { "type": "string", "buildship": { "index": 2 }, "description": "", "title": "Response" },
          "threadId": {
            "description": "The thread ID that this message belongs to.",
            "buildship": { "index": 1 },
            "type": "string",
            "title": "Thread ID"
          },
          "messages": {
            "buildship": { "index": 0 },
            "type": "array",
            "description": "The content of the message in array of text and/or images.",
            "title": "Messages"
          }
        },
        "description": "",
        "title": "Assistant Response",
        "type": "object",
        "buildship": { "index": 0 }
      },
      "nodes": [
        {
          "name": "Get Sheets",
          "dependencies": { "node-fetch": "2.7.0" },
          "_libRef": {
            "version": "1.0.3",
            "libNodeRefId": "@buildship/oauth-gsheets-get-sheet",
            "integrity": "v3:f8f3b15ffb6cca5de72ce53e98a588b5",
            "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/oauth-gsheets-get-sheet/1.0.3/build.cjs",
            "isDirty": true,
            "libType": "public"
          },
          "script": "import fetch from 'node-fetch';\n\nexport default async function fetchGoogleSpreadsheet({\n    spreadsheetUrl,\n    ranges\n}, {\n    auth,\n    logging\n}) {\n    const { access_token } = await auth.getToken();\n\n    // Extracting spreadsheetId from the URL\n    const regex = /\\/spreadsheets\\/d\\/([a-zA-Z0-9-_]+)/;\n    const match = spreadsheetUrl.match(regex);\n    if (!match) {\n        throw new Error('Invalid spreadsheet URL');\n    }\n    const spreadsheetId = match[1];\n\n  \n    const response = await fetch(`https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${ranges}`, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${access_token}`\n        }\n    });\n    const data = await response.json();\n    return data;\n}\n",
          "label": "Get Sheets",
          "meta": {
            "description": "Fetch a Google Spreadsheet using the Google Sheets API",
            "name": "Get Sheets",
            "id": "oauth-gsheets-get-sheet",
            "icon": {
              "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2FGoogleSheets.png?alt=media&token=89b3cfec-6746-43da-a404-5d20adb60472",
              "type": "URL"
            }
          },
          "inputs": {
            "type": "object",
            "required": ["apiKey", "includeGridData", "spreadsheetUrl", "ranges"],
            "properties": {
              "spreadsheetUrl": {
                "pattern": "",
                "description": "The URL of the Google Spreadsheet to fetch. [Refer API Documentation](https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/create).\n\nTIP 💡: Available in the following format in your Google Sheets: `https://docs.google.com/spreadsheets/d/spreadsheet-id/edit`",
                "type": "string",
                "buildship": { "index": 0, "sensitive": false },
                "default": "",
                "title": "Sheet URL"
              },
              "ranges": {
                "pattern": "",
                "description": "The ranges to retrieve from the spreadsheet.\n\n**SAMPLE INPUT:**\n```\n[\"Sheet1\"]\n```",
                "title": "Ranges",
                "type": "string",
                "buildship": { "sensitive": false, "index": 1 },
                "default": []
              }
            }
          },
          "id": "b7e504a8-d543-4555-b73c-51b29e1fb80a",
          "type": "script",
          "integrations": ["gsheets"],
          "output": {
            "type": "object",
            "title": "Spreadsheet Data",
            "buildship": {},
            "description": "The data of the fetched Google Spreadsheet"
          },
          "onFail": null
        }
      ],
      "onFail": null,
      "label": "Azure OpenAI Assistant",
      "description": "Add different script nodes and let the OpenAI assistant automatically choose which to execute based on the input. once it has completed the request, it will return its response as output message. [Full Documentation](https://docs.buildship.com/core-nodes/openai-assistant)."
    },
    {
      "type": "return",
      "description": "The Return Node is used to return values from the workflow. It is generally the last node in the workflow. The return node is optional as the API can inherently return a 200 OK response by default. [Full Documentation](https://docs.buildship.com/core-nodes/return).",
      "response": { "2XX": { "type": "object", "properties": {} } },
      "id": "1a78bd45-ea17-4592-8b77-b6aa43c30be6",
      "inputs": {
        "required": [],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "default": "200",
            "enum": ["200", "201", "202", "204", "400", "401", "403", "404", "429", "500"],
            "buildship": {
              "options": [
                { "value": "200", "label": "OK (200)" },
                { "value": "201", "label": "Created (201)" },
                { "value": "202", "label": "Accepted (202)" },
                { "value": "301", "label": "Redirect (301)" },
                { "value": "204", "label": "No Content (204)" },
                { "value": "400", "label": "Bad Request (400)" },
                { "label": "Unauthorized (401)", "value": "401" },
                { "value": "403", "label": "Forbidden (403)" },
                { "label": "Not Found (404)", "value": "404" },
                { "value": "429", "label": "Too Many Requests (429)" },
                { "label": "Internal Server Error (500)", "value": "500" }
              ],
              "index": 0
            },
            "title": "Status code",
            "description": "The HTTP status code to return"
          },
          "cacheMaxAge": {
            "title": "Cache Time",
            "default": 0,
            "buildship": { "index": 2 },
            "description": "Set cache duration in seconds",
            "type": "number"
          },
          "value": {
            "type": "string",
            "description": "The value to return",
            "title": "Value",
            "buildship": { "index": 1 },
            "default": ""
          }
        }
      },
      "label": "Return"
    }
  ],
  "trigger": {
    "testingSchema": [
      {
        "prefill": "endpointURL",
        "label": "Endpoint URL",
        "type": "shortText",
        "name": "endpointURL",
        "disabled": true
      },
      { "prefill": "apiRequestData", "name": "apiRequestData", "type": "apiRequestData" }
    ],
    "meta": {
      "icon": {},
      "description": "Create an API / HTTP endpoint as the trigger or starting point for your workflow. This endpoint can be used in other apps to run the workflow. [Full documentation](https://docs.buildship.com/trigger-nodes/rest-api)",
      "id": "http",
      "name": "Rest API Call"
    },
    "inputs": {
      "required": ["method", "path"],
      "type": "object",
      "properties": {
        "path": {
          "pattern": "",
          "buildship": { "index": 0, "sensitive": false },
          "description": "The path of the API Endpoint. Additionally, define the structure for the incoming API requests. [Learn more about API Specification here](https://docs.buildship.com/basics/api-spec#request-specification).",
          "title": "Path",
          "default": "/",
          "type": "string"
        },
        "method": {
          "buildship": {
            "options": [
              { "label": "GET", "value": "GET" },
              { "label": "POST", "value": "POST" },
              { "label": "PUT", "value": "PUT" },
              { "label": "DELETE", "value": "DELETE" }
            ],
            "index": 1,
            "sensitive": false
          },
          "enum": ["GET", "POST", "PUT", "DELETE"],
          "default": "GET",
          "type": "string",
          "pattern": "",
          "title": "Method",
          "description": "The HTTP method for the incoming request."
        }
      }
    },
    "script": "",
    "dependencies": {},
    "request": {
      "properties": {
        "body": {
          "type": "object",
          "title": "Body",
          "description": "Body of the request",
          "buildship": {},
          "properties": {
            "message": { "description": "", "title": "Message", "type": "string", "buildship": { "index": 0 } },
            "threadId": { "title": "Thread Id", "description": "", "buildship": { "index": 1 }, "type": "string" }
          }
        },
        "query": {
          "buildship": {},
          "type": "object",
          "properties": {},
          "title": "Query",
          "description": "Query parameters"
        },
        "headers": {
          "properties": {},
          "title": "Request Headers",
          "buildship": {},
          "type": "object",
          "description": "Headers of the request"
        }
      },
      "buildship": {},
      "type": "object",
      "title": "Request",
      "required": []
    },
    "live": true,
    "type": "http",
    "label": "Rest API Call",
    "output": {
      "properties": {
        "headers": {
          "buildship": {},
          "description": "Headers of the request",
          "title": "Headers",
          "type": "object",
          "properties": {
            "authorization": {
              "buildship": { "index": 1 },
              "type": "string",
              "description": "Authorization header",
              "title": "Authorization"
            },
            "content-type": {
              "description": "Content-Type of the request",
              "buildship": { "index": 0 },
              "type": "string",
              "title": "Content-Type"
            }
          }
        },
        "query": {
          "title": "Query parameters",
          "type": "object",
          "description": "Query parameters",
          "buildship": { "index": 0 }
        },
        "body": { "description": "Body of the request", "title": "Body", "type": "object", "buildship": { "index": 1 } }
      },
      "buildship": {},
      "type": "object",
      "title": "Request"
    },
    "order": 1,
    "id": "http",
    "groupId": null,
    "instruction": { "title": "Endpoint URL", "bodyTemplate": "https://{{runtimeUrl}}/{{httpPath}}" }
  },
  "nodeValues": {
    "1a78bd45-ea17-4592-8b77-b6aa43c30be6": {
      "status": "200",
      "cacheMaxAge": 0,
      "value": {
        "type": "javascript",
        "expression": "{\n  \"message\": ctx[\"root\"][\"f1ec60a6-cd5d-4315-90e8-f45f1dd80c11\"][\"response\"],\n  \"threadId\": ctx[\"root\"][\"f1ec60a6-cd5d-4315-90e8-f45f1dd80c11\"][\"threadId\"]\n}"
      }
    },
    "f1ec60a6-cd5d-4315-90e8-f45f1dd80c11": {
      "userPrompt": { "keys": ["request", "body", "message"] },
      "assistantId": "",
      "azureApiKey": "",
      "instructions": "You are a Azura Home specialist. You have a detailed knowledge of Azura Home's eco-friendly Mediterranean furniture and decor products. Your task is to provide informative and helpful responses to user inquiries about product materials, design inspirations, styles or pricing and any other specifics they might be interested in. Your answers should reflect the brand's commitment to sustainability, craftsmanship, and the Mediterranean aesthetic, helping users make informed decisions while fostering an appreciation for the unique qualities of each piece in the Azura Home collection. When you are given tools to use, you must use them following the guidelines for each tool.Guidelines:- when you start the conversation, you must use 'get sheets' tool to access Azure Home collection of products which read it from the defined spreadheet",
      "resource": "",
      "threadId": { "keys": ["request", "body", "threadId"] }
    },
    "http": { "method": "POST", "path": "/azure-chat-with-gsheets" },
    "3d1a7540-9490-42ee-bec3-ae3ecb6c9072": {
      "value": {
        "type": "javascript",
        "expression": "{\n  \"message\": ctx[\"root\"][\"f1ec60a6-cd5d-4315-90e8-f45f1dd80c11\"][\"response\"],\n  \"threadId\": ctx[\"root\"][\"f1ec60a6-cd5d-4315-90e8-f45f1dd80c11\"][\"threadId\"]\n}"
      },
      "status": "200",
      "cacheMaxAge": 0
    },
    "60accd2b-d248-4e70-bfe2-1483d0484615": {
      "assistantId": "",
      "resource": "",
      "azureApiKey": "",
      "threadId": { "keys": ["request", "body", "threadId"] },
      "userPrompt": { "keys": ["request", "body", "message"] },
      "instructions": ""
    },
    "b7e504a8-d543-4555-b73c-51b29e1fb80a": { "integrations": {}, "spreadsheetUrl": "", "ranges": "" }
  },
  "notes": "<p>An assistant that allows you to chat with a google sheets. Here the sheets had data about furnitures. Try it using this test request body:</p><p><br></p><p>{</p><p>&nbsp;\"message\":\"what price range are your Mediterranean sofas?\"</p><p>}</p><p><br></p><p>Short Video: <a href=\"https://www.youtube.com/watch?v=OiQJQMk_2mo\" rel=\"noopener noreferrer\" target=\"_blank\">youtube.com/watch?v=OiQJQMk_2mo</a></p><p>Documentation: <a href=\"https://docs.buildship.com/ai-models/assistant#use-case-i-chat-with-assistant\" rel=\"noopener noreferrer\" target=\"_blank\">docs.buildship.com/ai-models/assistant</a></p>"
}
