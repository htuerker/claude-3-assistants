{
  "nodes": [
    {
      "script": "import { AssistantsClient, ToolDefinition } from \"@azure/openai-assistants\";\nimport { AzureKeyCredential } from \"@azure/openai\";\nimport { setTimeout } from \"timers/promises\";\n\nconst nodeToOpenAiFunction: (node: Node) => ToolDefinition = (node) => {\n  return {\n    type: \"function\",\n    function: {\n      name: node.id,\n      description: node.meta.description ?? \"\",\n      parameters: {\n        type: \"object\",\n        properties: Object.entries(node.inputs.properties)\n          .reduce((properties, [name, value]) => {\n            if (value.buildship && !value.buildship.toBeAutoFilled) return properties;\n            return {\n              ...properties, [name]: {\n                type: value.type,\n                enum: value.enum,\n                description: value.description\n              }\n            }\n          }, {}),\n        required: Object.entries(node.inputs.properties).map(([name, value]) => {\n          if (value.buildship && value.buildship.toBeAutoFilled && node.inputs.required.includes(name)) return name;\n          return false;\n        }).filter(Boolean),\n      }\n    }\n  };\n}\n\nconst sleep: (ms: number) => Promise<any> = (ms) =>\n  new Promise((resolve) => setTimeout(ms).then(() => resolve(true)));\n\ntype Params = {\n  azureApiKey: string;\n  resource: string;\n  assistantId: string;\n  threadId: string;\n  userPrompt: string;\n  builtInTools: string[];\n  instructions: any;\n}\n\nexport default async function assistant(\n  { azureApiKey, resource, assistantId, threadId, userPrompt, builtInTools = [], instructions }: Params,\n  { logging, execute, nodes }: any\n) {\n\n  const tools = nodes?.map(nodeToOpenAiFunction) ?? [];\n\n  const endpoint = `https://${resource}.openai.azure.com`;\n  const credentials = new AzureKeyCredential(azureApiKey);\n  const assistantsClient = new AssistantsClient(endpoint, credentials);\n\n  const messages = [{ role: \"user\", content: userPrompt }];\n\n  if (threadId) {\n    await assistantsClient.createMessage(threadId, \"user\", userPrompt);\n  } else {\n    threadId = (await assistantsClient.createThread({ messages })).id;\n    logging.log(\"New thread created with ID:\", threadId);\n  }\n\n  // Retrieval tool isn't supported in Azure yet\n  // builtInTools.includes(\"retrieval\") && tools.push({ type: \"retrieval\" });\n  builtInTools.includes(\"code_interpreter\") && tools.push({ type: \"code_interpreter\" });\n\n  let runResponse = await assistantsClient.createRun(threadId, {\n    assistantId,\n    instructions,\n    tools,\n  });\n\n  do {\n    await sleep(1000);\n    runResponse = await assistantsClient.getRun(runResponse.threadId, runResponse.id);\n\n    const isToolUse = runResponse.status === \"requires_action\" && runResponse.requiredAction?.type === \"submit_tool_outputs\";\n    if (isToolUse) {\n      const toolOutputs = [];\n      const toolUses = runResponse.requiredAction?.submitToolOutputs?.toolCalls || [];\n      for (const toolUse of toolUses) {\n        let args;\n        try {\n          args = JSON.parse(toolUse.function.arguments);\n          logging.log(args);\n        } catch (err) {\n          logging.log(`Couldn't parse function arguments. Received: ${toolUse.function.arguments}`);\n          throw new Error(`Couldn't parse function arguments. Received: ${toolUse.function.arguments}`)\n        }\n        const node = nodes?.find((node: Node) => node.id === toolUse.function.name);\n        if (!node) {\n          throw new Error(`Unknown tool: ${toolUse.function.name}`);\n        }\n        const toolOutput = await execute(node.label, args);\n\n        logging.log(toolOutput);\n        toolOutputs.push({\n          toolCallId: toolUse.id,\n          output: toolOutput ? JSON.stringify(toolOutput) : \"\"\n        });\n        logging.log(\n          `Executed ${node.label} with output:`,\n          toolOutput\n        );\n      }\n      runResponse = await assistantsClient.submitToolOutputsToRun(runResponse.threadId, runResponse.id, toolOutputs);\n    }\n  } while (runResponse.status === \"queued\" || runResponse.status === \"in_progress\")\n\n  const { data } = await assistantsClient.listMessages(runResponse.threadId, { order: \"desc\" });\n\n  const resultMessage = data[0];\n\n  if (resultMessage.content[0].type === \"text\") {\n    return {\n      \"response\": resultMessage.content[0].text.value,\n      \"annotations\": resultMessage.content[0].text.annotations,\n      \"threadId\": runResponse.threadId,\n      \"messages\": data\n    };\n  }\n\n  if (resultMessage.content[0].type === \"image_file\") {\n    return {\n      \"response\": \"\",\n      \"imageFileId\": resultMessage.content[0].imageFile.fileId,\n      \"annotations\": [],\n      \"threadId\": runResponse.threadId,\n      \"messages\": data\n    };\n  }\n}\n\ntype Node = {\n  label: string;\n  meta: {\n    id: string;\n    description: string;\n    name: string;\n    [key: string]: any;\n  };\n  inputs: {\n    type: string;\n    required: string[];\n    properties: Record<string, {\n      description: string;\n      buildship?: {\n        toBeAutoFilled?: boolean;\n        [key: string]: any;\n      }\n      [key: string]: any;\n    }>;\n  };\n  [key: string]: any;\n};",
      "meta": {
        "name": "Azure OpenAI Assistant",
        "description": "Add different script nodes and let the OpenAI assistant automatically choose which to execute based on the input.",
        "id": "azure-openai-assistant-node",
        "icon": { "url": "https://www.svgrepo.com/show/448274/azure.svg", "type": "URL" }
      },
      "type": "script",
      "subType": "assistant",
      "label": "Azure OpenAI Assistant",
      "name": "Azure OpenAI Assistant",
      "onFail": null,
      "id": "8bbd4e56-ec4d-421e-9030-20b3efff8c9d",
      "inputs": {
        "type": "object",
        "properties": {
          "instructions": {
            "title": "Instructions",
            "type": "string",
            "buildship": { "index": 5 },
            "description": "Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis."
          },
          "builtInTools": {
            "enum": ["retrieval", "code_interpreter"],
            "description": "Select the OpenAI assistant built-in tools to use.",
            "buildship": {
              "options": [
                { "label": "Document Retrieval", "value": "retrieval" },
                { "value": "code_interpreter", "label": "Code Interpreter" }
              ],
              "index": 6
            },
            "title": "Built-in Tools",
            "type": "array"
          },
          "azureApiKey": {
            "description": "The Azure API key to use for authentication.",
            "buildship": { "sensitive": false, "index": 0 },
            "pattern": "",
            "type": "string",
            "title": "Azure API key"
          },
          "assistantId": {
            "type": "string",
            "title": "Assistant ID",
            "buildship": { "sensitive": false, "index": 1 },
            "description": "The ID of the assistant to use. You need to create the assistant in the Azure OpenAI Studio.",
            "pattern": ""
          },
          "threadId": {
            "description": "The ID of the conversation thread to use. If not specified, a new thread will be created.",
            "buildship": { "index": 4 },
            "title": "Thread ID",
            "type": "string"
          },
          "resource": {
            "buildship": { "index": 2, "sensitive": false },
            "description": "The name of your Azure resource.",
            "title": "Resource",
            "type": "string",
            "pattern": ""
          },
          "userPrompt": {
            "pattern": "",
            "default": "",
            "buildship": { "index": 6, "sensitive": false },
            "title": "User prompt",
            "description": "The prompt to send to the assistant as user message.\n",
            "type": "string"
          }
        },
        "required": ["userPrompt", "resource", "assistantId", "azureApiKey"]
      },
      "description": "Add different script nodes and let the OpenAI assistant automatically choose which to execute based on the input. once it has completed the request, it will return its response as output message. [Full Documentation](https://docs.buildship.com/core-nodes/openai-assistant).",
      "output": {
        "title": "Assistant Response",
        "type": "object",
        "description": "",
        "buildship": { "index": 0 },
        "properties": {
          "threadId": {
            "description": "The thread ID that this message belongs to.",
            "buildship": { "index": 1 },
            "type": "string",
            "title": "Thread ID"
          },
          "response": { "buildship": { "index": 2 }, "title": "Response", "type": "string", "description": "" },
          "annotations": {
            "description": "The annotations of the message",
            "type": "array",
            "title": "Annotations",
            "buildship": { "index": 3 }
          },
          "messages": {
            "type": "array",
            "buildship": { "index": 0 },
            "description": "The content of the message in array of text and/or images.",
            "title": "Messages"
          }
        }
      },
      "nodes": [
        {
          "dependencies": { "@google-cloud/firestore": "7.1.0" },
          "id": "febfb963-614d-4238-9851-af48e9946117",
          "onFail": null,
          "meta": {
            "icon": {
              "type": "URL",
              "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2FIcon.png?alt=media&token=878ed11b-1cf2-45d8-9951-7e95a16d26af&_gl=1*1ld9l67*_ga*NzgyMDk5NjMxLjE2OTY4NzE3ODU.*_ga_CW55HF8NVT*MTY5NjkyMzc5OC4yLjEuMTY5NjkyMzgzMy4yNS4wLjA."
            },
            "description": "get the list of dishes from restaurant menu ",
            "id": "buildship-firestore-collection-query",
            "name": "access menu"
          },
          "type": "script",
          "label": "access menu",
          "integrations": [],
          "script": "import { Firestore } from '@google-cloud/firestore';\n\nexport default async function firestoreQueryDocuments(\n  {\n    collection\n  },\n) {\n  const firestore = new Firestore(undefined);\n\n  let query = firestore.collection(collection);\n\n\n  let snapshot = await query.limit(100).get();\n  return snapshot.docs.map(doc => ({\n    id: doc.id,\n    data: doc.data()\n  }));\n}\n",
          "_libRef": {
            "libNodeRefId": "@buildship/buildship-firestore-collection-query",
            "version": "1.0.2",
            "integrity": "v3:44572885b08be8ac99f1f10eea882c16",
            "libType": "public",
            "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/buildship-firestore-collection-query/1.0.2/build.cjs",
            "isDirty": true
          },
          "description": "get the list of dishes from restaurant menu ",
          "name": "access menu",
          "inputs": {
            "type": "object",
            "properties": {
              "collection": {
                "buildship": { "index": 0 },
                "title": "Collection Name",
                "description": "The name of the BuildShip collection",
                "type": "string"
              }
            },
            "required": ["collection", "filters"]
          },
          "output": {
            "description": "The array of documents that match the query",
            "type": "array",
            "properties": {
              "id": { "type": "string", "title": "Document ID", "buildship": { "index": 1 } },
              "data": { "title": "Document Data", "type": "object", "buildship": { "index": 0 } }
            },
            "buildship": {},
            "title": "Documents"
          }
        }
      ]
    },
    {
      "id": "b0a8bab8-8468-454f-a3d5-7635f6778a0e",
      "response": {
        "200": {
          "description": "",
          "title": "Assistant Response",
          "buildship": { "index": 0 },
          "type": "object",
          "properties": {
            "messages": {
              "title": "Messages",
              "description": "The content of the message in array of text and/or images.",
              "buildship": { "index": 0 },
              "type": "array"
            },
            "threadId": {
              "description": "The thread ID that this message belongs to.",
              "type": "string",
              "title": "Thread ID",
              "buildship": { "index": 1 }
            },
            "response": { "description": "", "title": "Response", "type": "string", "buildship": { "index": 2 } },
            "annotations": {
              "description": "The annotations of the message",
              "type": "array",
              "title": "Annotations",
              "buildship": { "index": 3 }
            }
          }
        }
      },
      "description": "The Return Node is used to return values from the workflow. It is generally the last node in the workflow. The return node is optional as the API can inherently return a 200 OK response by default. [Full Documentation](https://docs.buildship.com/core-nodes/return).",
      "type": "return",
      "inputs": {
        "required": [],
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "The value to return",
            "title": "Value",
            "buildship": { "index": 1 },
            "default": ""
          },
          "status": {
            "description": "The HTTP status code to return",
            "type": "string",
            "buildship": {
              "index": 0,
              "options": [
                { "value": "200", "label": "OK (200)" },
                { "label": "Created (201)", "value": "201" },
                { "value": "202", "label": "Accepted (202)" },
                { "label": "Redirect (301)", "value": "301" },
                { "value": "204", "label": "No Content (204)" },
                { "value": "400", "label": "Bad Request (400)" },
                { "value": "401", "label": "Unauthorized (401)" },
                { "label": "Forbidden (403)", "value": "403" },
                { "value": "404", "label": "Not Found (404)" },
                { "value": "500", "label": "Internal Server Error (500)" }
              ]
            },
            "enum": ["200", "201", "202", "204", "400", "401", "403", "404", "500"],
            "title": "Status code",
            "default": "200"
          },
          "cacheMaxAge": {
            "description": "Set cache duration in seconds",
            "type": "number",
            "title": "Cache Time",
            "buildship": { "index": 2 },
            "default": 0
          }
        }
      },
      "label": "Return"
    }
  ],
  "trigger": {
    "dependencies": {},
    "request": {
      "required": [],
      "buildship": {},
      "title": "Request",
      "type": "object",
      "description": "",
      "properties": {
        "headers": {
          "description": "Headers of the request",
          "buildship": {},
          "title": "Request Headers",
          "properties": {},
          "type": "object"
        },
        "body": { "title": "Body", "buildship": {}, "description": "Body of the request", "type": "object" },
        "query": {
          "buildship": {},
          "description": "Query parameters",
          "title": "Query",
          "type": "object",
          "properties": {}
        }
      }
    },
    "instruction": { "bodyTemplate": "https://{{runtimeUrl}}/{{httpPath}}", "title": "Endpoint URL" },
    "type": "http",
    "live": true,
    "meta": {
      "name": "Rest API Call",
      "id": "http",
      "icon": {},
      "description": "Create an API / HTTP endpoint as the trigger or starting point for your workflow. This endpoint can be used in other apps to run the workflow. [Full documentation](https://docs.buildship.com/trigger-nodes/rest-api)"
    },
    "label": "Rest API Call",
    "id": "http",
    "output": {
      "type": "object",
      "properties": {
        "query": {
          "description": "Query parameters",
          "type": "object",
          "buildship": { "index": 0 },
          "title": "Query parameters"
        },
        "body": {
          "type": "object",
          "description": "Body of the request",
          "title": "Body",
          "buildship": { "index": 1 }
        },
        "headers": {
          "description": "Headers of the request",
          "title": "Headers",
          "properties": {
            "authorization": {
              "type": "string",
              "buildship": { "index": 1 },
              "description": "Authorization header",
              "title": "Authorization"
            },
            "content-type": {
              "buildship": { "index": 0 },
              "title": "Content-Type",
              "type": "string",
              "description": "Content-Type of the request"
            }
          },
          "type": "object",
          "buildship": {}
        }
      },
      "title": "Request",
      "buildship": {}
    },
    "testingSchema": [
      {
        "prefill": "endpointURL",
        "name": "endpointURL",
        "label": "Endpoint URL",
        "disabled": true,
        "type": "shortText"
      },
      { "type": "apiRequestData", "prefill": "apiRequestData", "name": "apiRequestData" }
    ],
    "inputs": {
      "properties": {
        "method": {
          "buildship": {
            "sensitive": false,
            "index": 1,
            "options": [
              { "value": "GET", "label": "GET" },
              { "label": "POST", "value": "POST" },
              { "label": "PUT", "value": "PUT" },
              { "value": "DELETE", "label": "DELETE" }
            ]
          },
          "title": "Method",
          "type": "string",
          "enum": ["GET", "POST", "PUT", "DELETE"],
          "pattern": "",
          "description": "The HTTP method for the incoming request.",
          "default": "GET"
        },
        "path": {
          "pattern": "",
          "default": "/",
          "description": "The path of the API Endpoint. Additionally, define the structure for the incoming API requests. [Learn more about API Specification here](https://docs.buildship.com/basics/api-spec#request-specification).",
          "title": "Path",
          "buildship": { "sensitive": false, "index": 0 },
          "type": "string"
        }
      },
      "required": ["method", "path"],
      "type": "object"
    },
    "script": ""
  },
  "nodeValues": {
    "febfb963-614d-4238-9851-af48e9946117": { "collection": "" },
    "http": { "method": "POST", "path": "/azure-chat-with-your-data" },
    "8bbd4e56-ec4d-421e-9030-20b3efff8c9d": {
      "assistantId": "",
      "threadId": { "type": "javascript", "expression": "ctx[\"root\"][\"request\"][\"body\"].threadId" },
      "instructions": "You are an expert waitress at a fine dining restaurant. You are familiar with all of the dishes on the menu and are able to recommend the best dishes to customers based on their preferences. You also include possible wine pairings and offer up dessert options when needed.When you are given tools to use, you must use them following the guidelines for each tool.Guidelines:- When the user asks for a menu recommendation you must use 'access menu' get the list of dishes from restaurant menu ",
      "resource": "",
      "userPrompt": {
        "hasErrors": false,
        "expression": "ctx[\"root\"][\"request\"][\"body\"].message",
        "type": "javascript"
      },
      "azureApiKey": ""
    },
    "b0a8bab8-8468-454f-a3d5-7635f6778a0e": {
      "status": "200",
      "cacheMaxAge": 0,
      "value": { "keys": ["8bbd4e56-ec4d-421e-9030-20b3efff8c9d"] }
    }
  },
  "notes": "<p>An assistant that gives you plans for travel in a city. Try it using this test request body:</p><p><br></p><p>{</p><p>\"message\":\"I want to have a dessert\"</p><p>}</p><p><br></p><p>Short Video: <a href=\"https://www.youtube.com/watch?v=OiQJQMk_2mo\" rel=\"noopener noreferrer\" target=\"_blank\">youtube.com/watch?v=OiQJQMk_2mo</a></p><p>Documentation: <a href=\"https://docs.buildship.com/ai-models/assistant#use-case-i-chat-with-assistant\" rel=\"noopener noreferrer\" target=\"_blank\">docs.buildship.com/ai-models/assistant</a></p>"
}
