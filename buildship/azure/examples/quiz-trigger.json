{
  "nodes": [
    {
      "inputs": {
        "properties": {
          "assistantId": {
            "description": "The ID of the assistant to use. You need to create the assistant in the Azure OpenAI Studio.",
            "type": "string",
            "buildship": { "index": 1, "sensitive": false },
            "pattern": "",
            "title": "Assistant ID"
          },
          "threadId": {
            "buildship": { "index": 4 },
            "description": "The ID of the conversation thread to use. If not specified, a new thread will be created.",
            "title": "Thread ID",
            "type": "string"
          },
          "azureApiKey": {
            "pattern": "",
            "title": "Azure API key",
            "description": "The Azure API key to use for authentication.",
            "type": "string",
            "buildship": { "sensitive": false, "index": 0 }
          },
          "instructions": {
            "description": "Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.",
            "type": "string",
            "title": "Instructions",
            "buildship": { "index": 5 }
          },
          "resource": {
            "type": "string",
            "description": "The name of your Azure resource.",
            "title": "Resource",
            "buildship": { "hidden": false, "sensitive": false, "index": 2 },
            "pattern": ""
          },
          "builtInTools": {
            "type": "array",
            "buildship": {
              "options": [
                { "label": "Document Retrieval", "value": "retrieval" },
                { "value": "code_interpreter", "label": "Code Interpreter" }
              ],
              "index": 6
            },
            "title": "Built-in Tools",
            "enum": ["retrieval", "code_interpreter"],
            "description": "Select the OpenAI assistant built-in tools to use."
          },
          "userPrompt": {
            "buildship": { "sensitive": false, "index": 6 },
            "title": "User prompt",
            "type": "string",
            "description": "The prompt to send to the assistant as user message.\n",
            "default": "",
            "pattern": ""
          }
        },
        "required": ["userPrompt", "resource", "assistantId", "azureApiKey"],
        "type": "object"
      },
      "name": "Azure OpenAI Assistant",
      "id": "f88bd6fb-b9d1-4949-bd0f-e8f14a68c742",
      "nodes": [
        {
          "inputs": {
            "type": "object",
            "properties": {
              "data": {
                "title": "Quiz data",
                "default": {},
                "pattern": "",
                "description": "The quiz data in JSON format with fields: question, options, correctAnswer, keywords",
                "type": "object",
                "properties": {},
                "buildship": { "sensitive": false, "toBeAutoFilled": true, "index": 2 }
              },
              "collectionName": {
                "title": "Collection Name",
                "buildship": { "index": 0 },
                "type": "string",
                "description": "The name of your Firestore collection"
              },
              "id": {
                "type": "string",
                "buildship": { "sensitive": false, "index": 1 },
                "description": "The ID of the document to create or update",
                "title": "Document ID",
                "pattern": ""
              },
              "merge": {
                "type": "boolean",
                "description": "Whether to merge the data with any existing document",
                "title": "Merge",
                "buildship": { "index": 3 },
                "default": false
              }
            },
            "required": ["collectionName", "merge", "data"]
          },
          "id": "6eadd2f5-b78f-41a9-b220-144a021d4f56",
          "name": "Save Quiz Question",
          "_libRef": {
            "version": "1.0.0",
            "libType": "public",
            "src": "https://storage.googleapis.com/buildship-app-us-central1/cache/builtNodes/@buildship/buildship-create-document/v1_0_0.cjs",
            "integrity": "v3:f8ff07ce9cbad39ca8528d0108cc4a3b",
            "isDirty": true,
            "libNodeRefId": "@buildship/buildship-create-document"
          },
          "meta": {
            "name": "Save Quiz Question",
            "icon": {
              "type": "URL",
              "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2FIcon.png?alt=media&token=878ed11b-1cf2-45d8-9951-7e95a16d26af&_gl=1*1ld9l67*_ga*NzgyMDk5NjMxLjE2OTY4NzE3ODU.*_ga_CW55HF8NVT*MTY5NjkyMzc5OC4yLjEuMTY5NjkyMzgzMy4yNS4wLjA."
            },
            "description": "save the latest quiz to the database",
            "id": "buildship-create-document"
          },
          "type": "script",
          "dependencies": { "@google-cloud/firestore": "7.1.0" },
          "description": "Save quiz data in JSON format:\n{\"question\":\"\", \"answers\":[list],\"correctAnswer\":\"\", \"keywords\":[list]}",
          "integrations": [],
          "script": "import { Firestore } from '@google-cloud/firestore';\n\nexport default async function createDocument({\n    collectionName,\n    id,\n    data,\n    merge,\n},{logging}) {\n    logging.log({data,id,collectionName})\n    logging.log({data})\n    const firestore = new Firestore(undefined);\n    if(id){\n      await firestore.collection(collectionName).doc(id).set(data, {\n          merge\n      });\n      return {\n          id,\n          path:`${collectionName}/${id}`,\n          status: 'success!'\n      };\n    } else{\n      const ref = await firestore.collection(collectionName).add(data);\n      return {\n          id:ref.id,\n          path:ref.path,\n          status: 'success!'\n      };\n    }\n}",
          "output": {
            "description": "The response from the Firestore set operation",
            "title": "Firestore Response",
            "type": "object",
            "properties": {
              "id": { "description": "Document ID", "type": "string", "buildship": { "index": 1 }, "title": "Id" },
              "path": {
                "buildship": { "index": 2 },
                "description": "Document Path",
                "title": "Path",
                "type": "string"
              },
              "status": { "type": "string", "title": "Status", "buildship": { "index": 0 } }
            },
            "buildship": {}
          },
          "label": "updateDatabase",
          "onFail": null
        }
      ],
      "script": "import { AssistantsClient, ToolDefinition } from \"@azure/openai-assistants\";\nimport { AzureKeyCredential } from \"@azure/openai\";\nimport { setTimeout } from \"timers/promises\";\n\nconst nodeToOpenAiFunction: (node: Node) => ToolDefinition = (node) => {\n  return {\n    type: \"function\",\n    function: {\n      name: node.id,\n      description: node.meta.description ?? \"\",\n      parameters: {\n        type: \"object\",\n        properties: Object.entries(node.inputs.properties)\n          .reduce((properties, [name, value]) => {\n            if (value.buildship && !value.buildship.toBeAutoFilled) return properties;\n            return {\n              ...properties, [name]: {\n                type: value.type,\n                enum: value.enum,\n                description: value.description\n              }\n            }\n          }, {}),\n        required: Object.entries(node.inputs.properties).map(([name, value]) => {\n          if (value.buildship && value.buildship.toBeAutoFilled && node.inputs.required.includes(name)) return name;\n          return false;\n        }).filter(Boolean),\n      }\n    }\n  };\n}\n\nconst sleep: (ms: number) => Promise<any> = (ms) =>\n  new Promise((resolve) => setTimeout(ms).then(() => resolve(true)));\n\ntype Params = {\n  azureApiKey: string;\n  resource: string;\n  assistantId: string;\n  threadId: string;\n  userPrompt: string;\n  builtInTools: string[];\n  instructions: any;\n}\n\nexport default async function assistant(\n  { azureApiKey, resource, assistantId, threadId, userPrompt, builtInTools = [], instructions }: Params,\n  { logging, execute, nodes }: any\n) {\n\n  const tools = nodes?.map(nodeToOpenAiFunction) ?? [];\n\n  const endpoint = `https://${resource}.openai.azure.com`;\n  const credentials = new AzureKeyCredential(azureApiKey);\n  const assistantsClient = new AssistantsClient(endpoint, credentials);\n\n  const messages = [{ role: \"user\", content: userPrompt }];\n\n  if (threadId) {\n    await assistantsClient.createMessage(threadId, \"user\", userPrompt);\n  } else {\n    threadId = (await assistantsClient.createThread({ messages })).id;\n    logging.log(\"New thread created with ID:\", threadId);\n  }\n\n  // Retrieval tool isn't supported in Azure yet\n  // builtInTools.includes(\"retrieval\") && tools.push({ type: \"retrieval\" });\n  builtInTools.includes(\"code_interpreter\") && tools.push({ type: \"code_interpreter\" });\n\n  let runResponse = await assistantsClient.createRun(threadId, {\n    assistantId,\n    instructions,\n    tools,\n  });\n\n  do {\n    await sleep(1000);\n    runResponse = await assistantsClient.getRun(runResponse.threadId, runResponse.id);\n\n    const isToolUse = runResponse.status === \"requires_action\" && runResponse.requiredAction?.type === \"submit_tool_outputs\";\n    if (isToolUse) {\n      const toolOutputs = [];\n      const toolUses = runResponse.requiredAction?.submitToolOutputs?.toolCalls || [];\n      for (const toolUse of toolUses) {\n        let args;\n        try {\n          args = JSON.parse(toolUse.function.arguments);\n          logging.log(args);\n        } catch (err) {\n          logging.log(`Couldn't parse function arguments. Received: ${toolUse.function.arguments}`);\n          throw new Error(`Couldn't parse function arguments. Received: ${toolUse.function.arguments}`)\n        }\n        const node = nodes?.find((node: Node) => node.id === toolUse.function.name);\n        if (!node) {\n          throw new Error(`Unknown tool: ${toolUse.function.name}`);\n        }\n        const toolOutput = await execute(node.label, args);\n\n        logging.log(toolOutput);\n        toolOutputs.push({\n          toolCallId: toolUse.id,\n          output: toolOutput ? JSON.stringify(toolOutput) : \"\"\n        });\n        logging.log(\n          `Executed ${node.label} with output:`,\n          toolOutput\n        );\n      }\n      runResponse = await assistantsClient.submitToolOutputsToRun(runResponse.threadId, runResponse.id, toolOutputs);\n    }\n  } while (runResponse.status === \"queued\" || runResponse.status === \"in_progress\")\n\n  const { data } = await assistantsClient.listMessages(runResponse.threadId, { order: \"desc\" });\n\n  const resultMessage = data[0];\n\n  if (resultMessage.content[0].type === \"text\") {\n    return {\n      \"response\": resultMessage.content[0].text.value,\n      \"annotations\": resultMessage.content[0].text.annotations,\n      \"threadId\": runResponse.threadId,\n      \"messages\": data\n    };\n  }\n\n  if (resultMessage.content[0].type === \"image_file\") {\n    return {\n      \"response\": \"\",\n      \"imageFileId\": resultMessage.content[0].imageFile.fileId,\n      \"annotations\": [],\n      \"threadId\": runResponse.threadId,\n      \"messages\": data\n    };\n  }\n}\n\ntype Node = {\n  label: string;\n  meta: {\n    id: string;\n    description: string;\n    name: string;\n    [key: string]: any;\n  };\n  inputs: {\n    type: string;\n    required: string[];\n    properties: Record<string, {\n      description: string;\n      buildship?: {\n        toBeAutoFilled?: boolean;\n        [key: string]: any;\n      }\n      [key: string]: any;\n    }>;\n  };\n  [key: string]: any;\n};",
      "onFail": null,
      "label": "Azure OpenAI Assistant",
      "meta": {
        "name": "Azure OpenAI Assistant",
        "id": "azure-openai-assistant-node",
        "description": "Add different script nodes and let the OpenAI assistant automatically choose which to execute based on the input.",
        "icon": { "type": "URL", "url": "https://www.svgrepo.com/show/448274/azure.svg" }
      },
      "subType": "assistant",
      "type": "script",
      "description": "Add different script nodes and let the OpenAI assistant automatically choose which to execute based on the input. once it has completed the request, it will return its response as output message. [Full Documentation](https://docs.buildship.com/core-nodes/openai-assistant).",
      "output": {
        "buildship": { "index": 0 },
        "description": "",
        "properties": {
          "annotations": {
            "description": "The annotations of the message",
            "type": "array",
            "title": "Annotations",
            "buildship": { "index": 3 }
          },
          "threadId": {
            "title": "Thread ID",
            "description": "The thread ID that this message belongs to.",
            "buildship": { "index": 1 },
            "type": "string"
          },
          "messages": {
            "description": "The content of the message in array of text and/or images.",
            "buildship": { "index": 0 },
            "type": "array",
            "title": "Messages"
          },
          "response": { "buildship": { "index": 2 }, "description": "", "title": "Response", "type": "string" }
        },
        "type": "object",
        "title": "Assistant Response"
      }
    },
    {
      "description": "The Return Node is used to return values from the workflow. It is generally the last node in the workflow. The return node is optional as the API can inherently return a 200 OK response by default. [Full Documentation](https://docs.buildship.com/core-nodes/return).",
      "label": "Return",
      "response": { "2XX": { "properties": {}, "type": "object" } },
      "inputs": {
        "type": "object",
        "properties": {
          "cacheMaxAge": {
            "title": "Cache Time",
            "default": 0,
            "buildship": { "index": 2 },
            "type": "number",
            "description": "Set cache duration in seconds"
          },
          "status": {
            "buildship": {
              "index": 0,
              "options": [
                { "value": "200", "label": "OK (200)" },
                { "label": "Created (201)", "value": "201" },
                { "value": "202", "label": "Accepted (202)" },
                { "value": "301", "label": "Redirect (301)" },
                { "value": "204", "label": "No Content (204)" },
                { "label": "Bad Request (400)", "value": "400" },
                { "value": "401", "label": "Unauthorized (401)" },
                { "label": "Forbidden (403)", "value": "403" },
                { "label": "Not Found (404)", "value": "404" },
                { "value": "429", "label": "Too Many Requests (429)" },
                { "value": "500", "label": "Internal Server Error (500)" }
              ]
            },
            "enum": ["200", "201", "202", "204", "400", "401", "403", "404", "429", "500"],
            "default": "200",
            "description": "The HTTP status code to return",
            "type": "string",
            "title": "Status code"
          },
          "value": {
            "default": "",
            "type": "string",
            "title": "Value",
            "description": "The value to return",
            "buildship": { "index": 1 }
          }
        },
        "required": []
      },
      "id": "2bea61a8-6d8d-480d-9e10-6cd753c5fe8e",
      "type": "return"
    }
  ],
  "trigger": {
    "script": "",
    "label": "Rest API Call",
    "request": {
      "buildship": {},
      "properties": {
        "query": {
          "buildship": {},
          "type": "object",
          "properties": {},
          "title": "Query",
          "description": "Query parameters"
        },
        "headers": {
          "properties": {},
          "buildship": {},
          "description": "Headers of the request",
          "type": "object",
          "title": "Request Headers"
        },
        "body": {
          "title": "Body",
          "type": "object",
          "buildship": {},
          "properties": {
            "threadId": { "title": "Thread Id", "description": "", "type": "string", "buildship": { "index": 1 } },
            "message": { "buildship": { "index": 0 }, "type": "string", "title": "Message", "description": "" }
          },
          "description": "Body of the request"
        }
      },
      "title": "Request",
      "required": [],
      "type": "object"
    },
    "dependencies": {},
    "type": "http",
    "instruction": { "title": "Endpoint URL", "bodyTemplate": "https://{{runtimeUrl}}/{{httpPath}}" },
    "meta": {
      "description": "Create an API / HTTP endpoint as the trigger or starting point for your workflow. This endpoint can be used in other apps to run the workflow. [Full documentation](https://docs.buildship.com/trigger-nodes/rest-api)",
      "id": "http",
      "name": "Rest API Call",
      "icon": {}
    },
    "groupId": null,
    "output": {
      "buildship": {},
      "type": "object",
      "title": "Request",
      "properties": {
        "query": {
          "description": "Query parameters",
          "buildship": { "index": 0 },
          "title": "Query parameters",
          "type": "object"
        },
        "body": {
          "type": "object",
          "buildship": { "index": 1 },
          "description": "Body of the request",
          "title": "Body"
        },
        "headers": {
          "title": "Headers",
          "description": "Headers of the request",
          "properties": {
            "authorization": {
              "title": "Authorization",
              "type": "string",
              "description": "Authorization header",
              "buildship": { "index": 1 }
            },
            "content-type": {
              "type": "string",
              "buildship": { "index": 0 },
              "title": "Content-Type",
              "description": "Content-Type of the request"
            }
          },
          "buildship": {},
          "type": "object"
        }
      }
    },
    "id": "http",
    "inputs": {
      "properties": {
        "method": {
          "type": "string",
          "default": "GET",
          "pattern": "",
          "description": "The HTTP method for the incoming request.",
          "title": "Method",
          "enum": ["GET", "POST", "PUT", "DELETE"],
          "buildship": {
            "sensitive": false,
            "options": [
              { "value": "GET", "label": "GET" },
              { "label": "POST", "value": "POST" },
              { "value": "PUT", "label": "PUT" },
              { "label": "DELETE", "value": "DELETE" }
            ],
            "index": 1
          }
        },
        "path": {
          "pattern": "",
          "default": "/",
          "description": "The path of the API Endpoint. Additionally, define the structure for the incoming API requests. [Learn more about API Specification here](https://docs.buildship.com/basics/api-spec#request-specification).",
          "title": "Path",
          "buildship": { "sensitive": false, "index": 0 },
          "type": "string"
        }
      },
      "required": ["method", "path"],
      "type": "object"
    },
    "testingSchema": [
      {
        "disabled": true,
        "name": "endpointURL",
        "prefill": "endpointURL",
        "type": "shortText",
        "label": "Endpoint URL"
      },
      { "prefill": "apiRequestData", "type": "apiRequestData", "name": "apiRequestData" }
    ],
    "order": 1,
    "live": true
  },
  "nodeValues": {
    "http": { "path": "/azure-quiz-master", "method": "POST" },
    "6eadd2f5-b78f-41a9-b220-144a021d4f56": { "collectionName": "", "merge": true, "id": "", "data": {} },
    "f88bd6fb-b9d1-4949-bd0f-e8f14a68c742": {
      "instructions": "You are a personal history tutor. You will answer questions in a concise way. If no question is given, you should provide a historical fact. You must also engage with users by creating little quizzes with 4 possible options to answer in each question. When you are given tools to use, you must use them following the guidelines for each tool. - Guidelines: When a new quiz is generated you must use 'updateDatabase' tool to save the latest quiz to the database",
      "threadId": { "keys": ["request", "body", "threadId"] },
      "userPrompt": { "keys": ["request", "body", "message"] },
      "assistantId": "",
      "resource": "",
      "azureApiKey": ""
    },
    "2bea61a8-6d8d-480d-9e10-6cd753c5fe8e": {
      "cacheMaxAge": 0,
      "value": {
        "expression": "{\n  \"message\": ctx[\"root\"][\"f88bd6fb-b9d1-4949-bd0f-e8f14a68c742\"][\"response\"],\n  \"threadId\": ctx[\"root\"][\"f88bd6fb-b9d1-4949-bd0f-e8f14a68c742\"][\"threadId\"]\n}",
        "type": "javascript"
      },
      "status": "200"
    }
  },
  "notes": "<p>{\"message\":\"History of Ottomans\" }</p>"
}
