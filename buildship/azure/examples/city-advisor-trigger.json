{
  "nodes": [
    {
      "nodes": [],
      "script": "import { AssistantsClient } from \"@azure/openai-assistants\";\nimport { AzureKeyCredential } from \"@azure/openai\";\nimport { setTimeout } from \"timers/promises\";\n\nconst nodeToOpenAiFunction = (node) => {\n  return {\n    type: \"function\",\n    function: {\n      name: node.id,\n      description: node.meta.description ?? \"\",\n      parameters: {\n        type: \"object\",\n        properties: Object.entries(node.inputs.properties)\n          .reduce((properties, [name, value]) => {\n            if (value.buildship && !value.buildship.toBeAutoFilled) return properties;\n            return {\n              ...properties, [name]: {\n                type: value.type,\n                enum: value.enum,\n                description: value.description\n              }\n            }\n          }, {}),\n        required: Object.entries(node.inputs.properties).map(([name, value]) => {\n          if (value.buildship && value.buildship.toBeAutoFilled && node.inputs.required.includes(name)) return name;\n          return false;\n        }).filter(Boolean),\n      }\n    }\n  };\n}\n\nconst sleep = (ms) =>\n  new Promise((resolve) => setTimeout(ms).then(() => resolve(true)));\n\nexport default async function assistant(\n  { azureApiKey, resource, assistantId, threadId, userPrompt, builtInTools = [], instructions },\n  { logging, execute, nodes }\n) {\n  const tools = nodes?.map(nodeToOpenAiFunction) ?? [];\n\n  const endpoint = `https://${resource}.openai.azure.com`;\n  const credentials = new AzureKeyCredential(azureApiKey);\n  const assistantsClient = new AssistantsClient(endpoint, credentials);\n\n  const messages = [{ role: \"user\", content: userPrompt }];\n\n  if (threadId) {\n    await assistantsClient.createMessage(threadId, \"user\", userPrompt);\n  } else {\n    threadId = (await assistantsClient.createThread({ messages })).id;\n    logging.log(\"New thread created with ID:\", threadId);\n  }\n\n  // Retrieval tool isn't supported in Azure yet\n  // builtInTools.includes(\"retrieval\") && tools.push({ type: \"retrieval\" });\n  builtInTools.includes(\"code_interpreter\") && tools.push({ type: \"code_interpreter\" });\n\n  let runResponse = await assistantsClient.createRun(threadId, {\n    assistantId,\n    instructions,\n    tools,\n  });\n\n  do {\n    await sleep(1000);\n    runResponse = await assistantsClient.getRun(runResponse.threadId, runResponse.id);\n\n    const isToolUse = runResponse.status === \"requires_action\" && runResponse.requiredAction?.type === \"submit_tool_outputs\";\n    if (isToolUse) {\n      const toolOutputs = [];\n      const toolUses = runResponse.requiredAction?.submitToolOutputs?.toolCalls || [];\n      for (const toolUse of toolUses) {\n        let args;\n        try {\n          args = JSON.parse(toolUse.function.arguments);\n          logging.log(args);\n        } catch (err) {\n          logging.log(`Couldn't parse function arguments. Received: ${toolUse.function.arguments}`);\n          throw new Error(`Couldn't parse function arguments. Received: ${toolUse.function.arguments}`)\n        }\n        const node = nodes?.find(node => node.id === toolUse.function.name);\n        if (!node) {\n          throw new Error(`Unknown tool: ${toolUse.function.name}`);\n        }\n        const toolOutput = await execute(node.label, args);\n\n        logging.log(toolOutput);\n        toolOutputs.push({\n          toolCallId: toolUse.id,\n          output: toolOutput ? JSON.stringify(toolOutput) : \"\"\n        });\n        logging.log(\n          `Executed ${node.label} with output:`,\n          toolOutput\n        );\n      }\n      runResponse = await assistantsClient.submitToolOutputsToRun(runResponse.threadId, runResponse.id, toolOutputs);\n    }\n  } while (runResponse.status === \"queued\" || runResponse.status === \"in_progress\")\n\n  const { data } = await assistantsClient.listMessages(runResponse.threadId, { order: \"desc\" });\n\n  const resultMessage = data[0];\n\n  if (resultMessage.content[0].type === \"text\") {\n    return {\n      \"response\": resultMessage.content[0].text.value,\n      \"annotations\": resultMessage.content[0].text.annotations,\n      \"threadId\": runResponse.threadId,\n      \"messages\": data\n    };\n  }\n\n  if (resultMessage.content[0].type === \"image_file\") {\n    return {\n      \"response\": \"\",\n      \"imageFileId\": resultMessage.content[0].imageFile.fileId,\n      \"annotations\": [],\n      \"threadId\": runResponse.threadId,\n      \"messages\": data\n    };\n  }\n}",
      "label": "Azure OpenAI Assistant",
      "inputs": {
        "properties": {
          "azureApiKey": {
            "title": "Azure API key",
            "type": "string",
            "pattern": "",
            "description": "The Azure API key to use for authentication.",
            "buildship": { "sensitive": false, "index": 0 }
          },
          "builtInTools": {
            "enum": ["retrieval", "code_interpreter"],
            "title": "Built-in Tools",
            "description": "Select the OpenAI assistant built-in tools to use.",
            "buildship": {
              "index": 6,
              "options": [
                { "value": "retrieval", "label": "Document Retrieval" },
                { "value": "code_interpreter", "label": "Code Interpreter" }
              ]
            },
            "type": "array"
          },
          "resource": {
            "pattern": "",
            "buildship": { "index": 2, "sensitive": false },
            "title": "Resource",
            "description": "The name of your Azure resource.",
            "type": "string"
          },
          "threadId": {
            "description": "The ID of the conversation thread to use. If not specified, a new thread will be created.",
            "title": "Thread ID",
            "type": "string",
            "buildship": { "index": 4 }
          },
          "instructions": {
            "description": "Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.",
            "type": "string",
            "title": "Instructions",
            "buildship": { "index": 5 }
          },
          "userPrompt": {
            "pattern": "",
            "default": "",
            "buildship": { "sensitive": false, "index": 6 },
            "description": "The prompt to send to the assistant as user message.\n",
            "title": "User prompt",
            "type": "string"
          },
          "assistantId": {
            "pattern": "",
            "buildship": { "sensitive": false, "index": 1 },
            "title": "Assistant ID",
            "description": "The ID of the assistant to use. You need to create the assistant in the Azure OpenAI Studio.",
            "type": "string"
          }
        },
        "required": ["userPrompt", "resource", "assistantId", "azureApiKey"],
        "type": "object"
      },
      "description": "Add different script nodes and let the OpenAI assistant automatically choose which to execute based on the input. once it has completed the request, it will return its response as output message. [Full Documentation](https://docs.buildship.com/core-nodes/openai-assistant).",
      "type": "script",
      "subType": "assistant",
      "id": "cc0a9b00-7bcf-4492-904e-909228584f61",
      "name": "Azure OpenAI Assistant",
      "output": {
        "type": "object",
        "properties": {
          "threadId": {
            "type": "string",
            "buildship": { "index": 1 },
            "title": "Thread ID",
            "description": "The thread ID that this message belongs to."
          },
          "annotations": {
            "buildship": { "index": 3 },
            "description": "The annotations of the message",
            "title": "Annotations",
            "type": "array"
          },
          "response": { "type": "string", "title": "Response", "description": "", "buildship": { "index": 2 } },
          "messages": {
            "buildship": { "index": 0 },
            "type": "array",
            "title": "Messages",
            "description": "The content of the message in array of text and/or images."
          }
        },
        "description": "",
        "buildship": { "index": 0 },
        "title": "Assistant Response"
      },
      "onFail": null,
      "meta": {
        "id": "azure-openai-assistant-node",
        "name": "Azure OpenAI Assistant",
        "description": "Add different script nodes and let the OpenAI assistant automatically choose which to execute based on the input.",
        "icon": { "url": "https://www.svgrepo.com/show/448274/azure.svg", "type": "URL" }
      }
    },
    {
      "inputs": {
        "required": [],
        "type": "object",
        "properties": {
          "cacheMaxAge": {
            "title": "Cache Time",
            "buildship": { "index": 2 },
            "type": "number",
            "description": "Set cache duration in seconds",
            "default": 0
          },
          "status": {
            "buildship": {
              "index": 0,
              "options": [
                { "value": "200", "label": "OK (200)" },
                { "label": "Created (201)", "value": "201" },
                { "value": "202", "label": "Accepted (202)" },
                { "value": "301", "label": "Redirect (301)" },
                { "value": "204", "label": "No Content (204)" },
                { "label": "Bad Request (400)", "value": "400" },
                { "label": "Unauthorized (401)", "value": "401" },
                { "value": "403", "label": "Forbidden (403)" },
                { "label": "Not Found (404)", "value": "404" },
                { "label": "Internal Server Error (500)", "value": "500" }
              ]
            },
            "title": "Status code",
            "enum": ["200", "201", "202", "204", "400", "401", "403", "404", "500"],
            "description": "The HTTP status code to return",
            "default": "200",
            "type": "string"
          },
          "value": {
            "description": "The value to return",
            "buildship": { "index": 1 },
            "title": "Value",
            "default": "",
            "type": "string"
          }
        }
      },
      "id": "c7219311-3c77-423d-a66c-98dda5d23505",
      "label": "Return",
      "description": "The Return Node is used to return values from the workflow. It is generally the last node in the workflow. The return node is optional as the API can inherently return a 200 OK response by default. [Full Documentation](https://docs.buildship.com/core-nodes/return).",
      "response": {
        "200": {
          "properties": {
            "threadId": {
              "buildship": { "index": 1 },
              "title": "Thread ID",
              "description": "The thread ID that this message belongs to.",
              "type": "string"
            },
            "annotations": {
              "title": "Annotations",
              "buildship": { "index": 3 },
              "description": "The annotations of the message",
              "type": "array"
            },
            "messages": {
              "description": "The content of the message in array of text and/or images.",
              "buildship": { "index": 0 },
              "type": "array",
              "title": "Messages"
            },
            "response": { "buildship": { "index": 2 }, "title": "Response", "description": "", "type": "string" }
          },
          "title": "Assistant Response",
          "type": "object",
          "description": "",
          "buildship": { "index": 0 }
        }
      },
      "type": "return"
    }
  ],
  "trigger": {
    "output": {
      "type": "object",
      "properties": {
        "body": {
          "type": "object",
          "title": "Body",
          "description": "Body of the request",
          "buildship": { "index": 1 }
        },
        "query": {
          "type": "object",
          "buildship": { "index": 0 },
          "title": "Query parameters",
          "description": "Query parameters"
        },
        "headers": {
          "title": "Headers",
          "properties": {
            "authorization": {
              "type": "string",
              "description": "Authorization header",
              "title": "Authorization",
              "buildship": { "index": 1 }
            },
            "content-type": {
              "buildship": { "index": 0 },
              "title": "Content-Type",
              "description": "Content-Type of the request",
              "type": "string"
            }
          },
          "type": "object",
          "buildship": {},
          "description": "Headers of the request"
        }
      },
      "title": "Request",
      "buildship": {}
    },
    "label": "Rest API Call",
    "instruction": { "title": "Endpoint URL", "bodyTemplate": "https://{{runtimeUrl}}/{{httpPath}}" },
    "request": {
      "type": "object",
      "properties": {
        "body": { "title": "Body", "description": "Body of the request", "buildship": {}, "type": "object" },
        "headers": {
          "title": "Request Headers",
          "properties": {},
          "buildship": {},
          "type": "object",
          "description": "Headers of the request"
        },
        "query": {
          "buildship": {},
          "title": "Query",
          "type": "object",
          "description": "Query parameters",
          "properties": {}
        }
      },
      "description": "",
      "required": [],
      "title": "Request",
      "buildship": {}
    },
    "id": "http",
    "meta": {
      "id": "http",
      "name": "Rest API Call",
      "description": "Create an API / HTTP endpoint as the trigger or starting point for your workflow. This endpoint can be used in other apps to run the workflow. [Full documentation](https://docs.buildship.com/trigger-nodes/rest-api)",
      "icon": {}
    },
    "testingSchema": [
      {
        "name": "endpointURL",
        "type": "shortText",
        "label": "Endpoint URL",
        "prefill": "endpointURL",
        "disabled": true
      },
      { "name": "apiRequestData", "prefill": "apiRequestData", "type": "apiRequestData" }
    ],
    "dependencies": {},
    "script": "",
    "live": true,
    "type": "http",
    "inputs": {
      "type": "object",
      "properties": {
        "path": {
          "buildship": { "sensitive": false, "index": 0 },
          "type": "string",
          "description": "The path of the API Endpoint. Additionally, define the structure for the incoming API requests. [Learn more about API Specification here](https://docs.buildship.com/basics/api-spec#request-specification).",
          "title": "Path",
          "default": "/",
          "pattern": ""
        },
        "method": {
          "default": "GET",
          "buildship": {
            "index": 1,
            "options": [
              { "value": "GET", "label": "GET" },
              { "value": "POST", "label": "POST" },
              { "label": "PUT", "value": "PUT" },
              { "value": "DELETE", "label": "DELETE" }
            ],
            "sensitive": false
          },
          "pattern": "",
          "description": "The HTTP method for the incoming request.",
          "title": "Method",
          "type": "string",
          "enum": ["GET", "POST", "PUT", "DELETE"]
        }
      },
      "required": ["method", "path"]
    }
  },
  "nodeValues": {
    "c7219311-3c77-423d-a66c-98dda5d23505": {
      "status": "200",
      "value": { "keys": ["cc0a9b00-7bcf-4492-904e-909228584f61"] },
      "cacheMaxAge": 0
    },
    "http": { "path": "/azure-city_advisor", "method": "POST" },
    "cc0a9b00-7bcf-4492-904e-909228584f61": {
      "userPrompt": {
        "expression": "ctx[\"root\"][\"request\"][\"body\"].message",
        "hasErrors": false,
        "type": "javascript"
      },
      "assistantId": "asst_yn1ysD0DbqcEHTnWAKpmhUuB",
      "instructions": "You are a city advisor, user will ask you for different city plans and you should respond based on their preferences. You can ask follow-up questions to better understand which are these preferences. You should give a summary of 3 events that someone can attend. Including the event title, link, date time",
      "resource": "buildship-ai-test-us2",
      "azureApiKey": { "secretName": "azure-han" },
      "threadId": { "expression": "ctx[\"root\"][\"request\"][\"body\"].threadId", "type": "javascript" }
    }
  },
  "notes": "<p>An assistant that gives you plans for travel in a city. Try it using this test request body:</p><p><br></p><p>{</p><p>\"message\":\"Plans for Sydney for 2 days\"</p><p>}</p><p><br></p><p>Short Video: <a href=\"https://www.youtube.com/watch?v=OiQJQMk_2mo\" rel=\"noopener noreferrer\" target=\"_blank\">youtube.com/watch?v=OiQJQMk_2mo</a></p><p>Documentation: <a href=\"https://docs.buildship.com/ai-models/assistant#use-case-i-chat-with-assistant\" rel=\"noopener noreferrer\" target=\"_blank\">docs.buildship.com/ai-models/assistant</a></p>"
}
