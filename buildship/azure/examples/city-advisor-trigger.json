{
  "nodes": [
    {
      "meta": {
        "name": "Azure OpenAI Assistant",
        "description": "Add different script nodes and let the OpenAI assistant automatically choose which to execute based on the input.",
        "id": "azure-openai-assistant-node",
        "icon": { "type": "URL", "url": "https://www.svgrepo.com/show/448274/azure.svg" }
      },
      "onFail": null,
      "nodes": [],
      "output": {
        "title": "Assistant Response",
        "properties": {
          "response": { "buildship": { "index": 2 }, "title": "Response", "type": "string", "description": "" },
          "annotations": {
            "description": "The annotations of the message",
            "title": "Annotations",
            "type": "array",
            "buildship": { "index": 3 }
          },
          "messages": {
            "type": "array",
            "buildship": { "index": 0 },
            "title": "Messages",
            "description": "The content of the message in array of text and/or images."
          },
          "threadId": {
            "type": "string",
            "description": "The thread ID that this message belongs to.",
            "buildship": { "index": 1 },
            "title": "Thread ID"
          }
        },
        "type": "object",
        "buildship": { "index": 0 },
        "description": ""
      },
      "description": "Add different script nodes and let the OpenAI assistant automatically choose which to execute based on the input. once it has completed the request, it will return its response as output message. [Full Documentation](https://docs.buildship.com/core-nodes/openai-assistant).",
      "id": "ae7ae8ef-272e-4ca4-acd1-f20cd8ce5e49",
      "script": "import { AssistantsClient } from \"@azure/openai-assistants\";\nimport { AzureKeyCredential } from \"@azure/openai\";\nimport { setTimeout } from \"timers/promises\";\n\nconst nodeToOpenAiFunction = (node) => {\n  return {\n    type: \"function\",\n    function: {\n      name: node.id,\n      description: node.meta.description ?? \"\",\n      parameters: {\n        type: \"object\",\n        properties: Object.entries(node.inputs.properties)\n          .reduce((properties, [name, value]) => {\n            if (value.buildship && !value.buildship.toBeAutoFilled) return properties;\n            return {\n              ...properties, [name]: {\n                type: value.type,\n                enum: value.enum,\n                description: value.description\n              }\n            }\n          }, {}),\n        required: Object.entries(node.inputs.properties).map(([name, value]) => {\n          if (value.buildship && value.buildship.toBeAutoFilled && node.inputs.required.includes(name)) return name;\n          return false;\n        }).filter(Boolean),\n      }\n    }\n  };\n}\n\nconst sleep = (ms) =>\n  new Promise((resolve) => setTimeout(ms).then(() => resolve(true)));\n\nexport default async function assistant(\n  { azureApiKey, resource, assistantId, threadId, userPrompt, builtInTools = [], instructions },\n  { logging, execute, nodes }\n) {\n  const tools = nodes?.map(nodeToOpenAiFunction) ?? [];\n\n  const endpoint = `https://${resource}.openai.azure.com`;\n  const credentials = new AzureKeyCredential(azureApiKey);\n  const assistantsClient = new AssistantsClient(endpoint, credentials);\n\n  const messages = [{ role: \"user\", content: userPrompt }];\n\n  if (threadId) {\n    await assistantsClient.createMessage(threadId, \"user\", userPrompt);\n  } else {\n    threadId = (await assistantsClient.createThread({ messages })).id;\n    logging.log(\"New thread created with ID:\", threadId);\n  }\n\n  // Retrieval tool isn't supported in Azure yet\n  // builtInTools.includes(\"retrieval\") && tools.push({ type: \"retrieval\" });\n  builtInTools.includes(\"code_interpreter\") && tools.push({ type: \"code_interpreter\" });\n\n  let runResponse = await assistantsClient.createRun(threadId, {\n    assistantId,\n    instructions,\n    tools,\n  });\n\n  do {\n    await sleep(1000);\n    runResponse = await assistantsClient.getRun(runResponse.threadId, runResponse.id);\n\n    const isToolUse = runResponse.status === \"requires_action\" && runResponse.requiredAction?.type === \"submit_tool_outputs\";\n    if (isToolUse) {\n      const toolOutputs = [];\n      const toolUses = runResponse.requiredAction?.submitToolOutputs?.toolCalls || [];\n      for (const toolUse of toolUses) {\n        let args;\n        try {\n          args = JSON.parse(toolUse.function.arguments);\n          logging.log(args);\n        } catch (err) {\n          logging.log(`Couldn't parse function arguments. Received: ${toolUse.function.arguments}`);\n          throw new Error(`Couldn't parse function arguments. Received: ${toolUse.function.arguments}`)\n        }\n        const node = nodes?.find(node => node.id === toolUse.function.name);\n        if (!node) {\n          throw new Error(`Unknown tool: ${toolUse.function.name}`);\n        }\n        const toolOutput = await execute(node.label, args);\n\n        logging.log(toolOutput);\n        toolOutputs.push({\n          toolCallId: toolUse.id,\n          output: toolOutput ? JSON.stringify(toolOutput) : \"\"\n        });\n        logging.log(\n          `Executed ${node.label} with output:`,\n          toolOutput\n        );\n      }\n      runResponse = await assistantsClient.submitToolOutputsToRun(runResponse.threadId, runResponse.id, toolOutputs);\n    }\n  } while (runResponse.status === \"queued\" || runResponse.status === \"in_progress\")\n\n  const { data } = await assistantsClient.listMessages(runResponse.threadId, { order: \"desc\" });\n\n  const resultMessage = data[0];\n\n  if (resultMessage.content[0].type === \"text\") {\n    return {\n      \"response\": resultMessage.content[0].text.value,\n      \"annotations\": resultMessage.content[0].text.annotations,\n      \"threadId\": runResponse.threadId,\n      \"messages\": data\n    };\n  }\n\n  if (resultMessage.content[0].type === \"image_file\") {\n    return {\n      \"response\": \"\",\n      \"imageFileId\": resultMessage.content[0].imageFile.fileId,\n      \"annotations\": [],\n      \"threadId\": runResponse.threadId,\n      \"messages\": data\n    };\n  }\n}",
      "inputs": {
        "properties": {
          "instructions": {
            "description": "Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.",
            "buildship": { "index": 5 },
            "title": "Instructions",
            "type": "string"
          },
          "threadId": {
            "title": "Thread ID",
            "description": "The ID of the conversation thread to use. If not specified, a new thread will be created.",
            "type": "string",
            "buildship": { "index": 4 }
          },
          "userPrompt": {
            "description": "The prompt to send to the assistant as user message.\n",
            "default": "",
            "buildship": { "index": 6, "sensitive": false },
            "title": "User prompt",
            "pattern": "",
            "type": "string"
          },
          "azureApiKey": {
            "buildship": { "index": 0, "sensitive": false },
            "pattern": "",
            "type": "string",
            "description": "The Azure API key to use for authentication.",
            "title": "Azure API key"
          },
          "resource": {
            "pattern": "",
            "buildship": { "hidden": false, "index": 2, "sensitive": false },
            "description": "The name of your Azure resource.",
            "type": "string",
            "title": "Resource"
          },
          "assistantId": {
            "pattern": "",
            "title": "Assistant ID",
            "buildship": { "sensitive": false, "index": 1 },
            "description": "The ID of the assistant to use. You need to create the assistant in the Azure OpenAI Studio.",
            "type": "string"
          },
          "builtInTools": {
            "buildship": {
              "index": 6,
              "options": [
                { "value": "retrieval", "label": "Document Retrieval" },
                { "label": "Code Interpreter", "value": "code_interpreter" }
              ]
            },
            "enum": ["retrieval", "code_interpreter"],
            "description": "Select the OpenAI assistant built-in tools to use.",
            "title": "Built-in Tools",
            "type": "array"
          }
        },
        "type": "object",
        "required": ["userPrompt", "resource", "assistantId", "azureApiKey"]
      },
      "name": "Azure OpenAI Assistant",
      "subType": "assistant",
      "label": "Azure OpenAI Assistant",
      "type": "script"
    },
    {
      "description": "The Return Node is used to return values from the workflow. It is generally the last node in the workflow. The return node is optional as the API can inherently return a 200 OK response by default. [Full Documentation](https://docs.buildship.com/core-nodes/return).",
      "type": "return",
      "inputs": {
        "type": "object",
        "required": [],
        "properties": {
          "value": {
            "title": "Value",
            "buildship": { "index": 1 },
            "description": "The value to return",
            "type": "string",
            "default": ""
          },
          "status": {
            "enum": ["200", "201", "202", "204", "400", "401", "403", "404", "429", "500"],
            "description": "The HTTP status code to return",
            "buildship": {
              "index": 0,
              "options": [
                { "value": "200", "label": "OK (200)" },
                { "label": "Created (201)", "value": "201" },
                { "value": "202", "label": "Accepted (202)" },
                { "value": "301", "label": "Redirect (301)" },
                { "label": "No Content (204)", "value": "204" },
                { "label": "Bad Request (400)", "value": "400" },
                { "value": "401", "label": "Unauthorized (401)" },
                { "value": "403", "label": "Forbidden (403)" },
                { "label": "Not Found (404)", "value": "404" },
                { "value": "429", "label": "Too Many Requests (429)" },
                { "label": "Internal Server Error (500)", "value": "500" }
              ]
            },
            "type": "string",
            "title": "Status code",
            "default": "200"
          },
          "cacheMaxAge": {
            "default": 0,
            "title": "Cache Time",
            "description": "Set cache duration in seconds",
            "buildship": { "index": 2 },
            "type": "number"
          }
        }
      },
      "response": { "2XX": { "type": "object", "properties": {} } },
      "id": "76468af9-6f21-4892-b4ec-3d5b2b007ee1",
      "label": "Return"
    }
  ],
  "trigger": {
    "id": "http",
    "request": {
      "title": "Request",
      "properties": {
        "query": {
          "description": "Query parameters",
          "buildship": {},
          "type": "object",
          "title": "Query",
          "properties": {}
        },
        "headers": {
          "properties": {},
          "title": "Request Headers",
          "type": "object",
          "description": "Headers of the request",
          "buildship": {}
        },
        "body": {
          "title": "Body",
          "type": "object",
          "buildship": {},
          "description": "Body of the request",
          "properties": {
            "threadId": { "type": "string", "description": "", "title": "Thread Id", "buildship": { "index": 1 } },
            "message": { "description": "", "title": "Message", "type": "string", "buildship": { "index": 0 } }
          }
        }
      },
      "buildship": {},
      "type": "object",
      "required": []
    },
    "groupId": null,
    "dependencies": {},
    "meta": {
      "name": "Rest API Call",
      "description": "Create an API / HTTP endpoint as the trigger or starting point for your workflow. This endpoint can be used in other apps to run the workflow. [Full documentation](https://docs.buildship.com/trigger-nodes/rest-api)",
      "icon": {},
      "id": "http"
    },
    "label": "Rest API Call",
    "live": true,
    "order": 1,
    "output": {
      "properties": {
        "query": {
          "title": "Query parameters",
          "buildship": { "index": 0 },
          "type": "object",
          "description": "Query parameters"
        },
        "body": {
          "buildship": { "index": 1 },
          "type": "object",
          "description": "Body of the request",
          "title": "Body"
        },
        "headers": {
          "description": "Headers of the request",
          "buildship": {},
          "properties": {
            "authorization": {
              "type": "string",
              "title": "Authorization",
              "description": "Authorization header",
              "buildship": { "index": 1 }
            },
            "content-type": {
              "title": "Content-Type",
              "description": "Content-Type of the request",
              "type": "string",
              "buildship": { "index": 0 }
            }
          },
          "title": "Headers",
          "type": "object"
        }
      },
      "type": "object",
      "buildship": {},
      "title": "Request"
    },
    "script": "",
    "type": "http",
    "inputs": {
      "properties": {
        "method": {
          "default": "GET",
          "enum": ["GET", "POST", "PUT", "DELETE"],
          "buildship": {
            "index": 1,
            "sensitive": false,
            "options": [
              { "value": "GET", "label": "GET" },
              { "label": "POST", "value": "POST" },
              { "value": "PUT", "label": "PUT" },
              { "value": "DELETE", "label": "DELETE" }
            ]
          },
          "title": "Method",
          "type": "string",
          "description": "The HTTP method for the incoming request.",
          "pattern": ""
        },
        "path": {
          "default": "/",
          "description": "The path of the API Endpoint. Additionally, define the structure for the incoming API requests. [Learn more about API Specification here](https://docs.buildship.com/basics/api-spec#request-specification).",
          "pattern": "",
          "buildship": { "index": 0, "sensitive": false },
          "type": "string",
          "title": "Path"
        }
      },
      "required": ["method", "path"],
      "type": "object"
    },
    "instruction": { "bodyTemplate": "https://{{runtimeUrl}}/{{httpPath}}", "title": "Endpoint URL" },
    "testingSchema": [
      {
        "prefill": "endpointURL",
        "label": "Endpoint URL",
        "name": "endpointURL",
        "disabled": true,
        "type": "shortText"
      },
      { "type": "apiRequestData", "prefill": "apiRequestData", "name": "apiRequestData" }
    ]
  },
  "nodeValues": {
    "http": { "method": "POST", "path": "/azure-city-advisor" },
    "76468af9-6f21-4892-b4ec-3d5b2b007ee1": {
      "value": {
        "expression": "{\n  \"message\": ctx[\"root\"][\"ae7ae8ef-272e-4ca4-acd1-f20cd8ce5e49\"][\"response\"],\n  \"threadId\": ctx[\"root\"][\"ae7ae8ef-272e-4ca4-acd1-f20cd8ce5e49\"][\"threadId\"]\n}",
        "type": "javascript"
      },
      "cacheMaxAge": 0,
      "status": "200"
    },
    "ae7ae8ef-272e-4ca4-acd1-f20cd8ce5e49": {
      "threadId": { "keys": ["request", "body", "threadId"] },
      "azureApiKey": "",
      "userPrompt": { "keys": ["request", "body", "message"] },
      "assistantId": "",
      "instructions": "You are a city advisor, user will ask you for different city plans and you should respond based on their preferences. You can ask follow-up questions to better understand which are these preferences. You should give a summary of 3 events that someone can attend. Including the event title, link, date time",
      "resource": ""
    }
  },
  "notes": "<p>An assistant that gives you plans for travel in a city. Try it using this test request body:</p><p><br></p><p>{</p><p>\"message\":\"Plans for Sydney for 2 days\"</p><p>}</p><p><br></p><p>Short Video: <a href=\"https://www.youtube.com/watch?v=OiQJQMk_2mo\" rel=\"noopener noreferrer\" target=\"_blank\">youtube.com/watch?v=OiQJQMk_2mo</a></p><p>Documentation: <a href=\"https://docs.buildship.com/ai-models/assistant#use-case-i-chat-with-assistant\" rel=\"noopener noreferrer\" target=\"_blank\">docs.buildship.com/ai-models/assistant</a></p>"
}
