{
  "nodes": [
    {
      "onFail": null,
      "description": "Add different script nodes and let the OpenAI assistant automatically choose which to execute based on the input. once it has completed the request, it will return its response as output message. [Full Documentation](https://docs.buildship.com/core-nodes/openai-assistant).",
      "type": "script",
      "id": "881055e6-b4e5-43ca-b8c8-8333dad88591",
      "output": {
        "description": "",
        "title": "Assistant Response",
        "properties": {
          "annotations": {
            "buildship": { "index": 3 },
            "type": "array",
            "title": "Annotations",
            "description": "The annotations of the message"
          },
          "response": { "type": "string", "description": "", "buildship": { "index": 2 }, "title": "Response" },
          "messages": {
            "title": "Messages",
            "description": "The content of the message in array of text and/or images.",
            "type": "array",
            "buildship": { "index": 0 }
          },
          "threadId": {
            "buildship": { "index": 1 },
            "type": "string",
            "title": "Thread ID",
            "description": "The thread ID that this message belongs to."
          }
        },
        "type": "object",
        "buildship": { "index": 0 }
      },
      "subType": "assistant",
      "nodes": [],
      "label": "Azure OpenAI Assistant",
      "meta": {
        "id": "azure-openai-assistant-node",
        "name": "Azure OpenAI Assistant",
        "description": "Add different script nodes and let the OpenAI assistant automatically choose which to execute based on the input.",
        "icon": { "url": "https://www.svgrepo.com/show/448274/azure.svg", "type": "URL" }
      },
      "inputs": {
        "properties": {
          "threadId": {
            "title": "Thread ID",
            "type": "string",
            "buildship": { "index": 4 },
            "description": "The ID of the conversation thread to use. If not specified, a new thread will be created."
          },
          "azureApiKey": {
            "pattern": "",
            "buildship": { "index": 0, "sensitive": false },
            "title": "Azure API key",
            "description": "The Azure API key to use for authentication.",
            "type": "string"
          },
          "builtInTools": {
            "type": "array",
            "enum": ["retrieval", "code_interpreter"],
            "title": "Built-in Tools",
            "buildship": {
              "options": [
                { "label": "Document Retrieval", "value": "retrieval" },
                { "label": "Code Interpreter", "value": "code_interpreter" }
              ],
              "index": 6
            },
            "description": "Select the OpenAI assistant built-in tools to use."
          },
          "instructions": {
            "type": "string",
            "buildship": { "index": 5 },
            "title": "Instructions",
            "description": "Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis."
          },
          "assistantId": {
            "title": "Assistant ID",
            "pattern": "",
            "buildship": { "index": 1, "sensitive": false },
            "description": "The ID of the assistant to use. You need to create the assistant in the Azure OpenAI Studio.",
            "type": "string"
          },
          "resource": {
            "description": "The name of your Azure resource.",
            "title": "Resource",
            "buildship": { "index": 2, "hidden": false, "sensitive": false },
            "type": "string",
            "pattern": ""
          },
          "userPrompt": {
            "buildship": { "sensitive": false, "index": 6 },
            "default": "",
            "description": "The prompt to send to the assistant as user message.\n",
            "title": "User prompt",
            "pattern": "",
            "type": "string"
          }
        },
        "required": ["userPrompt", "resource", "assistantId", "azureApiKey"],
        "type": "object"
      },
      "script": "import { AssistantsClient } from \"@azure/openai-assistants\";\nimport { AzureKeyCredential } from \"@azure/openai\";\nimport { setTimeout } from \"timers/promises\";\n\nconst nodeToOpenAiFunction = (node) => {\n  return {\n    type: \"function\",\n    function: {\n      name: node.id,\n      description: node.meta.description ?? \"\",\n      parameters: {\n        type: \"object\",\n        properties: Object.entries(node.inputs.properties)\n          .reduce((properties, [name, value]) => {\n            if (value.buildship && !value.buildship.toBeAutoFilled) return properties;\n            return {\n              ...properties, [name]: {\n                type: value.type,\n                enum: value.enum,\n                description: value.description\n              }\n            }\n          }, {}),\n        required: Object.entries(node.inputs.properties).map(([name, value]) => {\n          if (value.buildship && value.buildship.toBeAutoFilled && node.inputs.required.includes(name)) return name;\n          return false;\n        }).filter(Boolean),\n      }\n    }\n  };\n}\n\nconst sleep = (ms) =>\n  new Promise((resolve) => setTimeout(ms).then(() => resolve(true)));\n\nexport default async function assistant(\n  { azureApiKey, resource, assistantId, threadId, userPrompt, builtInTools = [], instructions },\n  { logging, execute, nodes }\n) {\n  const tools = nodes?.map(nodeToOpenAiFunction) ?? [];\n\n  const endpoint = `https://${resource}.openai.azure.com`;\n  const credentials = new AzureKeyCredential(azureApiKey);\n  const assistantsClient = new AssistantsClient(endpoint, credentials);\n\n  const messages = [{ role: \"user\", content: userPrompt }];\n\n  if (threadId) {\n    await assistantsClient.createMessage(threadId, \"user\", userPrompt);\n  } else {\n    threadId = (await assistantsClient.createThread({ messages })).id;\n    logging.log(\"New thread created with ID:\", threadId);\n  }\n\n  // Retrieval tool isn't supported in Azure yet\n  // builtInTools.includes(\"retrieval\") && tools.push({ type: \"retrieval\" });\n  builtInTools.includes(\"code_interpreter\") && tools.push({ type: \"code_interpreter\" });\n\n  let runResponse = await assistantsClient.createRun(threadId, {\n    assistantId,\n    instructions,\n    tools,\n  });\n\n  do {\n    await sleep(1000);\n    runResponse = await assistantsClient.getRun(runResponse.threadId, runResponse.id);\n\n    const isToolUse = runResponse.status === \"requires_action\" && runResponse.requiredAction?.type === \"submit_tool_outputs\";\n    if (isToolUse) {\n      const toolOutputs = [];\n      const toolUses = runResponse.requiredAction?.submitToolOutputs?.toolCalls || [];\n      for (const toolUse of toolUses) {\n        let args;\n        try {\n          args = JSON.parse(toolUse.function.arguments);\n          logging.log(args);\n        } catch (err) {\n          logging.log(`Couldn't parse function arguments. Received: ${toolUse.function.arguments}`);\n          throw new Error(`Couldn't parse function arguments. Received: ${toolUse.function.arguments}`)\n        }\n        const node = nodes?.find(node => node.id === toolUse.function.name);\n        if (!node) {\n          throw new Error(`Unknown tool: ${toolUse.function.name}`);\n        }\n        const toolOutput = await execute(node.label, args);\n\n        logging.log(toolOutput);\n        toolOutputs.push({\n          toolCallId: toolUse.id,\n          output: toolOutput ? JSON.stringify(toolOutput) : \"\"\n        });\n        logging.log(\n          `Executed ${node.label} with output:`,\n          toolOutput\n        );\n      }\n      runResponse = await assistantsClient.submitToolOutputsToRun(runResponse.threadId, runResponse.id, toolOutputs);\n    }\n  } while (runResponse.status === \"queued\" || runResponse.status === \"in_progress\")\n\n  const { data } = await assistantsClient.listMessages(runResponse.threadId, { order: \"desc\" });\n\n  const resultMessage = data[0];\n\n  if (resultMessage.content[0].type === \"text\") {\n    return {\n      \"response\": resultMessage.content[0].text.value,\n      \"annotations\": resultMessage.content[0].text.annotations,\n      \"threadId\": runResponse.threadId,\n      \"messages\": data\n    };\n  }\n\n  if (resultMessage.content[0].type === \"image_file\") {\n    return {\n      \"response\": \"\",\n      \"imageFileId\": resultMessage.content[0].imageFile.fileId,\n      \"annotations\": [],\n      \"threadId\": runResponse.threadId,\n      \"messages\": data\n    };\n  }\n}",
      "name": "Azure OpenAI Assistant"
    },
    {
      "inputs": {
        "required": [],
        "type": "object",
        "properties": {
          "status": {
            "enum": ["200", "201", "202", "204", "400", "401", "403", "404", "429", "500"],
            "description": "The HTTP status code to return",
            "title": "Status code",
            "buildship": {
              "options": [
                { "value": "200", "label": "OK (200)" },
                { "value": "201", "label": "Created (201)" },
                { "value": "202", "label": "Accepted (202)" },
                { "label": "Redirect (301)", "value": "301" },
                { "value": "204", "label": "No Content (204)" },
                { "value": "400", "label": "Bad Request (400)" },
                { "value": "401", "label": "Unauthorized (401)" },
                { "label": "Forbidden (403)", "value": "403" },
                { "value": "404", "label": "Not Found (404)" },
                { "label": "Too Many Requests (429)", "value": "429" },
                { "label": "Internal Server Error (500)", "value": "500" }
              ],
              "index": 0
            },
            "default": "200",
            "type": "string"
          },
          "value": {
            "buildship": { "index": 1 },
            "title": "Value",
            "default": "",
            "type": "string",
            "description": "The value to return"
          },
          "cacheMaxAge": {
            "default": 0,
            "type": "number",
            "title": "Cache Time",
            "buildship": { "index": 2 },
            "description": "Set cache duration in seconds"
          }
        }
      },
      "description": "The Return Node is used to return values from the workflow. It is generally the last node in the workflow. The return node is optional as the API can inherently return a 200 OK response by default. [Full Documentation](https://docs.buildship.com/core-nodes/return).",
      "id": "28d9611c-f656-415a-92e6-c7ce50c20eb6",
      "type": "return",
      "label": "Return",
      "response": { "2XX": { "properties": {}, "type": "object" } }
    }
  ],
  "trigger": {
    "dependencies": {},
    "groupId": null,
    "live": true,
    "order": 1,
    "inputs": {
      "type": "object",
      "required": ["method", "path"],
      "properties": {
        "path": {
          "pattern": "",
          "default": "/",
          "description": "The path of the API Endpoint. Additionally, define the structure for the incoming API requests. [Learn more about API Specification here](https://docs.buildship.com/basics/api-spec#request-specification).",
          "buildship": { "index": 0, "sensitive": false },
          "type": "string",
          "title": "Path"
        },
        "method": {
          "description": "The HTTP method for the incoming request.",
          "enum": ["GET", "POST", "PUT", "DELETE"],
          "title": "Method",
          "default": "GET",
          "type": "string",
          "pattern": "",
          "buildship": {
            "index": 1,
            "options": [
              { "value": "GET", "label": "GET" },
              { "value": "POST", "label": "POST" },
              { "label": "PUT", "value": "PUT" },
              { "value": "DELETE", "label": "DELETE" }
            ],
            "sensitive": false
          }
        }
      }
    },
    "instruction": { "bodyTemplate": "https://{{runtimeUrl}}/{{httpPath}}", "title": "Endpoint URL" },
    "type": "http",
    "output": {
      "properties": {
        "headers": {
          "title": "Headers",
          "description": "Headers of the request",
          "type": "object",
          "buildship": {},
          "properties": {
            "content-type": {
              "title": "Content-Type",
              "buildship": { "index": 0 },
              "description": "Content-Type of the request",
              "type": "string"
            },
            "authorization": {
              "buildship": { "index": 1 },
              "title": "Authorization",
              "type": "string",
              "description": "Authorization header"
            }
          }
        },
        "query": {
          "type": "object",
          "title": "Query parameters",
          "description": "Query parameters",
          "buildship": { "index": 0 }
        },
        "body": { "buildship": { "index": 1 }, "type": "object", "title": "Body", "description": "Body of the request" }
      },
      "buildship": {},
      "title": "Request",
      "type": "object"
    },
    "label": "Rest API Call",
    "request": {
      "required": [],
      "type": "object",
      "buildship": {},
      "title": "Request",
      "properties": {
        "headers": {
          "description": "Headers of the request",
          "title": "Request Headers",
          "type": "object",
          "buildship": {},
          "properties": {}
        },
        "query": {
          "type": "object",
          "title": "Query",
          "description": "Query parameters",
          "properties": {},
          "buildship": {}
        },
        "body": {
          "buildship": {},
          "type": "object",
          "properties": {
            "threadId": { "type": "string", "description": "", "title": "Thread Id", "buildship": { "index": 1 } },
            "message": { "type": "string", "title": "Message", "buildship": { "index": 0 }, "description": "" }
          },
          "description": "Body of the request",
          "title": "Body"
        }
      }
    },
    "script": "",
    "meta": {
      "name": "Rest API Call",
      "description": "Create an API / HTTP endpoint as the trigger or starting point for your workflow. This endpoint can be used in other apps to run the workflow. [Full documentation](https://docs.buildship.com/trigger-nodes/rest-api)",
      "icon": {},
      "id": "http"
    },
    "testingSchema": [
      {
        "label": "Endpoint URL",
        "prefill": "endpointURL",
        "disabled": true,
        "type": "shortText",
        "name": "endpointURL"
      },
      { "type": "apiRequestData", "prefill": "apiRequestData", "name": "apiRequestData" }
    ],
    "id": "http"
  },
  "nodeValues": {
    "28d9611c-f656-415a-92e6-c7ce50c20eb6": {
      "value": {
        "expression": "{\n  \"message\": ctx[\"root\"][\"881055e6-b4e5-43ca-b8c8-8333dad88591\"][\"response\"],\n  \"threadId\": ctx[\"root\"][\"881055e6-b4e5-43ca-b8c8-8333dad88591\"][\"threadId\"]\n}",
        "type": "javascript"
      },
      "status": "200",
      "cacheMaxAge": 0
    },
    "3d1a7540-9490-42ee-bec3-ae3ecb6c9072": {
      "status": "200",
      "value": {
        "type": "javascript",
        "expression": "{\n  \"message\": ctx[\"root\"][\"881055e6-b4e5-43ca-b8c8-8333dad88591\"][\"response\"],\n  \"threadId\": ctx[\"root\"][\"881055e6-b4e5-43ca-b8c8-8333dad88591\"][\"threadId\"]\n}"
      },
      "cacheMaxAge": 0
    },
    "60accd2b-d248-4e70-bfe2-1483d0484615": {
      "threadId": { "keys": ["request", "body", "threadId"] },
      "instructions": "",
      "assistantId": "",
      "userPrompt": { "keys": ["request", "body", "message"] },
      "azureApiKey": "",
      "resource": ""
    },
    "http": { "path": "/azure-chat", "method": "POST" },
    "881055e6-b4e5-43ca-b8c8-8333dad88591": {
      "resource": "",
      "userPrompt": { "keys": ["request", "body", "message"] },
      "threadId": { "keys": ["request", "body", "threadId"] },
      "assistantId": "",
      "azureApiKey": "",
      "instructions": "You are a personal history tutor. You will answer questions in a concise way. If no question is given, you should provide a historical fact. You must also engage with users by creating little quizzes with 4 possible options to answer in each question"
    }
  },
  "notes": "<p>AI Assistant with conversational memory that you can chat with.</p><p><br></p><p>In this example of a tutor AI Assistant, it helps you with short plan of study for any given topic.</p><p><br></p><p>Try it using this TEST using the foll requgest body:</p><p><br></p><p>{</p><p>\"message\":\"Teach me about northern lights\"</p><p>}</p><p><br></p><p>Short Video: <a href=\"https://www.youtube.com/watch?v=YKAUY9hXzbI\" rel=\"noopener noreferrer\" target=\"_blank\">youtube.com/watch?v=YKAUY9hXzbI</a></p><p>Documentation: <a href=\"https://docs.buildship.com/ai-models/assistant#use-case-i-chat-with-assistant\" rel=\"noopener noreferrer\" target=\"_blank\">docs.buildship.com/ai-models/assistant</a></p>"
}
