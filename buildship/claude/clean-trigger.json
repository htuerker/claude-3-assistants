{
  "nodes": [
    {
      "script": "import axios from \"axios\";\n\nconst nodeToClaudeTool: (node: Node) => ClaudeTool = (node) => {\n  return {\n    // Use node.id as the name of the tool. Spaces are not allowed.\n    name: node.id,\n    description: node.meta.description ?? \"\",\n    input_schema: {\n      type: \"object\",\n      properties: Object.entries(node.inputs.properties)\n        .reduce((properties, [name, value]) => {\n          if (value.buildship && !value.buildship.toBeAutoFilled) return properties;\n          return {\n            ...properties, [name]: {\n              type: value.type,\n              enum: value.enum,\n              description: value.description\n            }\n          }\n        }, {}),\n      required: Object.entries(node.inputs.properties).map(([name, value]) => {\n        if (value.buildship && value.buildship.toBeAutoFilled && node.inputs.required.includes(name)) return name;\n        return false;\n      }).filter(Boolean) as string[],\n    },\n  };\n}\n\ntype Params = {\n  claudeApiKey: string;\n  model: string;\n  maxTokens: number;\n  userPrompt: string;\n  systemPrompt?: string;\n  chatHistory?: ClaudeMessage[];\n};\n\nexport default async function assistant(\n  { claudeApiKey, model, maxTokens, userPrompt, systemPrompt, chatHistory }: Params,\n  { logging, execute, nodes }: any\n) {\n  const version = \"2023-06-01\";\n  const beta = \"tools-2024-04-04\";\n\n  const client = axios.create({\n    baseURL: \"https://api.anthropic.com/v1\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'x-api-key': claudeApiKey,\n      'anthropic-version': version,\n      'anthropic-beta': beta\n    }\n  });\n\n  const tools: ClaudeTool[] = nodes?.map(nodeToClaudeTool) ?? [];\n\n  const initialMessages = [\n    ...(chatHistory ?? []),\n    {\n      \"role\": \"user\",\n      \"content\": userPrompt,\n    }];\n\n  const baseRequest = {\n    \"model\": model,\n    \"max_tokens\": maxTokens,\n    \"system\": systemPrompt || \"\",\n    \"tools\": tools,\n    \"messages\": initialMessages\n  } as ClaudeRequest;\n\n  try {\n    let request = { ...baseRequest };\n    let requestCount = 1;\n    logging.log(`Claude request(${requestCount}):`, baseRequest);\n    let response = await client.post(\"/messages\", request);\n    logging.log(`Claude response(${requestCount}): `, response.data);\n\n    do {\n      if (response.data.type === \"error\") {\n        throw response.data.error;\n      }\n\n      let result = response.data;\n\n      const isEndTurn = result.stop_reason === \"end_turn\";\n      if (isEndTurn) break;\n\n      const content = result.content;\n      request.messages.push({ role: \"assistant\", content });\n\n      const isToolUse = result.stop_reason === \"tool_use\" && content instanceof Array;\n      if (isToolUse) {\n        const toolUseMessageContent = [] as ClaudeToolResultContent[];\n\n        const toolUses: ClaudeToolUseContent[] = content.filter(content => content.type === \"tool_use\");\n        for (const toolUse of toolUses) {\n          const tool = tools.find(tool => tool.name === toolUse.name);\n          const node = nodes?.find((node: Node) => node.id === toolUse.name);\n          if (!tool || !node) {\n            logging.log(\"Failed to find tool:\");\n            logging.log(toolUse);\n            logging.log(node);\n            throw new Error(\"Failed to find tool\");\n          }\n          logging.log(\"Tool node: \", node.name);\n          // filter hallucinated inputs\n          const inputs = {} as Record<string, string>;\n          for (const [inputKey, inputValue] of Object.entries(toolUse.input)) {\n            if (node.inputs.properties[inputKey]) {\n              inputs[inputKey] = inputValue;\n            }\n          }\n          const toolResponse = await execute(node.label, inputs);\n          logging.log(\"Tool response: \", toolResponse);\n          toolUseMessageContent.push({\n            type: \"tool_result\",\n            tool_use_id: toolUse.id,\n            content: toolResponse ? JSON.stringify(toolResponse) : \"\",\n          });\n        }\n        request.messages.push({\n          role: \"user\",\n          content: toolUseMessageContent\n        });\n      }\n      requestCount++;\n      logging.log(`Claude request(${requestCount}):`, request);\n      response = await client.post(\"/messages\", request);\n      logging.log(`Claude response(${requestCount}): `, response.data);\n    } while (response && response.data && response.data.stop_reason !== \"end_turn\");\n\n    return {\n      response: response.data.content[0].text,\n      chatHistory: [...request.messages, { role: \"assistant\", content: response.data.content }],\n      data: response.data,\n      error: null,\n    }\n  } catch (error) {\n    logging.log(`Error: ${error}`);\n    return { error }\n  }\n}\n\ntype Node = {\n  label: string;\n  meta: {\n    id: string;\n    description: string;\n    name: string;\n    [key: string]: any;\n  };\n  inputs: {\n    type: string;\n    required: string[];\n    properties: Record<string, {\n      description: string;\n      buildship?: {\n        toBeAutoFilled?: boolean;\n        [key: string]: any;\n      }\n      [key: string]: any;\n    }>;\n  };\n  [key: string]: any;\n};\n\ntype ClaudeTool = {\n  name: string;\n  description: string;\n  input_schema: {\n    type: string;\n    properties: Record<string, {\n      type: string;\n      description: string;\n      enum?: string[];\n    }>;\n    required: string[];\n  };\n};\n\ntype ClaudeTextContent = {\n  type: \"text\";\n  text: string;\n};\n\ntype ClaudeToolUseContent = {\n  type: \"tool_use\",\n  id: string,\n  name: string,\n  input: Record<string, string>\n};\n\ntype ClaudeToolResultContent = {\n  type: \"tool_result\",\n  tool_use_id: string,\n  content: string\n};\n\ntype ClaudeMessage = {\n  role: \"user\" | \"assistant\",\n  content: ClaudeResponse[\"content\"]\n};\n\ntype ClaudeRequest = {\n  \"model\": string,\n  \"max_tokens\": number,\n  \"tools\": ClaudeTool[],\n  \"messages\": ClaudeMessage[]\n};\n\ntype ClaudeResponse = {\n  \"id\": string,\n  \"type\": \"message\",\n  \"role\": \"assistant\",\n  \"model\": string,\n  \"stop_sequence\": null,\n  \"usage\": { \"input_tokens\": number, \"output_tokens\": number },\n  \"content\": string | ClaudeTextContent[] | ClaudeToolUseContent[] | ClaudeToolResultContent[];\n  \"stop_reason\": \"tool_use\" | \"stop_sequence\" | \"end_turn\"\n};\n",
      "meta": {
        "name": "Claude Assistant",
        "icon": {
          "type": "URL",
          "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fanthropic.png?alt=media&token=ec0eb8dc-f0d4-4f97-a144-023f1aa8118e"
        },
        "id": "claude-assistant-node",
        "description": ""
      },
      "id": "062e04f3-0751-4839-9598-3bd61a18f415",
      "dependencies": { "axios": "0.28.1" },
      "output": {
        "buildship": { "index": 0 },
        "title": "",
        "description": "",
        "properties": {
          "error": { "buildship": { "index": 2 }, "title": "Error", "description": "" },
          "chatHistory": { "buildship": { "index": 1 }, "type": "array", "title": "Chat History", "description": "" },
          "data": {
            "description": "",
            "title": "Data",
            "buildship": { "index": 3 },
            "properties": {},
            "type": "object"
          },
          "response": { "description": "", "title": "Response", "type": "string", "buildship": { "index": 0 } }
        },
        "type": "object"
      },
      "integrations": [],
      "subType": "assistant",
      "label": "Claude Assistant",
      "name": "Claude Assistant",
      "onFail": null,
      "nodes": [],
      "inputs": {
        "required": ["maxTokens", "userPrompt", "claudeApiKey", "model", "systemPrompt"],
        "properties": {
          "model": {
            "enum": ["claude-3-opus-20240229", "claude-3-sonnet-20240229", "claude-3-haiku-20240307"],
            "description": "",
            "buildship": {
              "index": 4,
              "options": [
                { "label": "Claude 3 Opus", "value": "claude-3-opus-20240229" },
                { "label": "Claude 3 Sonnet", "value": "claude-3-sonnet-20240229" },
                { "value": "claude-3-haiku-20240307", "label": "Claude 3 Haiku" }
              ],
              "sensitive": false
            },
            "default": "claude-3-opus-20240229",
            "pattern": "",
            "title": "Model",
            "type": "string"
          },
          "claudeApiKey": {
            "title": "API Key",
            "pattern": "",
            "description": "The OpenAI API key to use for authentication.",
            "buildship": { "sensitive": true, "index": 0 },
            "type": "string"
          },
          "systemPrompt": {
            "pattern": "",
            "description": "",
            "type": "string",
            "title": "Instructions",
            "default": "",
            "buildship": { "sensitive": false, "index": 1 }
          },
          "maxTokens": {
            "pattern": "",
            "buildship": { "index": 4, "sensitive": false },
            "type": "number",
            "title": "Max Tokens",
            "default": "",
            "description": ""
          },
          "userPrompt": {
            "default": "",
            "title": "User Prompt",
            "type": "string",
            "buildship": { "sensitive": false, "index": 2 },
            "pattern": "",
            "description": ""
          },
          "threadId": {
            "pattern": "",
            "title": "Thread Id",
            "default": "",
            "description": "",
            "type": "string",
            "buildship": { "sensitive": false, "index": 5 }
          }
        },
        "type": "object"
      },
      "type": "script"
    },
    {
      "type": "return",
      "response": { "2XX": { "properties": {}, "type": "object" } },
      "id": "b0f5b70e-1dec-46c6-811d-8d56325883b6",
      "label": "Return",
      "inputs": {
        "required": [],
        "properties": {
          "cacheMaxAge": {
            "buildship": { "index": 2 },
            "default": 0,
            "title": "Cache Time",
            "description": "Set cache duration in seconds",
            "type": "number"
          },
          "value": {
            "default": "",
            "description": "The value to return",
            "title": "Value",
            "buildship": { "index": 1 },
            "type": "string"
          },
          "status": {
            "description": "The HTTP status code to return",
            "title": "Status code",
            "default": "200",
            "buildship": {
              "options": [
                { "label": "OK (200)", "value": "200" },
                { "label": "Created (201)", "value": "201" },
                { "label": "Accepted (202)", "value": "202" },
                { "label": "Redirect (301)", "value": "301" },
                { "label": "No Content (204)", "value": "204" },
                { "label": "Bad Request (400)", "value": "400" },
                { "label": "Unauthorized (401)", "value": "401" },
                { "label": "Forbidden (403)", "value": "403" },
                { "value": "404", "label": "Not Found (404)" },
                { "label": "Too Many Requests (429)", "value": "429" },
                { "label": "Internal Server Error (500)", "value": "500" }
              ],
              "index": 0
            },
            "type": "string",
            "enum": ["200", "201", "202", "204", "400", "401", "403", "404", "429", "500"]
          }
        },
        "type": "object"
      },
      "description": "The Return Node is used to return values from the workflow. It is generally the last node in the workflow. The return node is optional as the API can inherently return a 200 OK response by default. [Full Documentation](https://docs.buildship.com/core-nodes/return)."
    }
  ],
  "trigger": {
    "label": "Rest API Call",
    "dependencies": {},
    "output": {
      "buildship": {},
      "type": "object",
      "properties": {
        "headers": {
          "buildship": {},
          "type": "object",
          "description": "Headers of the request",
          "title": "Headers",
          "properties": {
            "content-type": {
              "buildship": { "index": 0 },
              "description": "Content-Type of the request",
              "title": "Content-Type",
              "type": "string"
            },
            "authorization": {
              "description": "Authorization header",
              "type": "string",
              "title": "Authorization",
              "buildship": { "index": 1 }
            }
          }
        },
        "body": {
          "buildship": { "index": 1 },
          "title": "Body",
          "type": "object",
          "description": "Body of the request"
        },
        "query": {
          "type": "object",
          "title": "Query parameters",
          "buildship": { "index": 0 },
          "description": "Query parameters"
        }
      },
      "title": "Request"
    },
    "order": 1,
    "script": "",
    "testingSchema": [
      {
        "disabled": true,
        "label": "Endpoint URL",
        "prefill": "endpointURL",
        "name": "endpointURL",
        "type": "shortText"
      },
      { "type": "apiRequestData", "prefill": "apiRequestData", "name": "apiRequestData" }
    ],
    "request": {
      "buildship": {},
      "title": "Request",
      "properties": {
        "query": {
          "properties": {},
          "buildship": {},
          "description": "Query parameters",
          "title": "Query",
          "type": "object"
        },
        "body": {
          "description": "Body of the request",
          "properties": {
            "threadId": { "title": "Thread Id", "type": "string", "description": "", "buildship": { "index": 0 } },
            "message": { "buildship": { "index": 0 }, "title": "Message", "type": "string", "description": "" }
          },
          "buildship": {},
          "type": "object",
          "title": "Body"
        },
        "headers": {
          "description": "Headers of the request",
          "type": "object",
          "properties": {},
          "title": "Request Headers",
          "buildship": {}
        }
      },
      "type": "object",
      "required": []
    },
    "meta": {
      "name": "Rest API Call",
      "description": "Create an API / HTTP endpoint as the trigger or starting point for your workflow. This endpoint can be used in other apps to run the workflow. [Full documentation](https://docs.buildship.com/trigger-nodes/rest-api)",
      "id": "http",
      "icon": {}
    },
    "type": "http",
    "inputs": {
      "type": "object",
      "properties": {
        "path": {
          "buildship": { "index": 0, "sensitive": false },
          "default": "/",
          "type": "string",
          "title": "Path",
          "description": "The path of the API Endpoint. Additionally, define the structure for the incoming API requests. [Learn more about API Specification here](https://docs.buildship.com/basics/api-spec#request-specification).",
          "pattern": ""
        },
        "method": {
          "pattern": "",
          "title": "Method",
          "default": "GET",
          "type": "string",
          "buildship": {
            "options": [
              { "label": "GET", "value": "GET" },
              { "label": "POST", "value": "POST" },
              { "value": "PUT", "label": "PUT" },
              { "label": "DELETE", "value": "DELETE" }
            ],
            "sensitive": false,
            "index": 1
          },
          "enum": ["GET", "POST", "PUT", "DELETE"],
          "description": "The HTTP method for the incoming request."
        }
      },
      "required": ["method", "path"]
    },
    "id": "http",
    "live": true,
    "groupId": null,
    "instruction": { "bodyTemplate": "https://{{runtimeUrl}}/{{httpPath}}", "title": "Endpoint URL" }
  },
  "nodeValues": {
    "062e04f3-0751-4839-9598-3bd61a18f415": {
      "maxTokens": 1024,
      "userPrompt": { "keys": ["request", "body", "message"] },
      "systemPrompt": "",
      "claudeApiKey": "",
      "threadId": { "keys": ["request", "body", "threadId"] },
      "model": "claude-3-haiku-20240307"
    },
    "b0f5b70e-1dec-46c6-811d-8d56325883b6": {
      "cacheMaxAge": 0,
      "status": "200",
      "value": {
        "type": "javascript",
        "expression": "{\n  \"message\": ctx[\"root\"][\"062e04f3-0751-4839-9598-3bd61a18f415\"][\"response\"],\n  \"threadId\": \"\"\n}"
      }
    },
    "http": { "path": "/claude-asssistant", "method": "POST" }
  },
  "notes": "<p># Request</p><p>A simple request-response:</p><p>{</p><p><span style=\"color: rgb(29, 117, 179); background-color: rgb(240, 240, 240);\">\"message\"</span><span style=\"color: rgb(51, 51, 51); background-color: rgb(240, 240, 240);\">: </span><span style=\"color: rgb(179, 94, 20); background-color: rgb(240, 240, 240);\">\"Hello, Claude\"</span></p><p>}</p>"
}
