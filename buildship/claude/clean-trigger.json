{
  "nodes": [
    {
      "name": "Claude Assistant",
      "id": "d14831d3-b365-4519-9eb7-790deb07cf9c",
      "onFail": null,
      "inputs": {
        "required": ["maxTokens", "userPrompt", "claudeApiKey", "instructions", "model"],
        "type": "object",
        "properties": {
          "claudeApiKey": {
            "type": "string",
            "pattern": "",
            "buildship": { "sensitive": true, "index": 0 },
            "description": "The OpenAI API key to use for authentication.",
            "title": "API Key"
          },
          "model": {
            "pattern": "",
            "buildship": {
              "sensitive": false,
              "index": 4,
              "options": [
                { "value": "claude-3-opus-20240229", "label": "Claude 3 Opus" },
                { "value": "claude-3-sonnet-20240229", "label": "Claude 3 Sonnet" },
                { "value": "claude-3-haiku-20240307", "label": "Claude 3 Haiku" }
              ]
            },
            "default": "claude-3-opus-20240229",
            "description": "",
            "type": "string",
            "enum": ["claude-3-opus-20240229", "claude-3-sonnet-20240229", "claude-3-haiku-20240307"],
            "title": "Model"
          },
          "userPrompt": {
            "title": "User Prompt",
            "type": "string",
            "pattern": "",
            "buildship": { "index": 2, "sensitive": false },
            "default": "",
            "description": ""
          },
          "maxTokens": {
            "default": "",
            "title": "Max Tokens",
            "buildship": { "sensitive": false, "index": 4 },
            "pattern": "",
            "type": "number",
            "description": ""
          },
          "chatHistory": {
            "description": "",
            "title": "Chat History",
            "type": "array",
            "pattern": "",
            "default": [],
            "buildship": { "sensitive": false, "index": 5 }
          },
          "instructions": {
            "description": "",
            "type": "string",
            "pattern": "",
            "buildship": { "sensitive": false, "index": 1 },
            "title": "Instructions",
            "default": ""
          }
        }
      },
      "type": "script",
      "subType": "assistant",
      "dependencies": { "axios": "0.28.1" },
      "nodes": [],
      "script": "import axios from \"axios\";\n\nconst nodeToClaudeTool = (node) => {\n  return {\n    // Use node.id as the name of the tool. Spaces are not allowed.\n    name: node.id,\n    description: node.meta.description ?? \"\",\n    input_schema: {\n      type: \"object\",\n      properties: Object.entries(node.inputs.properties)\n        .reduce((properties, [name, value]) => {\n          if (value.buildship && !value.buildship.toBeAutoFilled) return properties;\n          return {\n            ...properties, [name]: {\n              type: value.type,\n              enum: value.enum,\n              description: value.description\n            }\n          }\n        }, {}),\n      required: Object.entries(node.inputs.properties).map(([name, value]) => {\n          if (value.buildship && value.buildship.toBeAutoFilled && node.inputs.required.includes(name)) return name;\n          return false;\n        }).filter(Boolean)\n    },\n  };\n}\n\nexport default async function assistant(\n  { claudeApiKey, model, maxTokens, userPrompt, instructions, chatHistory },\n  { logging, execute, nodes }\n) {\n  // TODO\n  const version = \"2023-06-01\";\n  const beta = \"tools-2024-04-04\";\n\n  const client = axios.create({\n    baseURL: \"https://api.anthropic.com/v1\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'x-api-key': claudeApiKey,\n      'anthropic-version': version,\n      'anthropic-beta': beta\n    }\n  });\n\n  const tools = nodes?.map(nodeToClaudeTool) ?? [];\n\n  const initialMessages = [\n    ...(chatHistory ?? []),\n    {\n      \"role\": \"user\",\n      \"content\": userPrompt,\n    }];\n\n  const baseRequest = {\n    \"model\": model,\n    \"max_tokens\": maxTokens,\n    \"system\": instructions || \"\",\n    \"tools\": tools,\n    \"messages\": initialMessages\n  };\n\n  try {\n    let request = { ...baseRequest };\n    let requestCount = 1;\n    logging.log(`Claude request(${requestCount}):`, baseRequest);\n    let response = await client.post(\"/messages\", request);\n    logging.log(`Claude response(${requestCount}): `, response.data);\n\n    do {\n      if (response.status !== 200) {\n        throw response.error;\n      }\n      if (response.data.type === \"error\") {\n          throw response.data.error;\n      }\n\n      let result = response.data;\n\n      const isEndTurn = result.stop_reason === \"end_turn\";\n      if(isEndTurn) break;\n      \n      const content = result.content;\n      request.messages.push({ role: \"assistant\", content });\n      \n      const isToolUse = result.stop_reason === \"tool_use\" && content instanceof Array;\n      if (isToolUse) {\n        const toolUseMessage = {\n          role: \"user\",\n          content: []\n        };\n        const toolUses = content.filter(content => content.type === \"tool_use\");\n        for (const toolUse of toolUses) {\n          const tool = tools.find(tool => tool.name === toolUse.name);\n          const node = nodes?.find(node => node.id === toolUse.name);\n          if (!tool || !node) {\n            logging.log(\"Failed to find tool:\");\n            logging.log(toolUse);\n            logging.log(node);\n            throw new Error(\"Failed to find tool\");\n          }\n          logging.log(\"Tool node: \", node.name);\n          const toolResponse = await execute(node.label, toolUse.input);\n          logging.log(\"Tool response: \", toolResponse);\n          toolUseMessage.content.push({\n            type: \"tool_result\",\n            tool_use_id: toolUse.id,\n            content: toolResponse ? JSON.stringify(toolResponse) : \"\",\n          });\n        }\n        request.messages.push(toolUseMessage);\n      }\n\n      requestCount++;\n      logging.log(`Claude request(${requestCount}):`, request);\n      response = await client.post(\"/messages\", request);\n      logging.log(`Claude response(${requestCount}): `, response.data);\n    } while (response && response.data && response.data.stop_reason !== \"end_turn\");\n\n    return {\n      response: response.data.content[0].text,\n      chatHistory: [...request.messages, { role: \"assistant\", content: response.data.content }],\n      data: response.data,\n      error: null,\n    }\n  } catch (error) {\n    logging.log(\"Error\");\n    logging.log(error.config);\n    logging.log(error.message);\n    return { error: error.message }\n  }\n}",
      "output": {
        "type": "object",
        "buildship": { "index": 0 },
        "title": "",
        "description": "",
        "properties": {
          "chatHistory": { "description": "", "buildship": { "index": 1 }, "type": "array", "title": "Chat History" },
          "data": {
            "title": "Data",
            "type": "object",
            "properties": {},
            "buildship": { "index": 3 },
            "description": ""
          },
          "error": { "description": "", "buildship": { "index": 2 }, "title": "Error" },
          "response": { "buildship": { "index": 0 }, "description": "", "type": "string", "title": "Response" }
        }
      },
      "meta": {
        "description": "",
        "icon": {
          "type": "URL",
          "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fanthropic.png?alt=media&token=ec0eb8dc-f0d4-4f97-a144-023f1aa8118e"
        },
        "name": "Claude Assistant",
        "id": "claude-assistant-node"
      },
      "integrations": [],
      "label": "Claude Assistant"
    },
    {
      "label": "Return",
      "inputs": {
        "properties": {
          "status": {
            "enum": ["200", "201", "202", "204", "400", "401", "403", "404", "429", "500"],
            "buildship": {
              "options": [
                { "value": "200", "label": "OK (200)" },
                { "label": "Created (201)", "value": "201" },
                { "label": "Accepted (202)", "value": "202" },
                { "value": "301", "label": "Redirect (301)" },
                { "value": "204", "label": "No Content (204)" },
                { "value": "400", "label": "Bad Request (400)" },
                { "label": "Unauthorized (401)", "value": "401" },
                { "value": "403", "label": "Forbidden (403)" },
                { "label": "Not Found (404)", "value": "404" },
                { "value": "429", "label": "Too Many Requests (429)" },
                { "label": "Internal Server Error (500)", "value": "500" }
              ],
              "index": 0
            },
            "description": "The HTTP status code to return",
            "type": "string",
            "title": "Status code",
            "default": "200"
          },
          "cacheMaxAge": {
            "buildship": { "index": 2 },
            "default": 0,
            "type": "number",
            "title": "Cache Time",
            "description": "Set cache duration in seconds"
          },
          "value": {
            "type": "string",
            "buildship": { "index": 1 },
            "description": "The value to return",
            "title": "Value",
            "default": ""
          }
        },
        "type": "object",
        "required": []
      },
      "response": { "2XX": { "properties": {}, "type": "object" } },
      "type": "return",
      "id": "1c5cc546-ff6b-478e-b753-de43bf7b145e",
      "description": "The Return Node is used to return values from the workflow. It is generally the last node in the workflow. The return node is optional as the API can inherently return a 200 OK response by default. [Full Documentation](https://docs.buildship.com/core-nodes/return)."
    }
  ],
  "trigger": {
    "request": {
      "type": "object",
      "properties": {
        "headers": {
          "type": "object",
          "title": "Request Headers",
          "description": "Headers of the request",
          "properties": {},
          "buildship": {}
        },
        "query": {
          "description": "Query parameters",
          "properties": {},
          "buildship": {},
          "type": "object",
          "title": "Query"
        },
        "body": {
          "title": "Body",
          "properties": {
            "chatHistory": { "buildship": { "index": 1 }, "description": "", "type": "array", "title": "Chat History" },
            "message": { "buildship": { "index": 0 }, "description": "", "type": "string", "title": "Message" }
          },
          "description": "Body of the request",
          "type": "object",
          "buildship": {}
        }
      },
      "title": "Request",
      "required": [],
      "buildship": {}
    },
    "script": "",
    "instruction": { "title": "Endpoint URL", "bodyTemplate": "https://{{runtimeUrl}}/{{httpPath}}" },
    "inputs": {
      "type": "object",
      "properties": {
        "path": {
          "title": "Path",
          "buildship": { "index": 0, "sensitive": false },
          "type": "string",
          "default": "/",
          "description": "The path of the API Endpoint. Additionally, define the structure for the incoming API requests. [Learn more about API Specification here](https://docs.buildship.com/basics/api-spec#request-specification).",
          "pattern": ""
        },
        "method": {
          "type": "string",
          "title": "Method",
          "default": "GET",
          "buildship": {
            "index": 1,
            "options": [
              { "value": "GET", "label": "GET" },
              { "value": "POST", "label": "POST" },
              { "value": "PUT", "label": "PUT" },
              { "label": "DELETE", "value": "DELETE" }
            ],
            "sensitive": false
          },
          "enum": ["GET", "POST", "PUT", "DELETE"],
          "pattern": "",
          "description": "The HTTP method for the incoming request."
        }
      },
      "required": ["method", "path"]
    },
    "order": 1,
    "dependencies": {},
    "live": true,
    "type": "http",
    "testingSchema": [
      {
        "name": "endpointURL",
        "type": "shortText",
        "prefill": "endpointURL",
        "disabled": true,
        "label": "Endpoint URL"
      },
      { "type": "apiRequestData", "prefill": "apiRequestData", "name": "apiRequestData" }
    ],
    "output": {
      "type": "object",
      "title": "Request",
      "properties": {
        "body": {
          "title": "Body",
          "type": "object",
          "buildship": { "index": 1 },
          "description": "Body of the request"
        },
        "headers": {
          "type": "object",
          "title": "Headers",
          "properties": {
            "content-type": {
              "type": "string",
              "description": "Content-Type of the request",
              "buildship": { "index": 0 },
              "title": "Content-Type"
            },
            "authorization": {
              "title": "Authorization",
              "type": "string",
              "buildship": { "index": 1 },
              "description": "Authorization header"
            }
          },
          "description": "Headers of the request",
          "buildship": {}
        },
        "query": {
          "description": "Query parameters",
          "buildship": { "index": 0 },
          "title": "Query parameters",
          "type": "object"
        }
      },
      "buildship": {}
    },
    "meta": {
      "name": "Rest API Call",
      "id": "http",
      "description": "Create an API / HTTP endpoint as the trigger or starting point for your workflow. This endpoint can be used in other apps to run the workflow. [Full documentation](https://docs.buildship.com/trigger-nodes/rest-api)",
      "icon": {}
    },
    "id": "http",
    "label": "Rest API Call",
    "groupId": null
  },
  "nodeValues": {
    "1c5cc546-ff6b-478e-b753-de43bf7b145e": {
      "value": {
        "expression": "{\n  \"message\": ctx[\"root\"][\"d14831d3-b365-4519-9eb7-790deb07cf9c\"][\"response\"],\n  \"chatHistory\": ctx[\"root\"][\"d14831d3-b365-4519-9eb7-790deb07cf9c\"][\"chatHistory\"],\n  \"threadId\": \"\"\n}",
        "type": "javascript"
      },
      "cacheMaxAge": 0,
      "status": "200"
    },
    "d14831d3-b365-4519-9eb7-790deb07cf9c": {
      "chatHistory": { "keys": ["request", "body", "chatHistory"] },
      "claudeApiKey": "",
      "model": "claude-3-opus-20240229",
      "maxTokens": 1024,
      "instructions": "",
      "userPrompt": { "keys": ["request", "body", "message"] }
    },
    "http": { "method": "POST", "path": "/claude-asssistant" },
    "test-node-d14831d3-b365-4519-9eb7-790deb07cf9c": {
      "claudeApiKey": "",
      "chatHistory": [],
      "maxTokens": 1024,
      "model": "claude-3-opus-20240229",
      "instructions": "",
      "userPrompt": ""
    }
  },
  "notes": "<p># Request</p><p>A simple request-response:</p><p>{</p><p><span style=\"background-color: rgb(240, 240, 240); color: rgb(29, 117, 179);\">\"message\"</span><span style=\"background-color: rgb(240, 240, 240); color: rgb(51, 51, 51);\">: </span><span style=\"background-color: rgb(240, 240, 240); color: rgb(179, 94, 20);\">\"Hello, Claude\"</span></p><p>}</p><p><br></p><p>Example with conversational turns:</p><p>{</p><p><span style=\"color: rgb(29, 117, 179); background-color: rgb(240, 240, 240);\">\"message\"</span><span style=\"color: rgb(51, 51, 51); background-color: rgb(240, 240, 240);\">: </span><span style=\"color: rgb(179, 94, 20); background-color: rgb(240, 240, 240);\">\"Can you explain LLMs in plain English?\",</span></p><p><span style=\"background-color: rgb(240, 240, 240); color: rgb(29, 117, 179);\">\"chatHistory\"</span><span style=\"background-color: rgb(240, 240, 240); color: rgb(51, 51, 51);\">: [</span></p><p><span style=\"background-color: rgb(240, 240, 240); color: rgb(51, 51, 51);\"> {</span><span style=\"background-color: rgb(240, 240, 240); color: rgb(29, 117, 179);\">\"role\"</span><span style=\"background-color: rgb(240, 240, 240); color: rgb(51, 51, 51);\">: </span><span style=\"background-color: rgb(240, 240, 240); color: rgb(179, 94, 20);\">\"user\"</span><span style=\"background-color: rgb(240, 240, 240); color: rgb(51, 51, 51);\">, </span><span style=\"background-color: rgb(240, 240, 240); color: rgb(29, 117, 179);\">\"content\"</span><span style=\"background-color: rgb(240, 240, 240); color: rgb(51, 51, 51);\">: </span><span style=\"background-color: rgb(240, 240, 240); color: rgb(179, 94, 20);\">\"Hello, Claude.\"</span><span style=\"background-color: rgb(240, 240, 240); color: rgb(51, 51, 51);\">},</span></p><p><span style=\"background-color: rgb(240, 240, 240); color: rgb(51, 51, 51);\"> {</span><span style=\"background-color: rgb(240, 240, 240); color: rgb(29, 117, 179);\">\"role\"</span><span style=\"background-color: rgb(240, 240, 240); color: rgb(51, 51, 51);\">: </span><span style=\"background-color: rgb(240, 240, 240); color: rgb(179, 94, 20);\">\"assistant\"</span><span style=\"background-color: rgb(240, 240, 240); color: rgb(51, 51, 51);\">, </span><span style=\"background-color: rgb(240, 240, 240); color: rgb(29, 117, 179);\">\"content\"</span><span style=\"background-color: rgb(240, 240, 240); color: rgb(51, 51, 51);\">: </span><span style=\"background-color: rgb(240, 240, 240); color: rgb(179, 94, 20);\">\"Hi, I'm Claude. How can I help you?\"</span><span style=\"background-color: rgb(240, 240, 240); color: rgb(51, 51, 51);\">}</span></p><p><span style=\"background-color: rgb(240, 240, 240); color: rgb(51, 51, 51);\">]</span></p><p>}</p><p><br></p><p># Response</p>"
}
