{
  "nodes": [
    {
      "name": "Claude Assistant",
      "output": {
        "type": "object",
        "title": "",
        "buildship": { "index": 0 },
        "properties": {
          "chatHistory": { "description": "", "buildship": { "index": 1 }, "title": "Chat History", "type": "array" },
          "error": { "description": "", "title": "Error", "buildship": { "index": 2 } },
          "data": {
            "properties": {},
            "type": "object",
            "title": "Data",
            "buildship": { "index": 3 },
            "description": ""
          },
          "response": { "description": "", "title": "Response", "type": "string", "buildship": { "index": 0 } }
        },
        "description": ""
      },
      "dependencies": { "axios": "0.28.1" },
      "label": "Claude Assistant",
      "type": "script",
      "meta": {
        "id": "claude-assistant-node",
        "description": "",
        "name": "Claude Assistant",
        "icon": {
          "type": "URL",
          "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fanthropic.png?alt=media&token=ec0eb8dc-f0d4-4f97-a144-023f1aa8118e"
        }
      },
      "inputs": {
        "required": ["maxTokens", "userPrompt", "claudeApiKey", "model", "systemPrompt"],
        "type": "object",
        "properties": {
          "userPrompt": {
            "type": "string",
            "title": "User Prompt",
            "pattern": "",
            "buildship": { "index": 2, "sensitive": false },
            "default": "",
            "description": ""
          },
          "maxTokens": {
            "buildship": { "index": 4, "sensitive": false },
            "description": "",
            "default": "",
            "title": "Max Tokens",
            "pattern": "",
            "type": "number"
          },
          "model": {
            "enum": ["claude-3-opus-20240229", "claude-3-sonnet-20240229", "claude-3-haiku-20240307"],
            "title": "Model",
            "default": "claude-3-opus-20240229",
            "buildship": {
              "index": 4,
              "options": [
                { "value": "claude-3-opus-20240229", "label": "Claude 3 Opus" },
                { "label": "Claude 3 Sonnet", "value": "claude-3-sonnet-20240229" },
                { "label": "Claude 3 Haiku", "value": "claude-3-haiku-20240307" }
              ],
              "sensitive": false
            },
            "description": "",
            "pattern": "",
            "type": "string"
          },
          "threadId": {
            "type": "string",
            "title": "Thread Id",
            "pattern": "",
            "default": "",
            "buildship": { "index": 5, "sensitive": false },
            "description": ""
          },
          "systemPrompt": {
            "type": "string",
            "pattern": "",
            "title": "Instructions",
            "description": "",
            "default": "",
            "buildship": { "sensitive": false, "index": 1 }
          },
          "claudeApiKey": {
            "buildship": { "index": 0, "sensitive": true },
            "pattern": "",
            "description": "The OpenAI API key to use for authentication.",
            "type": "string",
            "title": "API Key"
          }
        }
      },
      "script": "import axios from \"axios\";\n\nconst nodeToClaudeTool: (node: Node) => ClaudeTool = (node) => {\n  return {\n    // Use node.id as the name of the tool. Spaces are not allowed.\n    name: node.id,\n    description: node.meta.description ?? \"\",\n    input_schema: {\n      type: \"object\",\n      properties: Object.entries(node.inputs.properties)\n        .reduce((properties, [name, value]) => {\n          if (value.buildship && !value.buildship.toBeAutoFilled) return properties;\n          return {\n            ...properties, [name]: {\n              type: value.type,\n              enum: value.enum,\n              description: value.description\n            }\n          }\n        }, {}),\n      required: Object.entries(node.inputs.properties).map(([name, value]) => {\n        if (value.buildship && value.buildship.toBeAutoFilled && node.inputs.required.includes(name)) return name;\n        return false;\n      }).filter(Boolean) as string[],\n    },\n  };\n}\n\ntype Params = {\n  claudeApiKey: string;\n  model: string;\n  maxTokens: number;\n  userPrompt: string;\n  systemPrompt?: string;\n  chatHistory?: ClaudeMessage[];\n};\n\nexport default async function assistant(\n  { claudeApiKey, model, maxTokens, userPrompt, systemPrompt, chatHistory }: Params,\n  { logging, execute, nodes }: any\n) {\n  const version = \"2023-06-01\";\n  const beta = \"tools-2024-04-04\";\n\n  const client = axios.create({\n    baseURL: \"https://api.anthropic.com/v1\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'x-api-key': claudeApiKey,\n      'anthropic-version': version,\n      'anthropic-beta': beta\n    }\n  });\n\n  const tools: ClaudeTool[] = nodes?.map(nodeToClaudeTool) ?? [];\n\n  const initialMessages = [\n    ...(chatHistory ?? []),\n    {\n      \"role\": \"user\",\n      \"content\": userPrompt,\n    }];\n\n  const baseRequest = {\n    \"model\": model,\n    \"max_tokens\": maxTokens,\n    \"system\": systemPrompt || \"\",\n    \"tools\": tools,\n    \"messages\": initialMessages\n  } as ClaudeRequest;\n\n  try {\n    let request = { ...baseRequest };\n    let requestCount = 1;\n    logging.log(`Claude request(${requestCount}):`, baseRequest);\n    let response = await client.post(\"/messages\", request);\n    logging.log(`Claude response(${requestCount}): `, response.data);\n\n    do {\n      if (response.data.type === \"error\") {\n        throw response.data.error;\n      }\n\n      let result = response.data;\n\n      const isEndTurn = result.stop_reason === \"end_turn\";\n      if (isEndTurn) break;\n\n      const content = result.content;\n      request.messages.push({ role: \"assistant\", content });\n\n      const isToolUse = result.stop_reason === \"tool_use\" && content instanceof Array;\n      if (isToolUse) {\n        const toolUseMessageContent = [] as ClaudeToolResultContent[];\n\n        const toolUses: ClaudeToolUseContent[] = content.filter(content => content.type === \"tool_use\");\n        for (const toolUse of toolUses) {\n          const tool = tools.find(tool => tool.name === toolUse.name);\n          const node = nodes?.find((node: Node) => node.id === toolUse.name);\n          if (!tool || !node) {\n            logging.log(\"Failed to find tool:\");\n            logging.log(toolUse);\n            logging.log(node);\n            throw new Error(\"Failed to find tool\");\n          }\n          logging.log(\"Tool node: \", node.name);\n          // filter hallucinated inputs\n          const inputs = {} as Record<string, string>;\n          for (const [inputKey, inputValue] of Object.entries(toolUse.input)) {\n            if (node.inputs.properties[inputKey]) {\n              inputs[inputKey] = inputValue;\n            }\n          }\n          const toolResponse = await execute(node.label, inputs);\n          logging.log(\"Tool response: \", toolResponse);\n          toolUseMessageContent.push({\n            type: \"tool_result\",\n            tool_use_id: toolUse.id,\n            content: toolResponse ? JSON.stringify(toolResponse) : \"\",\n          });\n        }\n        request.messages.push({\n          role: \"user\",\n          content: toolUseMessageContent\n        });\n      }\n      requestCount++;\n      logging.log(`Claude request(${requestCount}):`, request);\n      response = await client.post(\"/messages\", request);\n      logging.log(`Claude response(${requestCount}): `, response.data);\n    } while (response && response.data && response.data.stop_reason !== \"end_turn\");\n\n    return {\n      response: response.data.content[0].text,\n      chatHistory: [...request.messages, { role: \"assistant\", content: response.data.content }],\n      data: response.data,\n      error: null,\n    }\n  } catch (error) {\n    logging.log(`Error: ${error}`);\n    return { error }\n  }\n}\n\ntype Node = {\n  label: string;\n  meta: {\n    id: string;\n    description: string;\n    name: string;\n    [key: string]: any;\n  };\n  inputs: {\n    type: string;\n    required: string[];\n    properties: Record<string, {\n      description: string;\n      buildship?: {\n        toBeAutoFilled?: boolean;\n        [key: string]: any;\n      }\n      [key: string]: any;\n    }>;\n  };\n  [key: string]: any;\n};\n\ntype ClaudeTool = {\n  name: string;\n  description: string;\n  input_schema: {\n    type: string;\n    properties: Record<string, {\n      type: string;\n      description: string;\n      enum?: string[];\n    }>;\n    required: string[];\n  };\n};\n\ntype ClaudeTextContent = {\n  type: \"text\";\n  text: string;\n};\n\ntype ClaudeToolUseContent = {\n  type: \"tool_use\",\n  id: string,\n  name: string,\n  input: Record<string, string>\n};\n\ntype ClaudeToolResultContent = {\n  type: \"tool_result\",\n  tool_use_id: string,\n  content: string\n};\n\ntype ClaudeMessage = {\n  role: \"user\" | \"assistant\",\n  content: ClaudeResponse[\"content\"]\n};\n\ntype ClaudeRequest = {\n  \"model\": string,\n  \"max_tokens\": number,\n  \"tools\": ClaudeTool[],\n  \"messages\": ClaudeMessage[]\n};\n\ntype ClaudeResponse = {\n  \"id\": string,\n  \"type\": \"message\",\n  \"role\": \"assistant\",\n  \"model\": string,\n  \"stop_sequence\": null,\n  \"usage\": { \"input_tokens\": number, \"output_tokens\": number },\n  \"content\": string | ClaudeTextContent[] | ClaudeToolUseContent[] | ClaudeToolResultContent[];\n  \"stop_reason\": \"tool_use\" | \"stop_sequence\" | \"end_turn\"\n};\n",
      "id": "85e6eb00-8bbd-49b4-80c4-25cc2680ea28",
      "onFail": null,
      "nodes": [
        {
          "dependencies": { "@google-cloud/firestore": "7.1.0" },
          "integrations": [],
          "label": "updateDatabase",
          "meta": {
            "icon": {
              "type": "URL",
              "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2FIcon.png?alt=media&token=878ed11b-1cf2-45d8-9951-7e95a16d26af&_gl=1*1ld9l67*_ga*NzgyMDk5NjMxLjE2OTY4NzE3ODU.*_ga_CW55HF8NVT*MTY5NjkyMzc5OC4yLjEuMTY5NjkyMzgzMy4yNS4wLjA."
            },
            "description": "save the latest quiz to the database",
            "id": "buildship-create-document",
            "name": "Save Quiz Question"
          },
          "name": "Save Quiz Question",
          "_libRef": {
            "libNodeRefId": "@buildship/buildship-create-document",
            "src": "https://storage.googleapis.com/buildship-app-us-central1/cache/builtNodes/@buildship/buildship-create-document/v1_0_0.cjs",
            "isDirty": true,
            "libType": "public",
            "version": "1.0.0",
            "integrity": "v3:f8ff07ce9cbad39ca8528d0108cc4a3b"
          },
          "type": "script",
          "id": "a825e378-7c87-422a-9200-68cb326cdd28",
          "onFail": null,
          "description": "Save quiz data in JSON format:\n{\"question\":\"\", \"answers\":[list],\"correctAnswer\":\"\", \"keywords\":[list]}",
          "script": "import { Firestore } from '@google-cloud/firestore';\n\nexport default async function createDocument({\n    collectionName,\n    id,\n    data,\n    merge,\n},{logging}) {\n    logging.log({data,id,collectionName})\n    logging.log({data})\n    const firestore = new Firestore(undefined);\n    if(id){\n      await firestore.collection(collectionName).doc(id).set(data, {\n          merge\n      });\n      return {\n          id,\n          path:`${collectionName}/${id}`,\n          status: 'success!'\n      };\n    } else{\n      const ref = await firestore.collection(collectionName).add(data);\n      return {\n          id:ref.id,\n          path:ref.path,\n          status: 'success!'\n      };\n    }\n}",
          "output": {
            "title": "Firestore Response",
            "type": "object",
            "buildship": {},
            "properties": {
              "status": { "type": "string", "buildship": { "index": 0 }, "title": "Status" },
              "id": { "description": "Document ID", "title": "Id", "type": "string", "buildship": { "index": 1 } },
              "path": { "title": "Path", "type": "string", "description": "Document Path", "buildship": { "index": 2 } }
            },
            "description": "The response from the Firestore set operation"
          },
          "inputs": {
            "type": "object",
            "required": ["collectionName", "merge", "data"],
            "properties": {
              "id": {
                "pattern": "",
                "buildship": { "index": 1, "sensitive": false },
                "title": "Document ID",
                "type": "string",
                "description": "The ID of the document to create or update"
              },
              "data": {
                "description": "The quiz data in JSON format with fields: question, options, correctAnswer, keywords",
                "properties": {},
                "type": "object",
                "pattern": "",
                "title": "Quiz data",
                "default": {},
                "buildship": { "toBeAutoFilled": true, "index": 2, "sensitive": false }
              },
              "merge": {
                "type": "boolean",
                "default": false,
                "description": "Whether to merge the data with any existing document",
                "title": "Merge",
                "buildship": { "index": 3 }
              },
              "collectionName": {
                "type": "string",
                "description": "The name of your Firestore collection",
                "title": "Collection Name",
                "buildship": { "index": 0 }
              }
            }
          }
        }
      ],
      "integrations": [],
      "subType": "assistant"
    },
    {
      "inputs": {
        "properties": {
          "cacheMaxAge": {
            "default": 0,
            "description": "Set cache duration in seconds",
            "buildship": { "index": 2 },
            "type": "number",
            "title": "Cache Time"
          },
          "value": {
            "title": "Value",
            "description": "The value to return",
            "type": "string",
            "buildship": { "index": 1 },
            "default": ""
          },
          "status": {
            "title": "Status code",
            "buildship": {
              "options": [
                { "value": "200", "label": "OK (200)" },
                { "value": "201", "label": "Created (201)" },
                { "value": "202", "label": "Accepted (202)" },
                { "label": "Redirect (301)", "value": "301" },
                { "value": "204", "label": "No Content (204)" },
                { "value": "400", "label": "Bad Request (400)" },
                { "value": "401", "label": "Unauthorized (401)" },
                { "value": "403", "label": "Forbidden (403)" },
                { "value": "404", "label": "Not Found (404)" },
                { "value": "429", "label": "Too Many Requests (429)" },
                { "value": "500", "label": "Internal Server Error (500)" }
              ],
              "index": 0
            },
            "description": "The HTTP status code to return",
            "enum": ["200", "201", "202", "204", "400", "401", "403", "404", "429", "500"],
            "default": "200",
            "type": "string"
          }
        },
        "required": [],
        "type": "object"
      },
      "response": { "2XX": { "properties": {}, "type": "object" } },
      "id": "b5914b0a-d6fd-4ed1-9775-eb8110d28e7e",
      "label": "Return",
      "description": "The Return Node is used to return values from the workflow. It is generally the last node in the workflow. The return node is optional as the API can inherently return a 200 OK response by default. [Full Documentation](https://docs.buildship.com/core-nodes/return).",
      "type": "return"
    }
  ],
  "trigger": {
    "meta": {
      "description": "Create an API / HTTP endpoint as the trigger or starting point for your workflow. This endpoint can be used in other apps to run the workflow. [Full documentation](https://docs.buildship.com/trigger-nodes/rest-api)",
      "id": "http",
      "name": "Rest API Call",
      "icon": {}
    },
    "testingSchema": [
      {
        "label": "Endpoint URL",
        "name": "endpointURL",
        "type": "shortText",
        "disabled": true,
        "prefill": "endpointURL"
      },
      { "name": "apiRequestData", "type": "apiRequestData", "prefill": "apiRequestData" }
    ],
    "output": {
      "properties": {
        "query": {
          "type": "object",
          "description": "Query parameters",
          "buildship": { "index": 0 },
          "title": "Query parameters"
        },
        "body": {
          "type": "object",
          "title": "Body",
          "description": "Body of the request",
          "buildship": { "index": 1 }
        },
        "headers": {
          "properties": {
            "authorization": {
              "title": "Authorization",
              "description": "Authorization header",
              "type": "string",
              "buildship": { "index": 1 }
            },
            "content-type": {
              "description": "Content-Type of the request",
              "buildship": { "index": 0 },
              "type": "string",
              "title": "Content-Type"
            }
          },
          "buildship": {},
          "type": "object",
          "title": "Headers",
          "description": "Headers of the request"
        }
      },
      "buildship": {},
      "type": "object",
      "title": "Request"
    },
    "type": "http",
    "request": {
      "required": [],
      "title": "Request",
      "buildship": {},
      "properties": {
        "headers": {
          "description": "Headers of the request",
          "properties": {},
          "title": "Request Headers",
          "buildship": {},
          "type": "object"
        },
        "query": {
          "properties": {},
          "description": "Query parameters",
          "buildship": {},
          "type": "object",
          "title": "Query"
        },
        "body": {
          "buildship": {},
          "properties": {
            "threadId": { "type": "string", "description": "", "title": "Thread Id", "buildship": { "index": 0 } },
            "message": { "buildship": { "index": 0 }, "type": "string", "title": "Message", "description": "" }
          },
          "title": "Body",
          "description": "Body of the request",
          "type": "object"
        }
      },
      "type": "object"
    },
    "label": "Rest API Call",
    "order": 1,
    "live": true,
    "id": "http",
    "groupId": null,
    "dependencies": {},
    "inputs": {
      "properties": {
        "path": {
          "pattern": "",
          "default": "/",
          "buildship": { "index": 0, "sensitive": false },
          "type": "string",
          "description": "The path of the API Endpoint. Additionally, define the structure for the incoming API requests. [Learn more about API Specification here](https://docs.buildship.com/basics/api-spec#request-specification).",
          "title": "Path"
        },
        "method": {
          "enum": ["GET", "POST", "PUT", "DELETE"],
          "description": "The HTTP method for the incoming request.",
          "default": "GET",
          "title": "Method",
          "pattern": "",
          "type": "string",
          "buildship": {
            "index": 1,
            "options": [
              { "value": "GET", "label": "GET" },
              { "value": "POST", "label": "POST" },
              { "label": "PUT", "value": "PUT" },
              { "value": "DELETE", "label": "DELETE" }
            ],
            "sensitive": false
          }
        }
      },
      "required": ["method", "path"],
      "type": "object"
    },
    "instruction": { "bodyTemplate": "https://{{runtimeUrl}}/{{httpPath}}", "title": "Endpoint URL" },
    "script": ""
  },
  "nodeValues": {
    "a825e378-7c87-422a-9200-68cb326cdd28": { "id": "", "merge": true, "data": {}, "collectionName": "" },
    "b5914b0a-d6fd-4ed1-9775-eb8110d28e7e": {
      "value": {
        "type": "javascript",
        "expression": "{\n  \"message\": ctx[\"root\"][\"85e6eb00-8bbd-49b4-80c4-25cc2680ea28\"][\"response\"],\n  \"threadId\": \"\"\n}"
      },
      "cacheMaxAge": 0,
      "status": "200"
    },
    "85e6eb00-8bbd-49b4-80c4-25cc2680ea28": {
      "maxTokens": 1024,
      "threadId": { "keys": ["request", "body", "threadId"] },
      "systemPrompt": "You are a personal history tutor. You will answer questions in a concise way. If no question is given, you should provide a historical fact. You must also engage with users by creating little quizzes with 4 possible options to answer in each question. When you are given tools to use, you must use them following the guidelines for each tool.Guidelines:When a new quiz is generated you must use 'updateDatabase' tool to save the latest quiz to the database",
      "model": "claude-3-opus-20240229",
      "userPrompt": { "keys": ["request", "body", "message"] },
      "claudeApiKey": ""
    },
    "http": { "path": "/claude-quiz-master", "method": "POST" }
  },
  "notes": "<p>{</p><p><span style=\"background-color: rgb(240, 240, 240); color: rgb(29, 117, 179);\">\"message\"</span><span style=\"background-color: rgb(240, 240, 240); color: rgb(51, 51, 51);\">: </span><span style=\"background-color: rgb(240, 240, 240); color: rgb(179, 94, 20);\">\"History of the Roman Empire\"</span></p><p>}</p>"
}
