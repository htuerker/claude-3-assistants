{
  "nodes": [
    {
      "label": "Claude Assistant",
      "output": {
        "properties": {
          "chatHistory": { "type": "array", "description": "", "title": "Chat History", "buildship": { "index": 1 } },
          "error": { "title": "Error", "description": "", "buildship": { "index": 2 } },
          "response": { "title": "Response", "type": "string", "description": "", "buildship": { "index": 0 } },
          "data": {
            "type": "object",
            "title": "Data",
            "properties": {},
            "description": "",
            "buildship": { "index": 3 }
          }
        },
        "title": "",
        "description": "",
        "type": "object",
        "buildship": { "index": 0 }
      },
      "integrations": [],
      "onFail": null,
      "type": "script",
      "nodes": [
        {
          "description": "Save quiz data in JSON format:\n{\"question\":\"\", \"answers\":[list],\"correctAnswer\":\"\", \"keywords\":[list]}",
          "integrations": [],
          "script": "import { Firestore } from '@google-cloud/firestore';\n\nexport default async function createDocument({\n    collectionName,\n    id,\n    data,\n    merge,\n},{logging}) {\n    logging.log({data,id,collectionName})\n    logging.log({data})\n    const firestore = new Firestore(undefined);\n    if(id){\n      await firestore.collection(collectionName).doc(id).set(data, {\n          merge\n      });\n      return {\n          id,\n          path:`${collectionName}/${id}`,\n          status: 'success!'\n      };\n    } else{\n      const ref = await firestore.collection(collectionName).add(data);\n      return {\n          id:ref.id,\n          path:ref.path,\n          status: 'success!'\n      };\n    }\n}",
          "inputs": {
            "required": ["collectionName", "merge", "data"],
            "type": "object",
            "properties": {
              "collectionName": {
                "description": "The name of your Firestore collection",
                "title": "Collection Name",
                "type": "string",
                "buildship": { "index": 0 }
              },
              "merge": {
                "type": "boolean",
                "title": "Merge",
                "default": false,
                "description": "Whether to merge the data with any existing document",
                "buildship": { "index": 3 }
              },
              "data": {
                "type": "object",
                "title": "Quiz data",
                "default": {},
                "description": "The quiz data in JSON format with fields: question, options, correctAnswer, keywords",
                "pattern": "",
                "properties": {},
                "buildship": { "index": 2, "sensitive": false, "toBeAutoFilled": true }
              },
              "id": {
                "description": "The ID of the document to create or update",
                "buildship": { "sensitive": false, "index": 1 },
                "pattern": "",
                "type": "string",
                "title": "Document ID"
              }
            }
          },
          "_libRef": {
            "version": "1.0.0",
            "isDirty": true,
            "src": "https://storage.googleapis.com/buildship-app-us-central1/cache/builtNodes/@buildship/buildship-create-document/v1_0_0.cjs",
            "libType": "public",
            "integrity": "v3:f8ff07ce9cbad39ca8528d0108cc4a3b",
            "libNodeRefId": "@buildship/buildship-create-document"
          },
          "dependencies": { "@google-cloud/firestore": "7.1.0" },
          "name": "Save Quiz Question",
          "output": {
            "buildship": {},
            "title": "Firestore Response",
            "type": "object",
            "properties": {
              "id": { "buildship": { "index": 1 }, "title": "Id", "type": "string", "description": "Document ID" },
              "path": {
                "type": "string",
                "description": "Document Path",
                "title": "Path",
                "buildship": { "index": 2 }
              },
              "status": { "buildship": { "index": 0 }, "type": "string", "title": "Status" }
            },
            "description": "The response from the Firestore set operation"
          },
          "id": "b8875719-3f6a-4cee-8dd5-46bcab78cfa7",
          "onFail": null,
          "meta": {
            "name": "Save Quiz Question",
            "description": "save the latest quiz to the database",
            "id": "buildship-create-document",
            "icon": {
              "type": "URL",
              "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2FIcon.png?alt=media&token=878ed11b-1cf2-45d8-9951-7e95a16d26af&_gl=1*1ld9l67*_ga*NzgyMDk5NjMxLjE2OTY4NzE3ODU.*_ga_CW55HF8NVT*MTY5NjkyMzc5OC4yLjEuMTY5NjkyMzgzMy4yNS4wLjA."
            }
          },
          "label": "updateDatabase",
          "type": "script"
        }
      ],
      "name": "Claude Assistant",
      "meta": {
        "name": "Claude Assistant",
        "icon": {
          "type": "URL",
          "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fanthropic.png?alt=media&token=ec0eb8dc-f0d4-4f97-a144-023f1aa8118e"
        },
        "description": "",
        "id": "claude-assistant-node"
      },
      "script": "import axios from \"axios\";\n\nconst nodeToClaudeTool = (node) => {\n  return {\n    // Use node.id as the name of the tool. Spaces are not allowed.\n    name: node.id,\n    description: node.meta.description ?? \"\",\n    input_schema: {\n      type: \"object\",\n      properties: Object.entries(node.inputs.properties)\n        .reduce((properties, [name, value]) => {\n          if (value.buildship && !value.buildship.toBeAutoFilled) return properties;\n          return {\n            ...properties, [name]: {\n              type: value.type,\n              enum: value.enum,\n              description: value.description\n            }\n          }\n        }, {}),\n      required: Object.entries(node.inputs.properties).map(([name, value]) => {\n          if (value.buildship && value.buildship.toBeAutoFilled && node.inputs.required.includes(name)) return name;\n          return false;\n        }).filter(Boolean)\n    },\n  };\n}\n\nexport default async function assistant(\n  { claudeApiKey, model, maxTokens, userPrompt, instructions, chatHistory },\n  { logging, execute, nodes }\n) {\n  // TODO\n  const version = \"2023-06-01\";\n  const beta = \"tools-2024-04-04\";\n\n  const client = axios.create({\n    baseURL: \"https://api.anthropic.com/v1\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'x-api-key': claudeApiKey,\n      'anthropic-version': version,\n      'anthropic-beta': beta\n    }\n  });\n\n  const tools = nodes?.map(nodeToClaudeTool) ?? [];\n\n  const initialMessages = [\n    ...(chatHistory ?? []),\n    {\n      \"role\": \"user\",\n      \"content\": userPrompt,\n    }];\n\n  const baseRequest = {\n    \"model\": model,\n    \"max_tokens\": maxTokens,\n    \"system\": instructions || \"\",\n    \"tools\": tools,\n    \"messages\": initialMessages\n  };\n\n  try {\n    let request = { ...baseRequest };\n    let requestCount = 1;\n    logging.log(`Claude request(${requestCount}):`, baseRequest);\n    let response = await client.post(\"/messages\", request);\n    logging.log(`Claude response(${requestCount}): `, response.data);\n\n    do {\n      if (response.status !== 200) {\n        throw response.error;\n      }\n      if (response.data.type === \"error\") {\n          throw response.data.error;\n      }\n\n      let result = response.data;\n\n      const isEndTurn = result.stop_reason === \"end_turn\";\n      if(isEndTurn) break;\n      \n      const content = result.content;\n      request.messages.push({ role: \"assistant\", content });\n      \n      const isToolUse = result.stop_reason === \"tool_use\" && content instanceof Array;\n      if (isToolUse) {\n        const toolUseMessage = {\n          role: \"user\",\n          content: []\n        };\n        const toolUses = content.filter(content => content.type === \"tool_use\");\n        for (const toolUse of toolUses) {\n          const tool = tools.find(tool => tool.name === toolUse.name);\n          const node = nodes?.find(node => node.id === toolUse.name);\n          if (!tool || !node) {\n            logging.log(\"Failed to find tool:\");\n            logging.log(toolUse);\n            logging.log(node);\n            throw new Error(\"Failed to find tool\");\n          }\n          logging.log(\"Tool node: \", node.name);\n          const toolResponse = await execute(node.label, toolUse.input);\n          logging.log(\"Tool response: \", toolResponse);\n          toolUseMessage.content.push({\n            type: \"tool_result\",\n            tool_use_id: toolUse.id,\n            content: toolResponse ? JSON.stringify(toolResponse) : \"\",\n          });\n        }\n        request.messages.push(toolUseMessage);\n      }\n\n      requestCount++;\n      logging.log(`Claude request(${requestCount}):`, request);\n      response = await client.post(\"/messages\", request);\n      logging.log(`Claude response(${requestCount}): `, response.data);\n    } while (response && response.data && response.data.stop_reason !== \"end_turn\");\n\n    return {\n      response: response.data.content[0].text,\n      chatHistory: [...request.messages, { role: \"assistant\", content: response.data.content }],\n      data: response.data,\n      error: null,\n    }\n  } catch (error) {\n    logging.log(\"Error\");\n    logging.log(error.config);\n    logging.log(error.message);\n    return { error: error.message }\n  }\n}",
      "inputs": {
        "required": ["maxTokens", "userPrompt", "claudeApiKey", "instructions", "model"],
        "properties": {
          "maxTokens": {
            "type": "number",
            "title": "Max Tokens",
            "buildship": { "sensitive": false, "index": 4 },
            "default": "",
            "pattern": "",
            "description": ""
          },
          "userPrompt": {
            "buildship": { "index": 2, "sensitive": false },
            "type": "string",
            "pattern": "",
            "default": "",
            "title": "User Prompt",
            "description": ""
          },
          "claudeApiKey": {
            "buildship": { "sensitive": true, "index": 0 },
            "type": "string",
            "pattern": "",
            "description": "The OpenAI API key to use for authentication.",
            "title": "API Key"
          },
          "model": {
            "title": "Model",
            "type": "string",
            "default": "claude-3-opus-20240229",
            "pattern": "",
            "enum": ["claude-3-opus-20240229", "claude-3-sonnet-20240229", "claude-3-haiku-20240307"],
            "buildship": {
              "sensitive": false,
              "options": [
                { "value": "claude-3-opus-20240229", "label": "Claude 3 Opus" },
                { "value": "claude-3-sonnet-20240229", "label": "Claude 3 Sonnet" },
                { "label": "Claude 3 Haiku", "value": "claude-3-haiku-20240307" }
              ],
              "index": 4
            },
            "description": ""
          },
          "instructions": {
            "buildship": { "index": 1, "sensitive": false },
            "type": "string",
            "default": "",
            "title": "Instructions",
            "description": "",
            "pattern": ""
          },
          "chatHistory": {
            "description": "",
            "buildship": { "sensitive": false, "index": 5 },
            "default": [],
            "pattern": "",
            "type": "array",
            "title": "Chat History"
          }
        },
        "type": "object"
      },
      "subType": "assistant",
      "dependencies": { "axios": "0.28.1" },
      "id": "021cda49-e63a-48c7-8af5-44e30103e391"
    },
    {
      "description": "The Return Node is used to return values from the workflow. It is generally the last node in the workflow. The return node is optional as the API can inherently return a 200 OK response by default. [Full Documentation](https://docs.buildship.com/core-nodes/return).",
      "inputs": {
        "type": "object",
        "required": [],
        "properties": {
          "cacheMaxAge": {
            "buildship": { "index": 2 },
            "type": "number",
            "default": 0,
            "description": "Set cache duration in seconds",
            "title": "Cache Time"
          },
          "status": {
            "title": "Status code",
            "description": "The HTTP status code to return",
            "type": "string",
            "default": "200",
            "enum": ["200", "201", "202", "204", "400", "401", "403", "404", "500"],
            "buildship": {
              "options": [
                { "value": "200", "label": "OK (200)" },
                { "value": "201", "label": "Created (201)" },
                { "value": "202", "label": "Accepted (202)" },
                { "value": "301", "label": "Redirect (301)" },
                { "label": "No Content (204)", "value": "204" },
                { "value": "400", "label": "Bad Request (400)" },
                { "label": "Unauthorized (401)", "value": "401" },
                { "value": "403", "label": "Forbidden (403)" },
                { "value": "404", "label": "Not Found (404)" },
                { "value": "500", "label": "Internal Server Error (500)" }
              ],
              "index": 0
            }
          },
          "value": {
            "description": "The value to return",
            "title": "Value",
            "type": "string",
            "default": "",
            "buildship": { "index": 1 }
          }
        }
      },
      "id": "27357f1a-6b7e-4b1e-936c-990c59d62a50",
      "label": "Return",
      "type": "return",
      "response": {
        "200": {
          "description": "",
          "title": "",
          "buildship": { "index": 0 },
          "type": "object",
          "properties": {
            "chatHistory": { "type": "array", "buildship": { "index": 1 }, "description": "", "title": "Chat History" },
            "data": {
              "title": "Data",
              "type": "object",
              "buildship": { "index": 3 },
              "description": "",
              "properties": {}
            },
            "response": { "title": "Response", "description": "", "type": "string", "buildship": { "index": 0 } },
            "error": { "description": "", "title": "Error", "buildship": { "index": 2 } }
          }
        }
      }
    }
  ],
  "trigger": {
    "request": {
      "properties": {
        "body": {
          "type": "object",
          "properties": {
            "1707747204621": { "title": "sample", "type": "string", "description": "", "buildship": { "index": 0 } }
          },
          "buildship": {},
          "title": "Body",
          "description": "Body of the request"
        },
        "headers": {
          "properties": {},
          "buildship": {},
          "title": "Request Headers",
          "description": "Headers of the request",
          "type": "object"
        },
        "query": {
          "properties": {},
          "title": "Query",
          "buildship": {},
          "description": "Query parameters",
          "type": "object"
        }
      },
      "buildship": {},
      "title": "Request",
      "required": [],
      "type": "object"
    },
    "id": "http",
    "instruction": { "title": "Endpoint URL", "bodyTemplate": "https://{{runtimeUrl}}/{{httpPath}}" },
    "live": true,
    "script": "",
    "label": "Rest API Call",
    "type": "http",
    "output": {
      "buildship": {},
      "properties": {
        "headers": {
          "properties": {
            "content-type": {
              "type": "string",
              "description": "Content-Type of the request",
              "buildship": { "index": 0 },
              "title": "Content-Type"
            },
            "authorization": {
              "type": "string",
              "buildship": { "index": 1 },
              "description": "Authorization header",
              "title": "Authorization"
            }
          },
          "buildship": {},
          "description": "Headers of the request",
          "type": "object",
          "title": "Headers"
        },
        "body": {
          "type": "object",
          "buildship": { "index": 1 },
          "title": "Body",
          "description": "Body of the request"
        },
        "query": {
          "buildship": { "index": 0 },
          "title": "Query parameters",
          "description": "Query parameters",
          "type": "object"
        }
      },
      "title": "Request",
      "type": "object"
    },
    "dependencies": {},
    "testingSchema": [
      {
        "label": "Endpoint URL",
        "disabled": true,
        "name": "endpointURL",
        "type": "shortText",
        "prefill": "endpointURL"
      },
      { "prefill": "apiRequestData", "name": "apiRequestData", "type": "apiRequestData" }
    ],
    "meta": {
      "icon": {},
      "name": "Rest API Call",
      "id": "http",
      "description": "Create an API / HTTP endpoint as the trigger or starting point for your workflow. This endpoint can be used in other apps to run the workflow. [Full documentation](https://docs.buildship.com/trigger-nodes/rest-api)"
    },
    "inputs": {
      "properties": {
        "path": {
          "default": "/",
          "type": "string",
          "description": "The path of the API Endpoint. Additionally, define the structure for the incoming API requests. [Learn more about API Specification here](https://docs.buildship.com/basics/api-spec#request-specification).",
          "title": "Path",
          "buildship": { "index": 0, "sensitive": false },
          "pattern": ""
        },
        "method": {
          "enum": ["GET", "POST", "PUT", "DELETE"],
          "pattern": "",
          "default": "GET",
          "description": "The HTTP method for the incoming request.",
          "type": "string",
          "title": "Method",
          "buildship": {
            "options": [
              { "value": "GET", "label": "GET" },
              { "value": "POST", "label": "POST" },
              { "label": "PUT", "value": "PUT" },
              { "label": "DELETE", "value": "DELETE" }
            ],
            "index": 1,
            "sensitive": false
          }
        }
      },
      "required": ["method", "path"],
      "type": "object"
    }
  },
  "nodeValues": {
    "test-node-dd096fec-5cb2-4d0b-a048-94418e2c8cc6": {
      "id": "",
      "data": {},
      "merge": false,
      "collectionName": "Quiz"
    },
    "b8875719-3f6a-4cee-8dd5-46bcab78cfa7": { "data": {}, "merge": true, "collectionName": "Quiz", "id": "" },
    "473be578-0b84-4e24-b593-2ae17ffe2100": {
      "model": "claude-3-opus-20240229",
      "chatHistory": { "type": "javascript", "expression": "[]" },
      "instructions": "You are a personal history tutor. You will answer questions in a concise way. If no question is given, you should provide a historical fact. You must also engage with users by creating little quizzes with 4 possible options to answer in each question. When you are given tools to use, you must use them following the guidelines for each tool.Guidelines:When a new quiz is generated you must use 'updateDatabase' tool to save the latest quiz to the database",
      "userPrompt": {
        "expression": "ctx[\"root\"][\"request\"][\"body\"].message",
        "type": "javascript",
        "hasErrors": false
      },
      "maxTokens": 1024,
      "claudeApiKey": { "secretName": "claude-harini" }
    },
    "2b780b87-721a-48e0-8218-38718e58b7c6": { "data": {}, "collectionName": "Quiz", "merge": true, "id": "" },
    "27357f1a-6b7e-4b1e-936c-990c59d62a50": {
      "value": { "keys": ["021cda49-e63a-48c7-8af5-44e30103e391"] },
      "cacheMaxAge": "",
      "status": "200"
    },
    "http": { "path": "/claude-savetoDB", "method": "POST" },
    "f466ad48-7027-4a0a-8c22-dca3038e6666": {
      "threadId": { "type": "javascript", "expression": "ctx[\"root\"][\"request\"][\"body\"].threadID" },
      "instructions": "You are a personal history tutor. You will answer questions in a concise way. If no question is given, you should provide a historical fact. You must also engage with users by creating little quizzes with 4 possible options to answer in each question. When you are given tools to use, you must use them following the guidelines for each tool.Guidelines:When a new quiz is generated you must use 'updateDatabase' tool to save the latest quiz to the database",
      "apiKey": { "secretName": "openai" },
      "assistantId": "asst_acECoLHoxI0sOFgUGMqZgPcI",
      "prompt": { "expression": "ctx[\"root\"][\"request\"][\"body\"].message", "type": "javascript" }
    },
    "021cda49-e63a-48c7-8af5-44e30103e391": {
      "maxTokens": 1024,
      "userPrompt": {
        "expression": "ctx[\"root\"][\"request\"][\"body\"].message",
        "hasErrors": false,
        "type": "javascript"
      },
      "chatHistory": {
        "type": "javascript",
        "expression": "ctx[\"root\"][\"request\"][\"body\"].chatHistory",
        "hasErrors": false
      },
      "instructions": "You are a personal history tutor. You will answer questions in a concise way. If no question is given, you should provide a historical fact. You must also engage with users by creating little quizzes with 4 possible options to answer in each question. When you are given tools to use, you must use them following the guidelines for each tool.Guidelines:When a new quiz is generated you must use 'updateDatabase' tool to save the latest quiz to the database",
      "claudeApiKey": { "secretName": "claude-harini" },
      "model": "claude-3-haiku-20240307"
    },
    "dd096fec-5cb2-4d0b-a048-94418e2c8cc6": { "data": {}, "id": "", "merge": true, "collectionName": "Quiz" }
  },
  "notes": ""
}
