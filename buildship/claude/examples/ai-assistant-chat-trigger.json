{
  "nodes": [
    {
      "label": "Claude Assistant",
      "integrations": [],
      "output": {
        "buildship": { "index": 0 },
        "properties": {
          "error": { "title": "Error", "buildship": { "index": 2 }, "description": "" },
          "chatHistory": { "buildship": { "index": 1 }, "type": "array", "description": "", "title": "Chat History" },
          "response": { "type": "string", "title": "Response", "buildship": { "index": 0 }, "description": "" },
          "data": {
            "description": "",
            "title": "Data",
            "type": "object",
            "properties": {},
            "buildship": { "index": 3 }
          }
        },
        "description": "",
        "title": "",
        "type": "object"
      },
      "onFail": null,
      "dependencies": { "axios": "0.28.1" },
      "meta": {
        "description": "",
        "id": "claude-assistant-node",
        "icon": {
          "type": "URL",
          "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fanthropic.png?alt=media&token=ec0eb8dc-f0d4-4f97-a144-023f1aa8118e"
        },
        "name": "Claude Assistant"
      },
      "script": "import axios from \"axios\";\n\nconst nodeToClaudeTool: (node: Node) => ClaudeTool = (node) => {\n  return {\n    // Use node.id as the name of the tool. Spaces are not allowed.\n    name: node.id,\n    description: node.meta.description ?? \"\",\n    input_schema: {\n      type: \"object\",\n      properties: Object.entries(node.inputs.properties)\n        .reduce((properties, [name, value]) => {\n          if (value.buildship && !value.buildship.toBeAutoFilled) return properties;\n          return {\n            ...properties, [name]: {\n              type: value.type,\n              enum: value.enum,\n              description: value.description\n            }\n          }\n        }, {}),\n      required: Object.entries(node.inputs.properties).map(([name, value]) => {\n        if (value.buildship && value.buildship.toBeAutoFilled && node.inputs.required.includes(name)) return name;\n        return false;\n      }).filter(Boolean) as string[],\n    },\n  };\n}\n\ntype Params = {\n  claudeApiKey: string;\n  model: string;\n  maxTokens: number;\n  userPrompt: string;\n  systemPrompt?: string;\n  chatHistory?: ClaudeMessage[];\n};\n\nexport default async function assistant(\n  { claudeApiKey, model, maxTokens, userPrompt, systemPrompt, chatHistory }: Params,\n  { logging, execute, nodes }: any\n) {\n  const version = \"2023-06-01\";\n  const beta = \"tools-2024-04-04\";\n\n  const client = axios.create({\n    baseURL: \"https://api.anthropic.com/v1\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'x-api-key': claudeApiKey,\n      'anthropic-version': version,\n      'anthropic-beta': beta\n    }\n  });\n\n  const tools: ClaudeTool[] = nodes?.map(nodeToClaudeTool) ?? [];\n\n  const initialMessages = [\n    ...(chatHistory ?? []),\n    {\n      \"role\": \"user\",\n      \"content\": userPrompt,\n    }];\n\n  const baseRequest = {\n    \"model\": model,\n    \"max_tokens\": maxTokens,\n    \"system\": systemPrompt || \"\",\n    \"tools\": tools,\n    \"messages\": initialMessages\n  } as ClaudeRequest;\n\n  try {\n    let request = { ...baseRequest };\n    let requestCount = 1;\n    logging.log(`Claude request(${requestCount}):`, baseRequest);\n    let response = await client.post(\"/messages\", request);\n    logging.log(`Claude response(${requestCount}): `, response.data);\n\n    do {\n      if (response.data.type === \"error\") {\n        throw response.data.error;\n      }\n\n      let result = response.data;\n\n      const isEndTurn = result.stop_reason === \"end_turn\";\n      if (isEndTurn) break;\n\n      const content = result.content;\n      request.messages.push({ role: \"assistant\", content });\n\n      const isToolUse = result.stop_reason === \"tool_use\" && content instanceof Array;\n      if (isToolUse) {\n        const toolUseMessageContent = [] as ClaudeToolResultContent[];\n\n        const toolUses: ClaudeToolUseContent[] = content.filter(content => content.type === \"tool_use\");\n        for (const toolUse of toolUses) {\n          const tool = tools.find(tool => tool.name === toolUse.name);\n          const node = nodes?.find((node: Node) => node.id === toolUse.name);\n          if (!tool || !node) {\n            logging.log(\"Failed to find tool:\");\n            logging.log(toolUse);\n            logging.log(node);\n            throw new Error(\"Failed to find tool\");\n          }\n          logging.log(\"Tool node: \", node.name);\n          // filter hallucinated inputs\n          const inputs = {} as Record<string, string>;\n          for (const [inputKey, inputValue] of Object.entries(toolUse.input)) {\n            if (node.inputs.properties[inputKey]) {\n              inputs[inputKey] = inputValue;\n            }\n          }\n          const toolResponse = await execute(node.label, inputs);\n          logging.log(\"Tool response: \", toolResponse);\n          toolUseMessageContent.push({\n            type: \"tool_result\",\n            tool_use_id: toolUse.id,\n            content: toolResponse ? JSON.stringify(toolResponse) : \"\",\n          });\n        }\n        request.messages.push({\n          role: \"user\",\n          content: toolUseMessageContent\n        });\n      }\n      requestCount++;\n      logging.log(`Claude request(${requestCount}):`, request);\n      response = await client.post(\"/messages\", request);\n      logging.log(`Claude response(${requestCount}): `, response.data);\n    } while (response && response.data && response.data.stop_reason !== \"end_turn\");\n\n    return {\n      response: response.data.content[0].text,\n      chatHistory: [...request.messages, { role: \"assistant\", content: response.data.content }],\n      data: response.data,\n      error: null,\n    }\n  } catch (error) {\n    logging.log(`Error: ${error}`);\n    return { error }\n  }\n}\n\ntype Node = {\n  label: string;\n  meta: {\n    id: string;\n    description: string;\n    name: string;\n    [key: string]: any;\n  };\n  inputs: {\n    type: string;\n    required: string[];\n    properties: Record<string, {\n      description: string;\n      buildship?: {\n        toBeAutoFilled?: boolean;\n        [key: string]: any;\n      }\n      [key: string]: any;\n    }>;\n  };\n  [key: string]: any;\n};\n\ntype ClaudeTool = {\n  name: string;\n  description: string;\n  input_schema: {\n    type: string;\n    properties: Record<string, {\n      type: string;\n      description: string;\n      enum?: string[];\n    }>;\n    required: string[];\n  };\n};\n\ntype ClaudeTextContent = {\n  type: \"text\";\n  text: string;\n};\n\ntype ClaudeToolUseContent = {\n  type: \"tool_use\",\n  id: string,\n  name: string,\n  input: Record<string, string>\n};\n\ntype ClaudeToolResultContent = {\n  type: \"tool_result\",\n  tool_use_id: string,\n  content: string\n};\n\ntype ClaudeMessage = {\n  role: \"user\" | \"assistant\",\n  content: ClaudeResponse[\"content\"]\n};\n\ntype ClaudeRequest = {\n  \"model\": string,\n  \"max_tokens\": number,\n  \"tools\": ClaudeTool[],\n  \"messages\": ClaudeMessage[]\n};\n\ntype ClaudeResponse = {\n  \"id\": string,\n  \"type\": \"message\",\n  \"role\": \"assistant\",\n  \"model\": string,\n  \"stop_sequence\": null,\n  \"usage\": { \"input_tokens\": number, \"output_tokens\": number },\n  \"content\": string | ClaudeTextContent[] | ClaudeToolUseContent[] | ClaudeToolResultContent[];\n  \"stop_reason\": \"tool_use\" | \"stop_sequence\" | \"end_turn\"\n};\n",
      "type": "script",
      "id": "6c80d420-0098-4499-a3b7-18a657fdf32b",
      "name": "Claude Assistant",
      "inputs": {
        "properties": {
          "maxTokens": {
            "description": "",
            "buildship": { "index": 4, "sensitive": false },
            "title": "Max Tokens",
            "type": "number",
            "pattern": "",
            "default": ""
          },
          "systemPrompt": {
            "pattern": "",
            "type": "string",
            "buildship": { "sensitive": false, "index": 1 },
            "description": "",
            "default": "",
            "title": "Instructions"
          },
          "claudeApiKey": {
            "title": "API Key",
            "type": "string",
            "description": "The OpenAI API key to use for authentication.",
            "pattern": "",
            "buildship": { "sensitive": true, "index": 0 }
          },
          "model": {
            "pattern": "",
            "type": "string",
            "default": "claude-3-opus-20240229",
            "description": "",
            "buildship": {
              "options": [
                { "label": "Claude 3 Opus", "value": "claude-3-opus-20240229" },
                { "label": "Claude 3 Sonnet", "value": "claude-3-sonnet-20240229" },
                { "value": "claude-3-haiku-20240307", "label": "Claude 3 Haiku" }
              ],
              "index": 4,
              "sensitive": false
            },
            "title": "Model",
            "enum": ["claude-3-opus-20240229", "claude-3-sonnet-20240229", "claude-3-haiku-20240307"]
          },
          "threadId": {
            "pattern": "",
            "title": "Thread Id",
            "type": "string",
            "description": "",
            "buildship": { "index": 5, "sensitive": false },
            "default": ""
          },
          "userPrompt": {
            "default": "",
            "type": "string",
            "pattern": "",
            "title": "User Prompt",
            "description": "",
            "buildship": { "index": 2, "sensitive": false }
          }
        },
        "type": "object",
        "required": ["maxTokens", "userPrompt", "claudeApiKey", "model", "systemPrompt"]
      },
      "subType": "assistant",
      "nodes": []
    },
    {
      "description": "The Return Node is used to return values from the workflow. It is generally the last node in the workflow. The return node is optional as the API can inherently return a 200 OK response by default. [Full Documentation](https://docs.buildship.com/core-nodes/return).",
      "type": "return",
      "inputs": {
        "properties": {
          "value": {
            "type": "string",
            "title": "Value",
            "description": "The value to return",
            "default": "",
            "buildship": { "index": 1 }
          },
          "status": {
            "type": "string",
            "title": "Status code",
            "enum": ["200", "201", "202", "204", "400", "401", "403", "404", "429", "500"],
            "default": "200",
            "description": "The HTTP status code to return",
            "buildship": {
              "options": [
                { "label": "OK (200)", "value": "200" },
                { "value": "201", "label": "Created (201)" },
                { "label": "Accepted (202)", "value": "202" },
                { "label": "Redirect (301)", "value": "301" },
                { "label": "No Content (204)", "value": "204" },
                { "value": "400", "label": "Bad Request (400)" },
                { "value": "401", "label": "Unauthorized (401)" },
                { "label": "Forbidden (403)", "value": "403" },
                { "label": "Not Found (404)", "value": "404" },
                { "label": "Too Many Requests (429)", "value": "429" },
                { "value": "500", "label": "Internal Server Error (500)" }
              ],
              "index": 0
            }
          },
          "cacheMaxAge": {
            "default": 0,
            "buildship": { "index": 2 },
            "description": "Set cache duration in seconds",
            "title": "Cache Time",
            "type": "number"
          }
        },
        "required": [],
        "type": "object"
      },
      "response": { "2XX": { "properties": {}, "type": "object" } },
      "label": "Return",
      "id": "6c5b9653-9fd6-445b-ba8c-1bdf04ff065c"
    }
  ],
  "trigger": {
    "output": {
      "buildship": {},
      "properties": {
        "headers": {
          "buildship": {},
          "description": "Headers of the request",
          "type": "object",
          "title": "Headers",
          "properties": {
            "authorization": {
              "title": "Authorization",
              "buildship": { "index": 1 },
              "description": "Authorization header",
              "type": "string"
            },
            "content-type": {
              "buildship": { "index": 0 },
              "title": "Content-Type",
              "description": "Content-Type of the request",
              "type": "string"
            }
          }
        },
        "body": {
          "title": "Body",
          "type": "object",
          "buildship": { "index": 1 },
          "description": "Body of the request"
        },
        "query": {
          "description": "Query parameters",
          "buildship": { "index": 0 },
          "type": "object",
          "title": "Query parameters"
        }
      },
      "title": "Request",
      "type": "object"
    },
    "request": {
      "buildship": {},
      "title": "Request",
      "required": [],
      "type": "object",
      "properties": {
        "body": {
          "type": "object",
          "buildship": {},
          "properties": {
            "threadId": { "description": "", "type": "string", "title": "Thread Id", "buildship": { "index": 0 } },
            "message": { "type": "string", "buildship": { "index": 0 }, "title": "Message", "description": "" }
          },
          "title": "Body",
          "description": "Body of the request"
        },
        "query": {
          "buildship": {},
          "title": "Query",
          "type": "object",
          "description": "Query parameters",
          "properties": {}
        },
        "headers": {
          "properties": {},
          "title": "Request Headers",
          "description": "Headers of the request",
          "type": "object",
          "buildship": {}
        }
      }
    },
    "live": true,
    "script": "",
    "groupId": null,
    "label": "Rest API Call",
    "id": "http",
    "testingSchema": [
      {
        "name": "endpointURL",
        "prefill": "endpointURL",
        "type": "shortText",
        "disabled": true,
        "label": "Endpoint URL"
      },
      { "name": "apiRequestData", "type": "apiRequestData", "prefill": "apiRequestData" }
    ],
    "instruction": { "bodyTemplate": "https://{{runtimeUrl}}/{{httpPath}}", "title": "Endpoint URL" },
    "inputs": {
      "required": ["method", "path"],
      "type": "object",
      "properties": {
        "path": {
          "description": "The path of the API Endpoint. Additionally, define the structure for the incoming API requests. [Learn more about API Specification here](https://docs.buildship.com/basics/api-spec#request-specification).",
          "title": "Path",
          "default": "/",
          "buildship": { "sensitive": false, "index": 0 },
          "pattern": "",
          "type": "string"
        },
        "method": {
          "title": "Method",
          "type": "string",
          "default": "GET",
          "buildship": {
            "index": 1,
            "options": [
              { "label": "GET", "value": "GET" },
              { "label": "POST", "value": "POST" },
              { "label": "PUT", "value": "PUT" },
              { "label": "DELETE", "value": "DELETE" }
            ],
            "sensitive": false
          },
          "enum": ["GET", "POST", "PUT", "DELETE"],
          "description": "The HTTP method for the incoming request.",
          "pattern": ""
        }
      }
    },
    "order": 1,
    "meta": {
      "description": "Create an API / HTTP endpoint as the trigger or starting point for your workflow. This endpoint can be used in other apps to run the workflow. [Full documentation](https://docs.buildship.com/trigger-nodes/rest-api)",
      "icon": {},
      "name": "Rest API Call",
      "id": "http"
    },
    "dependencies": {},
    "type": "http"
  },
  "nodeValues": {
    "6c5b9653-9fd6-445b-ba8c-1bdf04ff065c": {
      "cacheMaxAge": 0,
      "status": "200",
      "value": {
        "expression": "{\n  \"message\": ctx[\"root\"][\"6c80d420-0098-4499-a3b7-18a657fdf32b\"][\"response\"],\n  \"threadId\": \"\"\n}",
        "type": "javascript"
      }
    },
    "6c80d420-0098-4499-a3b7-18a657fdf32b": {
      "model": "claude-3-haiku-20240307",
      "claudeApiKey": "",
      "userPrompt": { "keys": ["request", "body", "message"] },
      "threadId": { "keys": ["request", "body", "threadId"] },
      "systemPrompt": "You are a personal history tutor. You will answer questions in a concise way. If no question is given, you should provide a historical fact. You must also engage with users by creating little quizzes with 4 possible options to answer in each question",
      "maxTokens": 1024
    },
    "http": { "path": "/claude-chat", "method": "POST" }
  },
  "notes": "<p>AI Assistant with conversational memory that you can chat with.</p><p><br></p><p>In this example of a tutor AI Assistant, it helps you with short plan of study for any given topic.</p><p><br></p><p>Try it using this TEST using the foll requgest body:</p><p><br></p><p>{</p><p>\"message\":\"Teach me about northern lights\"</p><p>}</p><p><br></p><p>Short Video: <a href=\"https://www.youtube.com/watch?v=YKAUY9hXzbI\" rel=\"noopener noreferrer\" target=\"_blank\">youtube.com/watch?v=YKAUY9hXzbI</a></p><p>Documentation: <a href=\"https://docs.buildship.com/ai-models/assistant#use-case-i-chat-with-assistant\" rel=\"noopener noreferrer\" target=\"_blank\">docs.buildship.com/ai-models/assistant</a></p>"
}
