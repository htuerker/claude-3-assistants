{
  "nodes": [
    {
      "integrations": [],
      "inputs": {
        "properties": {
          "claudeApiKey": {
            "type": "string",
            "description": "The OpenAI API key to use for authentication.",
            "pattern": "",
            "title": "API Key",
            "buildship": { "index": 0, "sensitive": true }
          },
          "threadId": {
            "buildship": { "sensitive": false, "index": 5 },
            "description": "",
            "type": "string",
            "default": "",
            "title": "Thread Id",
            "pattern": ""
          },
          "userPrompt": {
            "buildship": { "index": 2, "sensitive": false },
            "pattern": "",
            "title": "User Prompt",
            "default": "",
            "type": "string",
            "description": ""
          },
          "model": {
            "title": "Model",
            "pattern": "",
            "description": "",
            "enum": ["claude-3-opus-20240229", "claude-3-sonnet-20240229", "claude-3-haiku-20240307"],
            "default": "claude-3-opus-20240229",
            "buildship": {
              "sensitive": false,
              "options": [
                { "value": "claude-3-opus-20240229", "label": "Claude 3 Opus" },
                { "value": "claude-3-sonnet-20240229", "label": "Claude 3 Sonnet" },
                { "label": "Claude 3 Haiku", "value": "claude-3-haiku-20240307" }
              ],
              "index": 4
            },
            "type": "string"
          },
          "systemPrompt": {
            "type": "string",
            "default": "",
            "pattern": "",
            "description": "",
            "buildship": { "sensitive": false, "index": 1 },
            "title": "Instructions"
          },
          "maxTokens": {
            "type": "number",
            "description": "",
            "title": "Max Tokens",
            "pattern": "",
            "default": "",
            "buildship": { "index": 4, "sensitive": false }
          }
        },
        "type": "object",
        "required": ["maxTokens", "userPrompt", "claudeApiKey", "model", "systemPrompt"]
      },
      "nodes": [
        {
          "name": "access menu",
          "integrations": [],
          "script": "import { Firestore } from '@google-cloud/firestore';\n\nexport default async function firestoreQueryDocuments(\n  {\n    collection\n  },\n) {\n  const firestore = new Firestore(undefined);\n\n  let query = firestore.collection(collection);\n\n\n  let snapshot = await query.limit(100).get();\n  return snapshot.docs.map(doc => ({\n    id: doc.id,\n    data: doc.data()\n  }));\n}\n",
          "label": "access menu",
          "type": "script",
          "inputs": {
            "type": "object",
            "properties": {
              "collection": {
                "buildship": { "index": 0 },
                "type": "string",
                "title": "Collection Name",
                "description": "The name of the BuildShip collection"
              }
            },
            "required": ["collection", "filters"]
          },
          "onFail": null,
          "dependencies": { "@google-cloud/firestore": "7.1.0" },
          "_libRef": {
            "libType": "public",
            "version": "1.0.2",
            "integrity": "v3:44572885b08be8ac99f1f10eea882c16",
            "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/buildship-firestore-collection-query/1.0.2/build.cjs",
            "isDirty": true,
            "libNodeRefId": "@buildship/buildship-firestore-collection-query"
          },
          "meta": {
            "name": "access menu",
            "icon": {
              "type": "URL",
              "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2FIcon.png?alt=media&token=878ed11b-1cf2-45d8-9951-7e95a16d26af&_gl=1*1ld9l67*_ga*NzgyMDk5NjMxLjE2OTY4NzE3ODU.*_ga_CW55HF8NVT*MTY5NjkyMzc5OC4yLjEuMTY5NjkyMzgzMy4yNS4wLjA."
            },
            "id": "buildship-firestore-collection-query",
            "description": "get the list of dishes from restaurant menu "
          },
          "description": "get the list of dishes from restaurant menu ",
          "output": {
            "title": "Documents",
            "properties": {
              "id": { "type": "string", "buildship": { "index": 1 }, "title": "Document ID" },
              "data": { "title": "Document Data", "type": "object", "buildship": { "index": 0 } }
            },
            "type": "array",
            "buildship": {},
            "description": "The array of documents that match the query"
          },
          "id": "4c3db403-01cc-4a1c-8d81-2bdbbda0e45f"
        }
      ],
      "onFail": null,
      "dependencies": { "axios": "0.28.1" },
      "name": "Claude Assistant",
      "id": "3f517c4d-b081-4bc7-89e8-be46f4ed6a8d",
      "subType": "assistant",
      "script": "import axios from \"axios\";\n\nconst nodeToClaudeTool: (node: Node) => ClaudeTool = (node) => {\n  return {\n    // Use node.id as the name of the tool. Spaces are not allowed.\n    name: node.id,\n    description: node.meta.description ?? \"\",\n    input_schema: {\n      type: \"object\",\n      properties: Object.entries(node.inputs.properties)\n        .reduce((properties, [name, value]) => {\n          if (value.buildship && !value.buildship.toBeAutoFilled) return properties;\n          return {\n            ...properties, [name]: {\n              type: value.type,\n              enum: value.enum,\n              description: value.description\n            }\n          }\n        }, {}),\n      required: Object.entries(node.inputs.properties).map(([name, value]) => {\n        if (value.buildship && value.buildship.toBeAutoFilled && node.inputs.required.includes(name)) return name;\n        return false;\n      }).filter(Boolean) as string[],\n    },\n  };\n}\n\ntype Params = {\n  claudeApiKey: string;\n  model: string;\n  maxTokens: number;\n  userPrompt: string;\n  systemPrompt?: string;\n  chatHistory?: ClaudeMessage[];\n};\n\nexport default async function assistant(\n  { claudeApiKey, model, maxTokens, userPrompt, systemPrompt, chatHistory }: Params,\n  { logging, execute, nodes }: any\n) {\n  const version = \"2023-06-01\";\n  const beta = \"tools-2024-04-04\";\n\n  const client = axios.create({\n    baseURL: \"https://api.anthropic.com/v1\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'x-api-key': claudeApiKey,\n      'anthropic-version': version,\n      'anthropic-beta': beta\n    }\n  });\n\n  const tools: ClaudeTool[] = nodes?.map(nodeToClaudeTool) ?? [];\n\n  const initialMessages = [\n    ...(chatHistory ?? []),\n    {\n      \"role\": \"user\",\n      \"content\": userPrompt,\n    }];\n\n  const baseRequest = {\n    \"model\": model,\n    \"max_tokens\": maxTokens,\n    \"system\": systemPrompt || \"\",\n    \"tools\": tools,\n    \"messages\": initialMessages\n  } as ClaudeRequest;\n\n  try {\n    let request = { ...baseRequest };\n    let requestCount = 1;\n    logging.log(`Claude request(${requestCount}):`, baseRequest);\n    let response = await client.post(\"/messages\", request);\n    logging.log(`Claude response(${requestCount}): `, response.data);\n\n    do {\n      if (response.data.type === \"error\") {\n        throw response.data.error;\n      }\n\n      let result = response.data;\n\n      const isEndTurn = result.stop_reason === \"end_turn\";\n      if (isEndTurn) break;\n\n      const content = result.content;\n      request.messages.push({ role: \"assistant\", content });\n\n      const isToolUse = result.stop_reason === \"tool_use\" && content instanceof Array;\n      if (isToolUse) {\n        const toolUseMessageContent = [] as ClaudeToolResultContent[];\n\n        const toolUses: ClaudeToolUseContent[] = content.filter(content => content.type === \"tool_use\");\n        for (const toolUse of toolUses) {\n          const tool = tools.find(tool => tool.name === toolUse.name);\n          const node = nodes?.find((node: Node) => node.id === toolUse.name);\n          if (!tool || !node) {\n            logging.log(\"Failed to find tool:\");\n            logging.log(toolUse);\n            logging.log(node);\n            throw new Error(\"Failed to find tool\");\n          }\n          logging.log(\"Tool node: \", node.name);\n          // filter hallucinated inputs\n          const inputs = {} as Record<string, string>;\n          for (const [inputKey, inputValue] of Object.entries(toolUse.input)) {\n            if (node.inputs.properties[inputKey]) {\n              inputs[inputKey] = inputValue;\n            }\n          }\n          const toolResponse = await execute(node.label, inputs);\n          logging.log(\"Tool response: \", toolResponse);\n          toolUseMessageContent.push({\n            type: \"tool_result\",\n            tool_use_id: toolUse.id,\n            content: toolResponse ? JSON.stringify(toolResponse) : \"\",\n          });\n        }\n        request.messages.push({\n          role: \"user\",\n          content: toolUseMessageContent\n        });\n      }\n      requestCount++;\n      logging.log(`Claude request(${requestCount}):`, request);\n      response = await client.post(\"/messages\", request);\n      logging.log(`Claude response(${requestCount}): `, response.data);\n    } while (response && response.data && response.data.stop_reason !== \"end_turn\");\n\n    return {\n      response: response.data.content[0].text,\n      chatHistory: [...request.messages, { role: \"assistant\", content: response.data.content }],\n      data: response.data,\n      error: null,\n    }\n  } catch (error) {\n    logging.log(`Error: ${error}`);\n    return { error }\n  }\n}\n\ntype Node = {\n  label: string;\n  meta: {\n    id: string;\n    description: string;\n    name: string;\n    [key: string]: any;\n  };\n  inputs: {\n    type: string;\n    required: string[];\n    properties: Record<string, {\n      description: string;\n      buildship?: {\n        toBeAutoFilled?: boolean;\n        [key: string]: any;\n      }\n      [key: string]: any;\n    }>;\n  };\n  [key: string]: any;\n};\n\ntype ClaudeTool = {\n  name: string;\n  description: string;\n  input_schema: {\n    type: string;\n    properties: Record<string, {\n      type: string;\n      description: string;\n      enum?: string[];\n    }>;\n    required: string[];\n  };\n};\n\ntype ClaudeTextContent = {\n  type: \"text\";\n  text: string;\n};\n\ntype ClaudeToolUseContent = {\n  type: \"tool_use\",\n  id: string,\n  name: string,\n  input: Record<string, string>\n};\n\ntype ClaudeToolResultContent = {\n  type: \"tool_result\",\n  tool_use_id: string,\n  content: string\n};\n\ntype ClaudeMessage = {\n  role: \"user\" | \"assistant\",\n  content: ClaudeResponse[\"content\"]\n};\n\ntype ClaudeRequest = {\n  \"model\": string,\n  \"max_tokens\": number,\n  \"tools\": ClaudeTool[],\n  \"messages\": ClaudeMessage[]\n};\n\ntype ClaudeResponse = {\n  \"id\": string,\n  \"type\": \"message\",\n  \"role\": \"assistant\",\n  \"model\": string,\n  \"stop_sequence\": null,\n  \"usage\": { \"input_tokens\": number, \"output_tokens\": number },\n  \"content\": string | ClaudeTextContent[] | ClaudeToolUseContent[] | ClaudeToolResultContent[];\n  \"stop_reason\": \"tool_use\" | \"stop_sequence\" | \"end_turn\"\n};\n",
      "meta": {
        "id": "claude-assistant-node",
        "description": "",
        "name": "Claude Assistant",
        "icon": {
          "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fanthropic.png?alt=media&token=ec0eb8dc-f0d4-4f97-a144-023f1aa8118e",
          "type": "URL"
        }
      },
      "type": "script",
      "label": "Claude Assistant",
      "output": {
        "description": "",
        "properties": {
          "data": {
            "buildship": { "index": 3 },
            "type": "object",
            "title": "Data",
            "properties": {},
            "description": ""
          },
          "error": { "title": "Error", "description": "", "buildship": { "index": 2 } },
          "chatHistory": { "description": "", "title": "Chat History", "type": "array", "buildship": { "index": 1 } },
          "response": { "buildship": { "index": 0 }, "type": "string", "title": "Response", "description": "" }
        },
        "title": "",
        "type": "object",
        "buildship": { "index": 0 }
      }
    },
    {
      "inputs": {
        "properties": {
          "cacheMaxAge": {
            "buildship": { "index": 2 },
            "type": "number",
            "description": "Set cache duration in seconds",
            "default": 0,
            "title": "Cache Time"
          },
          "status": {
            "enum": ["200", "201", "202", "204", "400", "401", "403", "404", "429", "500"],
            "buildship": {
              "index": 0,
              "options": [
                { "label": "OK (200)", "value": "200" },
                { "label": "Created (201)", "value": "201" },
                { "label": "Accepted (202)", "value": "202" },
                { "label": "Redirect (301)", "value": "301" },
                { "value": "204", "label": "No Content (204)" },
                { "label": "Bad Request (400)", "value": "400" },
                { "value": "401", "label": "Unauthorized (401)" },
                { "label": "Forbidden (403)", "value": "403" },
                { "value": "404", "label": "Not Found (404)" },
                { "value": "429", "label": "Too Many Requests (429)" },
                { "value": "500", "label": "Internal Server Error (500)" }
              ]
            },
            "description": "The HTTP status code to return",
            "title": "Status code",
            "type": "string",
            "default": "200"
          },
          "value": {
            "default": "",
            "title": "Value",
            "description": "The value to return",
            "type": "string",
            "buildship": { "index": 1 }
          }
        },
        "required": [],
        "type": "object"
      },
      "label": "Return",
      "response": { "2XX": { "properties": {}, "type": "object" } },
      "id": "78be0d64-1cb8-494b-9749-b329e2728979",
      "description": "The Return Node is used to return values from the workflow. It is generally the last node in the workflow. The return node is optional as the API can inherently return a 200 OK response by default. [Full Documentation](https://docs.buildship.com/core-nodes/return).",
      "type": "return"
    }
  ],
  "trigger": {
    "dependencies": {},
    "id": "http",
    "order": 1,
    "meta": {
      "description": "Create an API / HTTP endpoint as the trigger or starting point for your workflow. This endpoint can be used in other apps to run the workflow. [Full documentation](https://docs.buildship.com/trigger-nodes/rest-api)",
      "icon": {},
      "name": "Rest API Call",
      "id": "http"
    },
    "inputs": {
      "properties": {
        "path": {
          "default": "/",
          "title": "Path",
          "pattern": "",
          "description": "The path of the API Endpoint. Additionally, define the structure for the incoming API requests. [Learn more about API Specification here](https://docs.buildship.com/basics/api-spec#request-specification).",
          "type": "string",
          "buildship": { "index": 0, "sensitive": false }
        },
        "method": {
          "description": "The HTTP method for the incoming request.",
          "buildship": {
            "index": 1,
            "options": [
              { "value": "GET", "label": "GET" },
              { "label": "POST", "value": "POST" },
              { "label": "PUT", "value": "PUT" },
              { "label": "DELETE", "value": "DELETE" }
            ],
            "sensitive": false
          },
          "pattern": "",
          "default": "GET",
          "enum": ["GET", "POST", "PUT", "DELETE"],
          "title": "Method",
          "type": "string"
        }
      },
      "type": "object",
      "required": ["method", "path"]
    },
    "label": "Rest API Call",
    "output": {
      "properties": {
        "body": {
          "buildship": { "index": 1 },
          "type": "object",
          "title": "Body",
          "description": "Body of the request"
        },
        "headers": {
          "type": "object",
          "properties": {
            "authorization": {
              "buildship": { "index": 1 },
              "description": "Authorization header",
              "type": "string",
              "title": "Authorization"
            },
            "content-type": {
              "title": "Content-Type",
              "type": "string",
              "description": "Content-Type of the request",
              "buildship": { "index": 0 }
            }
          },
          "title": "Headers",
          "buildship": {},
          "description": "Headers of the request"
        },
        "query": {
          "description": "Query parameters",
          "title": "Query parameters",
          "buildship": { "index": 0 },
          "type": "object"
        }
      },
      "buildship": {},
      "title": "Request",
      "type": "object"
    },
    "instruction": { "bodyTemplate": "https://{{runtimeUrl}}/{{httpPath}}", "title": "Endpoint URL" },
    "type": "http",
    "request": {
      "type": "object",
      "properties": {
        "headers": {
          "properties": {},
          "title": "Request Headers",
          "type": "object",
          "buildship": {},
          "description": "Headers of the request"
        },
        "body": {
          "buildship": {},
          "properties": {
            "threadId": { "buildship": { "index": 0 }, "type": "string", "title": "Thread Id", "description": "" },
            "message": { "type": "string", "description": "", "buildship": { "index": 0 }, "title": "Message" }
          },
          "title": "Body",
          "type": "object",
          "description": "Body of the request"
        },
        "query": {
          "title": "Query",
          "description": "Query parameters",
          "buildship": {},
          "properties": {},
          "type": "object"
        }
      },
      "title": "Request",
      "required": [],
      "buildship": {}
    },
    "testingSchema": [
      {
        "label": "Endpoint URL",
        "disabled": true,
        "prefill": "endpointURL",
        "type": "shortText",
        "name": "endpointURL"
      },
      { "prefill": "apiRequestData", "type": "apiRequestData", "name": "apiRequestData" }
    ],
    "script": "",
    "live": true,
    "groupId": null
  },
  "nodeValues": {
    "http": { "path": "/claude-chat-with-your-data", "method": "POST" },
    "4c3db403-01cc-4a1c-8d81-2bdbbda0e45f": { "collection": "" },
    "78be0d64-1cb8-494b-9749-b329e2728979": {
      "value": {
        "type": "javascript",
        "expression": "{\n  \"message\": ctx[\"root\"][\"3f517c4d-b081-4bc7-89e8-be46f4ed6a8d\"][\"response\"],\n  \"threadId\": \"\"\n}"
      },
      "status": "200",
      "cacheMaxAge": 0
    },
    "3f517c4d-b081-4bc7-89e8-be46f4ed6a8d": {
      "systemPrompt": "You are an expert waitress at a fine dining restaurant. You are familiar with all of the dishes on the menu and are able to recommend the best dishes to customers based on their preferences. You also include possible wine pairings and offer up dessert options when needed.When you are given tools to use, you must use them following the guidelines for each tool.Guidelines:- When the user asks for a menu recommendation you must use 'access menu' get the list of dishes from restaurant menu ",
      "userPrompt": { "keys": ["request", "body", "message"] },
      "claudeApiKey": "",
      "model": "claude-3-haiku-20240307",
      "threadId": { "keys": ["request", "body", "threadId"] },
      "maxTokens": 1024
    }
  },
  "notes": "<p>An assistant that gives you plans for travel in a city. Try it using this test request body:</p><p><br></p><p>{</p><p>\"message\":\"I want to have a dessert\"</p><p>}</p><p><br></p><p>Short Video: <a href=\"https://www.youtube.com/watch?v=OiQJQMk_2mo\" rel=\"noopener noreferrer\" target=\"_blank\">youtube.com/watch?v=OiQJQMk_2mo</a></p><p>Documentation: <a href=\"https://docs.buildship.com/ai-models/assistant#use-case-i-chat-with-assistant\" rel=\"noopener noreferrer\" target=\"_blank\">docs.buildship.com/ai-models/assistant</a></p>"
}
