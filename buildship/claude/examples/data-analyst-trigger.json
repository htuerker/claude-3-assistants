{
  "nodes": [
    {
      "integrations": [],
      "script": "import axios from \"axios\";\n\nconst nodeToClaudeTool = (node) => {\n  return {\n    // Use node.id as the name of the tool. Spaces are not allowed.\n    name: node.id,\n    description: node.meta.description ?? \"\",\n    input_schema: {\n      type: \"object\",\n      properties: Object.entries(node.inputs.properties)\n        .reduce((properties, [name, value]) => {\n          if (value.buildship && !value.buildship.toBeAutoFilled) return properties;\n          return {\n            ...properties, [name]: {\n              type: value.type,\n              enum: value.enum,\n              description: value.description\n            }\n          }\n        }, {}),\n      required: Object.entries(node.inputs.properties).map(([name, value]) => {\n          if (value.buildship && value.buildship.toBeAutoFilled && node.inputs.required.includes(name)) return name;\n          return false;\n        }).filter(Boolean)\n    },\n  };\n}\n\nexport default async function assistant(\n  { claudeApiKey, model, maxTokens, userPrompt, instructions, chatHistory },\n  { logging, execute, nodes }\n) {\n  // TODO\n  const version = \"2023-06-01\";\n  const beta = \"tools-2024-04-04\";\n\n  const client = axios.create({\n    baseURL: \"https://api.anthropic.com/v1\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'x-api-key': claudeApiKey,\n      'anthropic-version': version,\n      'anthropic-beta': beta\n    }\n  });\n\n  const tools = nodes?.map(nodeToClaudeTool) ?? [];\n\n  const initialMessages = [\n    ...(chatHistory ?? []),\n    {\n      \"role\": \"user\",\n      \"content\": userPrompt,\n    }];\n\n  const baseRequest = {\n    \"model\": model,\n    \"max_tokens\": maxTokens,\n    \"system\": instructions || \"\",\n    \"tools\": tools,\n    \"messages\": initialMessages\n  };\n\n  try {\n    let request = { ...baseRequest };\n    let requestCount = 1;\n    logging.log(`Claude request(${requestCount}):`, baseRequest);\n    let response = await client.post(\"/messages\", request);\n    logging.log(`Claude response(${requestCount}): `, response.data);\n\n    do {\n      if (response.status !== 200) {\n        throw response.error;\n      }\n      if (response.data.type === \"error\") {\n          throw response.data.error;\n      }\n\n      let result = response.data;\n\n      const isEndTurn = result.stop_reason === \"end_turn\";\n      if(isEndTurn) break;\n      \n      const content = result.content;\n      request.messages.push({ role: \"assistant\", content });\n      \n      const isToolUse = result.stop_reason === \"tool_use\" && content instanceof Array;\n      if (isToolUse) {\n        const toolUseMessage = {\n          role: \"user\",\n          content: []\n        };\n        const toolUses = content.filter(content => content.type === \"tool_use\");\n        for (const toolUse of toolUses) {\n          const tool = tools.find(tool => tool.name === toolUse.name);\n          const node = nodes?.find(node => node.id === toolUse.name);\n          if (!tool || !node) {\n            logging.log(\"Failed to find tool:\");\n            logging.log(toolUse);\n            logging.log(node);\n            throw new Error(\"Failed to find tool\");\n          }\n          logging.log(\"Tool node: \", node.name);\n          const toolResponse = await execute(node.label, toolUse.input);\n          logging.log(\"Tool response: \", toolResponse);\n          toolUseMessage.content.push({\n            type: \"tool_result\",\n            tool_use_id: toolUse.id,\n            content: toolResponse ? JSON.stringify(toolResponse) : \"\",\n          });\n        }\n        request.messages.push(toolUseMessage);\n      }\n\n      requestCount++;\n      logging.log(`Claude request(${requestCount}):`, request);\n      response = await client.post(\"/messages\", request);\n      logging.log(`Claude response(${requestCount}): `, response.data);\n    } while (response && response.data && response.data.stop_reason !== \"end_turn\");\n\n    return {\n      response: response.data.content[0].text,\n      chatHistory: [...request.messages, { role: \"assistant\", content: response.data.content }],\n      data: response.data,\n      error: null,\n    }\n  } catch (error) {\n    logging.log(\"Error\");\n    logging.log(error.config);\n    logging.log(error.message);\n    return { error: error.message }\n  }\n}",
      "type": "script",
      "onFail": null,
      "name": "Claude Assistant",
      "inputs": {
        "properties": {
          "userPrompt": {
            "pattern": "",
            "buildship": { "index": 2, "sensitive": false },
            "title": "User Prompt",
            "default": "",
            "type": "string",
            "description": ""
          },
          "claudeApiKey": {
            "description": "The OpenAI API key to use for authentication.",
            "pattern": "",
            "buildship": { "index": 0, "sensitive": true },
            "type": "string",
            "title": "API Key"
          },
          "maxTokens": {
            "type": "number",
            "description": "",
            "pattern": "",
            "default": "",
            "title": "Max Tokens",
            "buildship": { "index": 4, "sensitive": false }
          },
          "instructions": {
            "pattern": "",
            "type": "string",
            "title": "Instructions",
            "buildship": { "index": 1, "sensitive": false },
            "description": "",
            "default": ""
          },
          "model": {
            "default": "claude-3-opus-20240229",
            "pattern": "",
            "description": "",
            "type": "string",
            "title": "Model",
            "enum": ["claude-3-opus-20240229", "claude-3-sonnet-20240229", "claude-3-haiku-20240307"],
            "buildship": {
              "sensitive": false,
              "options": [
                { "value": "claude-3-opus-20240229", "label": "Claude 3 Opus" },
                { "value": "claude-3-sonnet-20240229", "label": "Claude 3 Sonnet" },
                { "label": "Claude 3 Haiku", "value": "claude-3-haiku-20240307" }
              ],
              "index": 4
            }
          },
          "chatHistory": {
            "type": "array",
            "pattern": "",
            "description": "",
            "buildship": { "sensitive": false, "index": 5 },
            "title": "Chat History",
            "default": []
          }
        },
        "required": ["maxTokens", "userPrompt", "claudeApiKey", "instructions", "model"],
        "type": "object"
      },
      "output": {
        "title": "",
        "description": "",
        "type": "object",
        "properties": {
          "chatHistory": { "title": "Chat History", "buildship": { "index": 1 }, "type": "array", "description": "" },
          "response": { "description": "", "title": "Response", "buildship": { "index": 0 }, "type": "string" },
          "error": { "description": "", "title": "Error", "buildship": { "index": 2 } },
          "data": {
            "description": "",
            "title": "Data",
            "buildship": { "index": 3 },
            "properties": {},
            "type": "object"
          }
        },
        "buildship": { "index": 0 }
      },
      "meta": {
        "description": "",
        "id": "claude-assistant-node",
        "icon": {
          "type": "URL",
          "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fanthropic.png?alt=media&token=ec0eb8dc-f0d4-4f97-a144-023f1aa8118e"
        },
        "name": "Claude Assistant"
      },
      "label": "Claude Assistant",
      "nodes": [
        {
          "script": "import fetch from 'node-fetch';\n\nexport default async function fetchGoogleSpreadsheet({\n    spreadsheetUrl,\n    ranges\n}, {\n    auth,\n    logging\n}) {\n    const { access_token } = await auth.getToken();\n\n    // Extracting spreadsheetId from the URL\n    const regex = /\\/spreadsheets\\/d\\/([a-zA-Z0-9-_]+)/;\n    const match = spreadsheetUrl.match(regex);\n    if (!match) {\n        throw new Error('Invalid spreadsheet URL');\n    }\n    const spreadsheetId = match[1];\n\n  \n    const response = await fetch(`https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${ranges}`, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${access_token}`\n        }\n    });\n    const data = await response.json();\n    return data;\n}\n",
          "type": "script",
          "name": "Get Sheets",
          "output": {
            "title": "Spreadsheet Data",
            "type": "object",
            "description": "The data of the fetched Google Spreadsheet",
            "buildship": {}
          },
          "onFail": null,
          "label": "Get Sheets",
          "inputs": {
            "required": ["apiKey", "includeGridData", "spreadsheetUrl", "ranges"],
            "type": "object",
            "properties": {
              "ranges": {
                "default": [],
                "buildship": { "sensitive": false, "index": 1 },
                "title": "Ranges",
                "type": "string",
                "pattern": "",
                "description": "The ranges to retrieve from the spreadsheet.\n\n**SAMPLE INPUT:**\n```\n[\"Sheet1\"]\n```"
              },
              "spreadsheetUrl": {
                "title": "Sheet URL",
                "buildship": { "index": 0, "sensitive": false },
                "pattern": "",
                "type": "string",
                "description": "The URL of the Google Spreadsheet to fetch. [Refer API Documentation](https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/create).\n\nTIP ðŸ’¡: Available in the following format in your Google Sheets: `https://docs.google.com/spreadsheets/d/spreadsheet-id/edit`",
                "default": ""
              }
            }
          },
          "_libRef": {
            "libType": "public",
            "isDirty": true,
            "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/oauth-gsheets-get-sheet/1.0.3/build.cjs",
            "libNodeRefId": "@buildship/oauth-gsheets-get-sheet",
            "version": "1.0.3",
            "integrity": "v3:f8f3b15ffb6cca5de72ce53e98a588b5"
          },
          "dependencies": { "node-fetch": "2.7.0" },
          "id": "3db82033-8d54-4b83-95eb-c4d220e3189e",
          "meta": {
            "description": "Fetch a Google Spreadsheet using the Google Sheets API",
            "name": "Get Sheets",
            "id": "oauth-gsheets-get-sheet",
            "icon": {
              "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2FGoogleSheets.png?alt=media&token=89b3cfec-6746-43da-a404-5d20adb60472",
              "type": "URL"
            }
          },
          "integrations": ["gsheets"]
        }
      ],
      "dependencies": { "axios": "0.28.1" },
      "id": "72aa70ef-b05a-4785-a62c-10891ee2855a",
      "subType": "assistant"
    },
    {
      "id": "17255b32-c028-4019-955d-8d2bef73f646",
      "response": {
        "200": {
          "buildship": { "index": 0 },
          "description": "",
          "type": "object",
          "title": "",
          "properties": {
            "error": { "buildship": { "index": 2 }, "title": "Error", "description": "" },
            "chatHistory": { "title": "Chat History", "buildship": { "index": 1 }, "type": "array", "description": "" },
            "response": { "type": "string", "description": "", "buildship": { "index": 0 }, "title": "Response" },
            "data": {
              "title": "Data",
              "type": "object",
              "description": "",
              "buildship": { "index": 3 },
              "properties": {}
            }
          }
        }
      },
      "inputs": {
        "type": "object",
        "properties": {
          "cacheMaxAge": {
            "description": "Set cache duration in seconds",
            "title": "Cache Time",
            "type": "number",
            "buildship": { "index": 2 },
            "default": 0
          },
          "status": {
            "title": "Status code",
            "enum": ["200", "201", "202", "204", "400", "401", "403", "404", "500"],
            "description": "The HTTP status code to return",
            "default": "200",
            "type": "string",
            "buildship": {
              "options": [
                { "value": "200", "label": "OK (200)" },
                { "value": "201", "label": "Created (201)" },
                { "value": "202", "label": "Accepted (202)" },
                { "label": "Redirect (301)", "value": "301" },
                { "label": "No Content (204)", "value": "204" },
                { "label": "Bad Request (400)", "value": "400" },
                { "value": "401", "label": "Unauthorized (401)" },
                { "value": "403", "label": "Forbidden (403)" },
                { "value": "404", "label": "Not Found (404)" },
                { "value": "500", "label": "Internal Server Error (500)" }
              ],
              "index": 0
            }
          },
          "value": {
            "buildship": { "index": 1 },
            "description": "The value to return",
            "default": "",
            "title": "Value",
            "type": "string"
          }
        },
        "required": []
      },
      "label": "Return",
      "description": "The Return Node is used to return values from the workflow. It is generally the last node in the workflow. The return node is optional as the API can inherently return a 200 OK response by default. [Full Documentation](https://docs.buildship.com/core-nodes/return).",
      "type": "return"
    }
  ],
  "trigger": {
    "type": "http",
    "meta": {
      "description": "Create an API / HTTP endpoint as the trigger or starting point for your workflow. This endpoint can be used in other apps to run the workflow. [Full documentation](https://docs.buildship.com/trigger-nodes/rest-api)",
      "name": "Rest API Call",
      "icon": {},
      "id": "http"
    },
    "output": {
      "type": "object",
      "buildship": {},
      "properties": {
        "headers": {
          "title": "Headers",
          "properties": {
            "authorization": {
              "description": "Authorization header",
              "type": "string",
              "title": "Authorization",
              "buildship": { "index": 1 }
            },
            "content-type": {
              "buildship": { "index": 0 },
              "type": "string",
              "title": "Content-Type",
              "description": "Content-Type of the request"
            }
          },
          "description": "Headers of the request",
          "type": "object",
          "buildship": {}
        },
        "query": {
          "title": "Query parameters",
          "type": "object",
          "description": "Query parameters",
          "buildship": { "index": 0 }
        },
        "body": { "type": "object", "description": "Body of the request", "title": "Body", "buildship": { "index": 1 } }
      },
      "title": "Request"
    },
    "testingSchema": [
      {
        "type": "shortText",
        "label": "Endpoint URL",
        "disabled": true,
        "prefill": "endpointURL",
        "name": "endpointURL"
      },
      { "type": "apiRequestData", "name": "apiRequestData", "prefill": "apiRequestData" }
    ],
    "live": true,
    "inputs": {
      "required": ["method", "path"],
      "properties": {
        "method": {
          "type": "string",
          "description": "The HTTP method for the incoming request.",
          "title": "Method",
          "default": "GET",
          "enum": ["GET", "POST", "PUT", "DELETE"],
          "pattern": "",
          "buildship": {
            "options": [
              { "value": "GET", "label": "GET" },
              { "label": "POST", "value": "POST" },
              { "label": "PUT", "value": "PUT" },
              { "value": "DELETE", "label": "DELETE" }
            ],
            "index": 1,
            "sensitive": false
          }
        },
        "path": {
          "type": "string",
          "pattern": "",
          "default": "/",
          "buildship": { "index": 0, "sensitive": false },
          "title": "Path",
          "description": "The path of the API Endpoint. Additionally, define the structure for the incoming API requests. [Learn more about API Specification here](https://docs.buildship.com/basics/api-spec#request-specification)."
        }
      },
      "type": "object"
    },
    "label": "Rest API Call",
    "instruction": { "bodyTemplate": "https://{{runtimeUrl}}/{{httpPath}}", "title": "Endpoint URL" },
    "script": "",
    "id": "http",
    "request": {
      "buildship": {},
      "title": "Request",
      "type": "object",
      "properties": {
        "body": {
          "type": "object",
          "properties": {
            "threadId": { "title": "threadId", "description": "", "buildship": { "index": 1 }, "type": "string" },
            "message": { "description": "", "buildship": { "index": 0 }, "type": "string", "title": "message" }
          },
          "description": "Body of the request",
          "buildship": {},
          "title": "Body"
        },
        "headers": {
          "type": "object",
          "description": "Headers of the request",
          "properties": {},
          "title": "Request Headers",
          "buildship": {}
        },
        "query": {
          "buildship": {},
          "type": "object",
          "description": "Query parameters",
          "title": "Query",
          "properties": {}
        }
      },
      "required": []
    },
    "dependencies": {}
  },
  "nodeValues": {
    "61639b8f-01f6-4a77-8e09-3e306352f3ff": {
      "integrations": { "gsheets": "gsheets;;han.tuerker@gmail.com" },
      "spreadsheetUrl": "https://docs.google.com/spreadsheets/d/1Z6El2jk0D8Ph_Evk9LzL3swWkLqdjoR6eirjTBjBLtY/edit#gid=0",
      "ranges": "Sheet1"
    },
    "http": { "path": "/claude-talk-to-survey", "method": "POST" },
    "72aa70ef-b05a-4785-a62c-10891ee2855a": {
      "chatHistory": {
        "expression": "ctx[\"root\"][\"request\"][\"body\"].chatHistory",
        "hasErrors": false,
        "type": "javascript"
      },
      "instructions": "You are a Data Insight Analyst. You should be concise and accurate provide accurate analysis, ensuring that its interpretations and groupings are well-supported by the data. You have a formal, professional tone, focusing on providing concise, evidence-based responses. When additional information is needed for a comprehensive analysis, you will request more data rather than making assumptions. You should avoid speculation and you should provide precise, relevant analytical insights, tailored to enhance the user's understanding of the dataWhen you are given tools to use, you must use them following the guidelines for each tool.Guidelines:- when you start, you must use 'Get Sheets' to access user survey data from Google spreadsheets, the tool do not require any parameter such as spreadsheet id etc.",
      "userPrompt": {
        "expression": "ctx[\"root\"][\"request\"][\"body\"].message",
        "type": "javascript",
        "hasErrors": false
      },
      "model": "claude-3-haiku-20240307",
      "maxTokens": 1024,
      "claudeApiKey": { "secretName": "claude-harini" }
    },
    "8b0ec8e5-e6f3-4fde-aeb5-83f88194f865": {
      "chatHistory": { "type": "javascript", "expression": "[]" },
      "model": "claude-3-opus-20240229",
      "maxTokens": 1024,
      "instructions": "You are a Data Insight Analyst. You should be concise and accurate provide accurate analysis, ensuring that its interpretations and groupings are well-supported by the data. You have a formal, professional tone, focusing on providing concise, evidence-based responses. When additional information is needed for a comprehensive analysis, you will request more data rather than making assumptions. You should avoid speculation and you should provide precise, relevant analytical insights, tailored to enhance the user's understanding of the dataWhen you are given tools to use, you must use them following the guidelines for each tool.Guidelines:- when you start, you must use 'Get Sheets' to access user survey data from Google spreadsheets, the tool do not require any parameter such as spreadsheet id etc.",
      "claudeApiKey": { "secretName": "claude-harini" },
      "userPrompt": { "keys": ["request", "body", "message"] }
    },
    "17255b32-c028-4019-955d-8d2bef73f646": {
      "cacheMaxAge": "",
      "value": { "keys": ["72aa70ef-b05a-4785-a62c-10891ee2855a"] },
      "status": "200"
    },
    "5168b383-b9bb-45ae-97ae-ea37011b8d0b": {
      "spreadsheetUrl": "https://docs.google.com/spreadsheets/d/1Z6El2jk0D8Ph_Evk9LzL3swWkLqdjoR6eirjTBjBLtY/edit#gid=0",
      "integrations": { "gsheets": "gsheets;;han.tuerker@gmail.com" }
    },
    "3db82033-8d54-4b83-95eb-c4d220e3189e": {
      "ranges": "Sheet1",
      "integrations": { "gsheets": "gsheets;;han.tuerker@gmail.com" },
      "spreadsheetUrl": "https://docs.google.com/spreadsheets/d/1Z6El2jk0D8Ph_Evk9LzL3swWkLqdjoR6eirjTBjBLtY/edit#gid=0"
    }
  },
  "notes": "<p>A Data Analyst that can look at a database or survey results and come up with insights.</p><p><br></p><p>Try it using this test request body:</p><p><br></p><p>{</p><p>\"message\":\"What was the most popular discovery source?\"</p><p>}</p><p><br></p><p>Short Video: <a href=\"https://www.youtube.com/watch?v=OiQJQMk_2mo\" rel=\"noopener noreferrer\" target=\"_blank\">youtube.com/watch?v=OiQJQMk_2mo</a></p><p>Documentation: <a href=\"https://docs.buildship.com/ai-models/assistant#use-case-i-chat-with-assistant\" rel=\"noopener noreferrer\" target=\"_blank\">docs.buildship.com/ai-models/assistant</a></p>"
}
