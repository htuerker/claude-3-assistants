{
  "nodes": [
    {
      "onFail": null,
      "nodes": [
        {
          "_libRef": {
            "libNodeRefId": "@buildship/oauth-gsheets-get-sheet",
            "libType": "public",
            "integrity": "v3:f8f3b15ffb6cca5de72ce53e98a588b5",
            "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/oauth-gsheets-get-sheet/1.0.3/build.cjs",
            "isDirty": true,
            "version": "1.0.3"
          },
          "integrations": ["gsheets"],
          "type": "script",
          "id": "6da91152-9e0b-45e0-ae2b-ae715ecebdc4",
          "output": {
            "title": "Spreadsheet Data",
            "buildship": {},
            "type": "object",
            "description": "The data of the fetched Google Spreadsheet"
          },
          "label": "Get Sheets",
          "script": "import fetch from 'node-fetch';\n\nexport default async function fetchGoogleSpreadsheet({\n    spreadsheetUrl,\n    ranges\n}, {\n    auth,\n    logging\n}) {\n    const { access_token } = await auth.getToken();\n\n    // Extracting spreadsheetId from the URL\n    const regex = /\\/spreadsheets\\/d\\/([a-zA-Z0-9-_]+)/;\n    const match = spreadsheetUrl.match(regex);\n    if (!match) {\n        throw new Error('Invalid spreadsheet URL');\n    }\n    const spreadsheetId = match[1];\n\n  \n    const response = await fetch(`https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${ranges}`, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${access_token}`\n        }\n    });\n    const data = await response.json();\n    return data;\n}\n",
          "dependencies": { "node-fetch": "2.7.0" },
          "onFail": null,
          "inputs": {
            "type": "object",
            "required": ["apiKey", "includeGridData", "spreadsheetUrl", "ranges"],
            "properties": {
              "spreadsheetUrl": {
                "type": "string",
                "default": "",
                "description": "The URL of the Google Spreadsheet to fetch. [Refer API Documentation](https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/create).\n\nTIP ðŸ’¡: Available in the following format in your Google Sheets: `https://docs.google.com/spreadsheets/d/spreadsheet-id/edit`",
                "buildship": { "sensitive": false, "index": 0 },
                "pattern": "",
                "title": "Sheet URL"
              },
              "ranges": {
                "title": "Ranges",
                "description": "The ranges to retrieve from the spreadsheet.\n\n**SAMPLE INPUT:**\n```\n[\"Sheet1\"]\n```",
                "default": [],
                "type": "string",
                "pattern": "",
                "buildship": { "index": 1, "sensitive": false }
              }
            }
          },
          "meta": {
            "icon": {
              "type": "URL",
              "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2FGoogleSheets.png?alt=media&token=89b3cfec-6746-43da-a404-5d20adb60472"
            },
            "description": "Fetch a Google Spreadsheet using the Google Sheets API",
            "id": "oauth-gsheets-get-sheet",
            "name": "Get Sheets"
          },
          "name": "Get Sheets"
        }
      ],
      "name": "Claude Assistant",
      "output": {
        "type": "object",
        "description": "",
        "properties": {
          "error": { "title": "Error", "description": "", "buildship": { "index": 2 } },
          "data": {
            "properties": {},
            "buildship": { "index": 3 },
            "type": "object",
            "title": "Data",
            "description": ""
          },
          "response": { "description": "", "buildship": { "index": 0 }, "type": "string", "title": "Response" },
          "chatHistory": { "buildship": { "index": 1 }, "type": "array", "description": "", "title": "Chat History" }
        },
        "title": "",
        "buildship": { "index": 0 }
      },
      "integrations": [],
      "subType": "assistant",
      "type": "script",
      "inputs": {
        "required": ["maxTokens", "userPrompt", "claudeApiKey", "model", "systemPrompt"],
        "type": "object",
        "properties": {
          "threadId": {
            "default": "",
            "buildship": { "index": 5, "sensitive": false },
            "pattern": "",
            "title": "Thread Id",
            "type": "string",
            "description": ""
          },
          "claudeApiKey": {
            "buildship": { "index": 0, "sensitive": true },
            "title": "API Key",
            "description": "The OpenAI API key to use for authentication.",
            "type": "string",
            "pattern": ""
          },
          "model": {
            "description": "",
            "pattern": "",
            "default": "claude-3-opus-20240229",
            "title": "Model",
            "type": "string",
            "buildship": {
              "sensitive": false,
              "options": [
                { "label": "Claude 3 Opus", "value": "claude-3-opus-20240229" },
                { "value": "claude-3-sonnet-20240229", "label": "Claude 3 Sonnet" },
                { "value": "claude-3-haiku-20240307", "label": "Claude 3 Haiku" }
              ],
              "index": 4
            },
            "enum": ["claude-3-opus-20240229", "claude-3-sonnet-20240229", "claude-3-haiku-20240307"]
          },
          "systemPrompt": {
            "title": "Instructions",
            "default": "",
            "buildship": { "index": 1, "sensitive": false },
            "description": "",
            "pattern": "",
            "type": "string"
          },
          "userPrompt": {
            "description": "",
            "type": "string",
            "pattern": "",
            "title": "User Prompt",
            "buildship": { "sensitive": false, "index": 2 },
            "default": ""
          },
          "maxTokens": {
            "type": "number",
            "buildship": { "sensitive": false, "index": 4 },
            "description": "",
            "default": "",
            "title": "Max Tokens",
            "pattern": ""
          }
        }
      },
      "id": "f18c1e70-81c6-4ec5-982e-fe45b8302f2a",
      "dependencies": { "axios": "0.28.1" },
      "meta": {
        "id": "claude-assistant-node",
        "name": "Claude Assistant",
        "icon": {
          "type": "URL",
          "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fanthropic.png?alt=media&token=ec0eb8dc-f0d4-4f97-a144-023f1aa8118e"
        },
        "description": ""
      },
      "script": "import axios from \"axios\";\n\nconst nodeToClaudeTool: (node: Node) => ClaudeTool = (node) => {\n  return {\n    // Use node.id as the name of the tool. Spaces are not allowed.\n    name: node.id,\n    description: node.meta.description ?? \"\",\n    input_schema: {\n      type: \"object\",\n      properties: Object.entries(node.inputs.properties)\n        .reduce((properties, [name, value]) => {\n          if (value.buildship && !value.buildship.toBeAutoFilled) return properties;\n          return {\n            ...properties, [name]: {\n              type: value.type,\n              enum: value.enum,\n              description: value.description\n            }\n          }\n        }, {}),\n      required: Object.entries(node.inputs.properties).map(([name, value]) => {\n        if (value.buildship && value.buildship.toBeAutoFilled && node.inputs.required.includes(name)) return name;\n        return false;\n      }).filter(Boolean) as string[],\n    },\n  };\n}\n\ntype Params = {\n  claudeApiKey: string;\n  model: string;\n  maxTokens: number;\n  userPrompt: string;\n  systemPrompt?: string;\n  chatHistory?: ClaudeMessage[];\n};\n\nexport default async function assistant(\n  { claudeApiKey, model, maxTokens, userPrompt, systemPrompt, chatHistory }: Params,\n  { logging, execute, nodes }: any\n) {\n  const version = \"2023-06-01\";\n  const beta = \"tools-2024-04-04\";\n\n  const client = axios.create({\n    baseURL: \"https://api.anthropic.com/v1\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'x-api-key': claudeApiKey,\n      'anthropic-version': version,\n      'anthropic-beta': beta\n    }\n  });\n\n  const tools: ClaudeTool[] = nodes?.map(nodeToClaudeTool) ?? [];\n\n  const initialMessages = [\n    ...(chatHistory ?? []),\n    {\n      \"role\": \"user\",\n      \"content\": userPrompt,\n    }];\n\n  const baseRequest = {\n    \"model\": model,\n    \"max_tokens\": maxTokens,\n    \"system\": systemPrompt || \"\",\n    \"tools\": tools,\n    \"messages\": initialMessages\n  } as ClaudeRequest;\n\n  try {\n    let request = { ...baseRequest };\n    let requestCount = 1;\n    logging.log(`Claude request(${requestCount}):`, baseRequest);\n    let response = await client.post(\"/messages\", request);\n    logging.log(`Claude response(${requestCount}): `, response.data);\n\n    do {\n      if (response.data.type === \"error\") {\n        throw response.data.error;\n      }\n\n      let result = response.data;\n\n      const isEndTurn = result.stop_reason === \"end_turn\";\n      if (isEndTurn) break;\n\n      const content = result.content;\n      request.messages.push({ role: \"assistant\", content });\n\n      const isToolUse = result.stop_reason === \"tool_use\" && content instanceof Array;\n      if (isToolUse) {\n        const toolUseMessageContent = [] as ClaudeToolResultContent[];\n\n        const toolUses: ClaudeToolUseContent[] = content.filter(content => content.type === \"tool_use\");\n        for (const toolUse of toolUses) {\n          const tool = tools.find(tool => tool.name === toolUse.name);\n          const node = nodes?.find((node: Node) => node.id === toolUse.name);\n          if (!tool || !node) {\n            logging.log(\"Failed to find tool:\");\n            logging.log(toolUse);\n            logging.log(node);\n            throw new Error(\"Failed to find tool\");\n          }\n          logging.log(\"Tool node: \", node.name);\n          // filter hallucinated inputs\n          const inputs = {} as Record<string, string>;\n          for (const [inputKey, inputValue] of Object.entries(toolUse.input)) {\n            if (node.inputs.properties[inputKey]) {\n              inputs[inputKey] = inputValue;\n            }\n          }\n          const toolResponse = await execute(node.label, inputs);\n          logging.log(\"Tool response: \", toolResponse);\n          toolUseMessageContent.push({\n            type: \"tool_result\",\n            tool_use_id: toolUse.id,\n            content: toolResponse ? JSON.stringify(toolResponse) : \"\",\n          });\n        }\n        request.messages.push({\n          role: \"user\",\n          content: toolUseMessageContent\n        });\n      }\n      requestCount++;\n      logging.log(`Claude request(${requestCount}):`, request);\n      response = await client.post(\"/messages\", request);\n      logging.log(`Claude response(${requestCount}): `, response.data);\n    } while (response && response.data && response.data.stop_reason !== \"end_turn\");\n\n    return {\n      response: response.data.content[0].text,\n      chatHistory: [...request.messages, { role: \"assistant\", content: response.data.content }],\n      data: response.data,\n      error: null,\n    }\n  } catch (error) {\n    logging.log(`Error: ${error}`);\n    return { error }\n  }\n}\n\ntype Node = {\n  label: string;\n  meta: {\n    id: string;\n    description: string;\n    name: string;\n    [key: string]: any;\n  };\n  inputs: {\n    type: string;\n    required: string[];\n    properties: Record<string, {\n      description: string;\n      buildship?: {\n        toBeAutoFilled?: boolean;\n        [key: string]: any;\n      }\n      [key: string]: any;\n    }>;\n  };\n  [key: string]: any;\n};\n\ntype ClaudeTool = {\n  name: string;\n  description: string;\n  input_schema: {\n    type: string;\n    properties: Record<string, {\n      type: string;\n      description: string;\n      enum?: string[];\n    }>;\n    required: string[];\n  };\n};\n\ntype ClaudeTextContent = {\n  type: \"text\";\n  text: string;\n};\n\ntype ClaudeToolUseContent = {\n  type: \"tool_use\",\n  id: string,\n  name: string,\n  input: Record<string, string>\n};\n\ntype ClaudeToolResultContent = {\n  type: \"tool_result\",\n  tool_use_id: string,\n  content: string\n};\n\ntype ClaudeMessage = {\n  role: \"user\" | \"assistant\",\n  content: ClaudeResponse[\"content\"]\n};\n\ntype ClaudeRequest = {\n  \"model\": string,\n  \"max_tokens\": number,\n  \"tools\": ClaudeTool[],\n  \"messages\": ClaudeMessage[]\n};\n\ntype ClaudeResponse = {\n  \"id\": string,\n  \"type\": \"message\",\n  \"role\": \"assistant\",\n  \"model\": string,\n  \"stop_sequence\": null,\n  \"usage\": { \"input_tokens\": number, \"output_tokens\": number },\n  \"content\": string | ClaudeTextContent[] | ClaudeToolUseContent[] | ClaudeToolResultContent[];\n  \"stop_reason\": \"tool_use\" | \"stop_sequence\" | \"end_turn\"\n};\n",
      "label": "Claude Assistant"
    },
    {
      "inputs": {
        "required": [],
        "type": "object",
        "properties": {
          "value": {
            "description": "The value to return",
            "type": "string",
            "buildship": { "index": 1 },
            "title": "Value",
            "default": ""
          },
          "cacheMaxAge": {
            "type": "number",
            "description": "Set cache duration in seconds",
            "title": "Cache Time",
            "buildship": { "index": 2 },
            "default": 0
          },
          "status": {
            "title": "Status code",
            "description": "The HTTP status code to return",
            "buildship": {
              "options": [
                { "value": "200", "label": "OK (200)" },
                { "value": "201", "label": "Created (201)" },
                { "value": "202", "label": "Accepted (202)" },
                { "value": "301", "label": "Redirect (301)" },
                { "label": "No Content (204)", "value": "204" },
                { "label": "Bad Request (400)", "value": "400" },
                { "value": "401", "label": "Unauthorized (401)" },
                { "label": "Forbidden (403)", "value": "403" },
                { "value": "404", "label": "Not Found (404)" },
                { "value": "429", "label": "Too Many Requests (429)" },
                { "label": "Internal Server Error (500)", "value": "500" }
              ],
              "index": 0
            },
            "default": "200",
            "enum": ["200", "201", "202", "204", "400", "401", "403", "404", "429", "500"],
            "type": "string"
          }
        }
      },
      "response": { "2XX": { "type": "object", "properties": {} } },
      "description": "The Return Node is used to return values from the workflow. It is generally the last node in the workflow. The return node is optional as the API can inherently return a 200 OK response by default. [Full Documentation](https://docs.buildship.com/core-nodes/return).",
      "id": "82c7782a-d8e6-4a01-821a-de10bbdcc3d2",
      "label": "Return",
      "type": "return"
    }
  ],
  "trigger": {
    "testingSchema": [
      {
        "label": "Endpoint URL",
        "prefill": "endpointURL",
        "type": "shortText",
        "name": "endpointURL",
        "disabled": true
      },
      { "name": "apiRequestData", "prefill": "apiRequestData", "type": "apiRequestData" }
    ],
    "inputs": {
      "properties": {
        "method": {
          "buildship": {
            "sensitive": false,
            "options": [
              { "label": "GET", "value": "GET" },
              { "value": "POST", "label": "POST" },
              { "label": "PUT", "value": "PUT" },
              { "label": "DELETE", "value": "DELETE" }
            ],
            "index": 1
          },
          "title": "Method",
          "description": "The HTTP method for the incoming request.",
          "pattern": "",
          "enum": ["GET", "POST", "PUT", "DELETE"],
          "default": "GET",
          "type": "string"
        },
        "path": {
          "pattern": "",
          "title": "Path",
          "type": "string",
          "description": "The path of the API Endpoint. Additionally, define the structure for the incoming API requests. [Learn more about API Specification here](https://docs.buildship.com/basics/api-spec#request-specification).",
          "buildship": { "index": 0, "sensitive": false },
          "default": "/"
        }
      },
      "type": "object",
      "required": ["method", "path"]
    },
    "script": "",
    "dependencies": {},
    "groupId": null,
    "instruction": { "title": "Endpoint URL", "bodyTemplate": "https://{{runtimeUrl}}/{{httpPath}}" },
    "id": "http",
    "live": true,
    "request": {
      "properties": {
        "query": {
          "buildship": {},
          "title": "Query",
          "properties": {},
          "type": "object",
          "description": "Query parameters"
        },
        "headers": {
          "description": "Headers of the request",
          "type": "object",
          "title": "Request Headers",
          "properties": {},
          "buildship": {}
        },
        "body": {
          "title": "Body",
          "type": "object",
          "buildship": {},
          "description": "Body of the request",
          "properties": {
            "threadId": { "buildship": { "index": 0 }, "type": "string", "description": "", "title": "Thread Id" },
            "message": { "type": "string", "buildship": { "index": 0 }, "title": "Message", "description": "" }
          }
        }
      },
      "title": "Request",
      "required": [],
      "type": "object",
      "buildship": {}
    },
    "output": {
      "type": "object",
      "title": "Request",
      "buildship": {},
      "properties": {
        "headers": {
          "description": "Headers of the request",
          "title": "Headers",
          "type": "object",
          "buildship": {},
          "properties": {
            "authorization": {
              "type": "string",
              "title": "Authorization",
              "buildship": { "index": 1 },
              "description": "Authorization header"
            },
            "content-type": {
              "type": "string",
              "buildship": { "index": 0 },
              "description": "Content-Type of the request",
              "title": "Content-Type"
            }
          }
        },
        "query": {
          "buildship": { "index": 0 },
          "description": "Query parameters",
          "type": "object",
          "title": "Query parameters"
        },
        "body": { "type": "object", "buildship": { "index": 1 }, "description": "Body of the request", "title": "Body" }
      }
    },
    "type": "http",
    "meta": {
      "name": "Rest API Call",
      "description": "Create an API / HTTP endpoint as the trigger or starting point for your workflow. This endpoint can be used in other apps to run the workflow. [Full documentation](https://docs.buildship.com/trigger-nodes/rest-api)",
      "id": "http",
      "icon": {}
    },
    "order": 1,
    "label": "Rest API Call"
  },
  "nodeValues": {
    "f18c1e70-81c6-4ec5-982e-fe45b8302f2a": {
      "maxTokens": 1024,
      "systemPrompt": "You are a Data Insight Analyst. You should be concise and accurate provide accurate analysis, ensuring that its interpretations and groupings are well-supported by the data. You have a formal, professional tone, focusing on providing concise, evidence-based responses. When additional information is needed for a comprehensive analysis, you will request more data rather than making assumptions. You should avoid speculation and you should provide precise, relevant analytical insights, tailored to enhance the user's understanding of the dataWhen you are given tools to use, you must use them following the guidelines for each tool.Guidelines:- when you start, you must use 'Get Sheets' to access user survey data from Google spreadsheets, the tool do not require any parameter such as spreadsheet id etc.",
      "threadId": { "keys": ["request", "body", "threadId"] },
      "model": "claude-3-haiku-20240307",
      "claudeApiKey": "",
      "userPrompt": { "keys": ["request", "body", "message"] }
    },
    "http": { "method": "POST", "path": "/claude-data-analyst" },
    "6da91152-9e0b-45e0-ae2b-ae715ecebdc4": { "ranges": "", "spreadsheetUrl": "", "integrations": {} },
    "82c7782a-d8e6-4a01-821a-de10bbdcc3d2": {
      "value": {
        "expression": "{\n  \"message\": ctx[\"root\"][\"f18c1e70-81c6-4ec5-982e-fe45b8302f2a\"][\"response\"],\n  \"threadId\": \"\"\n}",
        "type": "javascript"
      },
      "status": "200",
      "cacheMaxAge": 0
    }
  },
  "notes": "<p>A Data Analyst that can look at a database or survey results and come up with insights.</p><p><br></p><p>Try it using this test request body:</p><p><br></p><p>{</p><p>\"message\":\"What was the most popular discovery source?\"</p><p>}</p><p><br></p><p>Short Video: <a href=\"https://www.youtube.com/watch?v=OiQJQMk_2mo\" rel=\"noopener noreferrer\" target=\"_blank\">youtube.com/watch?v=OiQJQMk_2mo</a></p><p>Documentation: <a href=\"https://docs.buildship.com/ai-models/assistant#use-case-i-chat-with-assistant\" rel=\"noopener noreferrer\" target=\"_blank\">docs.buildship.com/ai-models/assistant</a></p>"
}
