{
  "nodes": [
    {
      "nodes": [
        {
          "_libRef": {
            "libType": "public",
            "libNodeRefId": "@buildship/execute-workflow",
            "src": "https://storage.googleapis.com/buildship-app-us-central1/builtNodes/execute-workflow/1.0.3.cjs",
            "version": "1.0.3",
            "isDirty": true,
            "integrity": "v3:cbbae2c115d7ba0f3baff054c992d171"
          },
          "type": "script",
          "label": "get contacts",
          "name": "Get contacts",
          "onFail": null,
          "dependencies": { "google-auth-library": "9.4.1" },
          "meta": {
            "icon": {
              "type": "URL",
              "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fbuildship.png?alt=media&token=c5248170-8cb1-4a66-af37-436c7a2aa6b8"
            },
            "id": "execute-workflow",
            "description": "get contacts a function to access contacts and return a list of emails",
            "name": "Get contacts"
          },
          "inputs": {
            "required": ["workflowId", "wait"],
            "type": "object",
            "properties": {
              "projectId": {
                "type": "string",
                "default": "",
                "buildship": { "index": 0, "sensitive": false },
                "description": "**(OPTIONAL)** If you wish to execute a BuildShip Workflow that's not a part of the same project, you'd need to specify the Project ID. You can find the **Project ID** in the BuildShip Project Settings or from the `BuildShip Trigger` config.",
                "title": "Project ID",
                "pattern": ""
              },
              "wait": {
                "title": "Await?",
                "default": "true",
                "pattern": "",
                "buildship": { "sensitive": false, "index": 3 },
                "type": "boolean",
                "description": "Whether you wish to wait for the triggered workflow to execute."
              },
              "contacts": {
                "properties": {},
                "description": "the name ",
                "buildship": { "sensitive": false, "index": 2 },
                "pattern": "",
                "title": "Data",
                "type": "object",
                "default": {}
              },
              "workflowId": {
                "title": "Workflow ID",
                "default": "",
                "type": "string",
                "buildship": { "index": 1, "sensitive": false },
                "description": "The ID of the workflow to call. You can get the Workflow ID from the `BuildShip Trigger` config.",
                "pattern": ""
              }
            }
          },
          "output": { "type": "object", "properties": {}, "buildship": {} },
          "script": "import { GoogleAuth } from 'google-auth-library';\nexport default async function cloudRunServiceRequest({\n    workflowId,\n    data,\n    wait,\n    projectId\n},{logging}) {\n    const auth = new GoogleAuth();\n    const _projectId = projectId || process.env.GCLOUD_PROJECT;\n    const url = `https://${_projectId.split(\"-\")[1]}.buildship.run/executeWorkflow/${workflowId}`\n    const client = await auth.getIdTokenClient(`${_projectId}-${workflowId}`);\n    const headers = await client.getRequestHeaders(url);\n    headers['Content-Type'] = 'application/json';\n    if (wait){\n      const response =  await fetch(url, {\n        method: \"POST\",\n        headers,\n        body: JSON.stringify(data)\n      });\n      try {\n          const resData = await response.json();\n          return {\n            \"success\": true,\n            \"response\": resData\n          }\n      }catch(e){\n          return {\n            \"success\": false,\n            \"error\": e\n          }\n      }\n    }\n    else{\n      fetch(url, {\n        method: \"POST\",\n        headers,\n        body: JSON.stringify(data)\n      });\n      return {\n        \"success\": true\n      }\n    }\n}",
          "id": "72a68fa1-494d-4074-8319-7683b77cbd0c",
          "integrations": []
        },
        {
          "meta": {
            "id": "sendgrid-static-email",
            "description": "Send Static email - Sends an email using the Sendgrid API with tracking (NOTE: The messages sent via SendGrid might end up in spam if you haven't verified your sendgrid account)",
            "icon": {
              "type": "URL",
              "url": "https://storage.googleapis.com/buildship-app-us-central1/icons/SendGrid.png"
            },
            "name": "Send Static email"
          },
          "_libRef": {
            "libNodeRefId": "@buildship/sendgrid-static-email",
            "src": "https://storage.googleapis.com/buildship-app-us-central1/builtNodes/sendgrid-static-email/1.0.1.cjs",
            "isDirty": true,
            "integrity": "v3:4e70e751e73a2d683aba69af8a0d8e30",
            "version": "1.0.1",
            "libType": "public"
          },
          "name": "Send Static email",
          "dependencies": { "@sendgrid/mail": "7.7.0" },
          "type": "script",
          "id": "0e84ac71-749d-4409-98be-d3e8cbafe3d7",
          "inputs": {
            "type": "object",
            "required": ["fromAddress", "fromName", "toAddress", "tracking", "emailMessage", "apiKey"],
            "properties": {
              "toAddress": {
                "type": "string",
                "description": "The email address the email will be sent to",
                "buildship": { "index": 3, "toBeAutoFilled": true },
                "title": "To Address"
              },
              "emailMessage": {
                "default": "",
                "type": "string",
                "buildship": { "index": 4, "toBeAutoFilled": true, "sensitive": false },
                "description": "The content of the email",
                "title": "Email Body",
                "pattern": ""
              },
              "apiKey": {
                "title": "API Key",
                "pattern": "",
                "description": "Your Sendgrid API Key. (Get your SendGrid API Key from [your Account Dashboard](https://app.sendgrid.com/settings/api_keys).)",
                "type": "string",
                "buildship": { "index": 0, "sensitive": true },
                "default": ""
              },
              "fromName": {
                "description": "The name the email will appear to be sent from",
                "type": "string",
                "buildship": { "index": 2 },
                "title": "From Name"
              },
              "fromAddress": {
                "buildship": { "index": 1 },
                "description": "The email address the email will be sent from",
                "type": "string",
                "title": "From Address"
              },
              "tracking": {
                "description": "Whether to enable tracking for this email or not",
                "buildship": { "index": 5 },
                "default": false,
                "type": "boolean",
                "title": "Tracking"
              }
            }
          },
          "onFail": null,
          "label": "Send Static email",
          "script": "import sgMail from '@sendgrid/mail';\nexport default async function sendEmailWithSendgrid({\n    apiKey,\n    fromAddress,\n    fromName,\n    toAddress,\n    emailMessage,\n    tracking\n}, {\n    logging\n}) {\n    sgMail.setApiKey(apiKey);\n    const msg = {\n        to: toAddress,\n        from: fromAddress,\n        subject: fromName,\n        text: emailMessage,\n        html: emailMessage,\n        trackingSettings: {\n            clickTracking: {\n                enable: tracking\n            },\n            openTracking: {\n                enable: tracking\n            },\n            subscriptionTracking: {\n                enable: tracking\n            }\n        }\n    };\n    try {\n        await sgMail.send(msg);\n        logging.log('Email sent');\n        return \"Email Sent!\";\n    } catch (error) {\n        logging.error(error);\n        return error;\n    }\n}",
          "output": { "buildship": {}, "properties": {}, "type": "object" },
          "integrations": []
        }
      ],
      "inputs": {
        "required": ["maxTokens", "userPrompt", "claudeApiKey", "model", "systemPrompt"],
        "properties": {
          "claudeApiKey": {
            "pattern": "",
            "title": "API Key",
            "type": "string",
            "description": "The OpenAI API key to use for authentication.",
            "buildship": { "sensitive": true, "index": 0 }
          },
          "maxTokens": {
            "type": "number",
            "buildship": { "sensitive": false, "index": 4 },
            "title": "Max Tokens",
            "description": "",
            "default": "",
            "pattern": ""
          },
          "model": {
            "enum": ["claude-3-opus-20240229", "claude-3-sonnet-20240229", "claude-3-haiku-20240307"],
            "description": "",
            "type": "string",
            "buildship": {
              "index": 4,
              "options": [
                { "label": "Claude 3 Opus", "value": "claude-3-opus-20240229" },
                { "value": "claude-3-sonnet-20240229", "label": "Claude 3 Sonnet" },
                { "label": "Claude 3 Haiku", "value": "claude-3-haiku-20240307" }
              ],
              "sensitive": false
            },
            "title": "Model",
            "pattern": "",
            "default": "claude-3-opus-20240229"
          },
          "threadId": {
            "title": "Thread Id",
            "description": "",
            "buildship": { "index": 5, "sensitive": false },
            "type": "string",
            "pattern": "",
            "default": ""
          },
          "systemPrompt": {
            "buildship": { "sensitive": false, "index": 1 },
            "description": "",
            "title": "Instructions",
            "default": "",
            "type": "string",
            "pattern": ""
          },
          "userPrompt": {
            "default": "",
            "title": "User Prompt",
            "buildship": { "sensitive": false, "index": 2 },
            "pattern": "",
            "type": "string",
            "description": ""
          }
        },
        "type": "object"
      },
      "script": "import axios from \"axios\";\n\nconst nodeToClaudeTool: (node: Node) => ClaudeTool = (node) => {\n  return {\n    // Use node.id as the name of the tool. Spaces are not allowed.\n    name: node.id,\n    description: node.meta.description ?? \"\",\n    input_schema: {\n      type: \"object\",\n      properties: Object.entries(node.inputs.properties)\n        .reduce((properties, [name, value]) => {\n          if (value.buildship && !value.buildship.toBeAutoFilled) return properties;\n          return {\n            ...properties, [name]: {\n              type: value.type,\n              enum: value.enum,\n              description: value.description\n            }\n          }\n        }, {}),\n      required: Object.entries(node.inputs.properties).map(([name, value]) => {\n        if (value.buildship && value.buildship.toBeAutoFilled && node.inputs.required.includes(name)) return name;\n        return false;\n      }).filter(Boolean) as string[],\n    },\n  };\n}\n\ntype Params = {\n  claudeApiKey: string;\n  model: string;\n  maxTokens: number;\n  userPrompt: string;\n  systemPrompt?: string;\n  chatHistory?: ClaudeMessage[];\n};\n\nexport default async function assistant(\n  { claudeApiKey, model, maxTokens, userPrompt, systemPrompt, chatHistory }: Params,\n  { logging, execute, nodes }: any\n) {\n  const version = \"2023-06-01\";\n  const beta = \"tools-2024-04-04\";\n\n  const client = axios.create({\n    baseURL: \"https://api.anthropic.com/v1\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'x-api-key': claudeApiKey,\n      'anthropic-version': version,\n      'anthropic-beta': beta\n    }\n  });\n\n  const tools: ClaudeTool[] = nodes?.map(nodeToClaudeTool) ?? [];\n\n  const initialMessages = [\n    ...(chatHistory ?? []),\n    {\n      \"role\": \"user\",\n      \"content\": userPrompt,\n    }];\n\n  const baseRequest = {\n    \"model\": model,\n    \"max_tokens\": maxTokens,\n    \"system\": systemPrompt || \"\",\n    \"tools\": tools,\n    \"messages\": initialMessages\n  } as ClaudeRequest;\n\n  try {\n    let request = { ...baseRequest };\n    let requestCount = 1;\n    logging.log(`Claude request(${requestCount}):`, baseRequest);\n    let response = await client.post(\"/messages\", request);\n    logging.log(`Claude response(${requestCount}): `, response.data);\n\n    do {\n      if (response.data.type === \"error\") {\n        throw response.data.error;\n      }\n\n      let result = response.data;\n\n      const isEndTurn = result.stop_reason === \"end_turn\";\n      if (isEndTurn) break;\n\n      const content = result.content;\n      request.messages.push({ role: \"assistant\", content });\n\n      const isToolUse = result.stop_reason === \"tool_use\" && content instanceof Array;\n      if (isToolUse) {\n        const toolUseMessageContent = [] as ClaudeToolResultContent[];\n\n        const toolUses: ClaudeToolUseContent[] = content.filter(content => content.type === \"tool_use\");\n        for (const toolUse of toolUses) {\n          const tool = tools.find(tool => tool.name === toolUse.name);\n          const node = nodes?.find((node: Node) => node.id === toolUse.name);\n          if (!tool || !node) {\n            logging.log(\"Failed to find tool:\");\n            logging.log(toolUse);\n            logging.log(node);\n            throw new Error(\"Failed to find tool\");\n          }\n          logging.log(\"Tool node: \", node.name);\n          // filter hallucinated inputs\n          const inputs = {} as Record<string, string>;\n          for (const [inputKey, inputValue] of Object.entries(toolUse.input)) {\n            if (node.inputs.properties[inputKey]) {\n              inputs[inputKey] = inputValue;\n            }\n          }\n          const toolResponse = await execute(node.label, inputs);\n          logging.log(\"Tool response: \", toolResponse);\n          toolUseMessageContent.push({\n            type: \"tool_result\",\n            tool_use_id: toolUse.id,\n            content: toolResponse ? JSON.stringify(toolResponse) : \"\",\n          });\n        }\n        request.messages.push({\n          role: \"user\",\n          content: toolUseMessageContent\n        });\n      }\n      requestCount++;\n      logging.log(`Claude request(${requestCount}):`, request);\n      response = await client.post(\"/messages\", request);\n      logging.log(`Claude response(${requestCount}): `, response.data);\n    } while (response && response.data && response.data.stop_reason !== \"end_turn\");\n\n    return {\n      response: response.data.content[0].text,\n      chatHistory: [...request.messages, { role: \"assistant\", content: response.data.content }],\n      data: response.data,\n      error: null,\n    }\n  } catch (error) {\n    logging.log(`Error: ${error}`);\n    return { error }\n  }\n}\n\ntype Node = {\n  label: string;\n  meta: {\n    id: string;\n    description: string;\n    name: string;\n    [key: string]: any;\n  };\n  inputs: {\n    type: string;\n    required: string[];\n    properties: Record<string, {\n      description: string;\n      buildship?: {\n        toBeAutoFilled?: boolean;\n        [key: string]: any;\n      }\n      [key: string]: any;\n    }>;\n  };\n  [key: string]: any;\n};\n\ntype ClaudeTool = {\n  name: string;\n  description: string;\n  input_schema: {\n    type: string;\n    properties: Record<string, {\n      type: string;\n      description: string;\n      enum?: string[];\n    }>;\n    required: string[];\n  };\n};\n\ntype ClaudeTextContent = {\n  type: \"text\";\n  text: string;\n};\n\ntype ClaudeToolUseContent = {\n  type: \"tool_use\",\n  id: string,\n  name: string,\n  input: Record<string, string>\n};\n\ntype ClaudeToolResultContent = {\n  type: \"tool_result\",\n  tool_use_id: string,\n  content: string\n};\n\ntype ClaudeMessage = {\n  role: \"user\" | \"assistant\",\n  content: ClaudeResponse[\"content\"]\n};\n\ntype ClaudeRequest = {\n  \"model\": string,\n  \"max_tokens\": number,\n  \"tools\": ClaudeTool[],\n  \"messages\": ClaudeMessage[]\n};\n\ntype ClaudeResponse = {\n  \"id\": string,\n  \"type\": \"message\",\n  \"role\": \"assistant\",\n  \"model\": string,\n  \"stop_sequence\": null,\n  \"usage\": { \"input_tokens\": number, \"output_tokens\": number },\n  \"content\": string | ClaudeTextContent[] | ClaudeToolUseContent[] | ClaudeToolResultContent[];\n  \"stop_reason\": \"tool_use\" | \"stop_sequence\" | \"end_turn\"\n};\n",
      "integrations": [],
      "name": "Claude Assistant",
      "id": "17980d1f-d1f1-48b1-af9a-8f78afd71a03",
      "onFail": null,
      "type": "script",
      "subType": "assistant",
      "label": "Claude Assistant",
      "dependencies": { "axios": "0.28.1" },
      "meta": {
        "name": "Claude Assistant",
        "id": "claude-assistant-node",
        "icon": {
          "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fanthropic.png?alt=media&token=ec0eb8dc-f0d4-4f97-a144-023f1aa8118e",
          "type": "URL"
        },
        "description": ""
      },
      "output": {
        "title": "",
        "description": "",
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "",
            "buildship": { "index": 3 },
            "title": "Data",
            "properties": {}
          },
          "chatHistory": { "description": "", "title": "Chat History", "buildship": { "index": 1 }, "type": "array" },
          "error": { "description": "", "title": "Error", "buildship": { "index": 2 } },
          "response": { "buildship": { "index": 0 }, "type": "string", "title": "Response", "description": "" }
        },
        "buildship": { "index": 0 }
      }
    },
    {
      "type": "return",
      "response": { "2XX": { "properties": {}, "type": "object" } },
      "id": "0e30af29-0279-47ce-ac33-19c757c431aa",
      "description": "The Return Node is used to return values from the workflow. It is generally the last node in the workflow. The return node is optional as the API can inherently return a 200 OK response by default. [Full Documentation](https://docs.buildship.com/core-nodes/return).",
      "label": "Return",
      "inputs": {
        "properties": {
          "value": {
            "description": "The value to return",
            "title": "Value",
            "type": "string",
            "buildship": { "index": 1 },
            "default": ""
          },
          "cacheMaxAge": {
            "title": "Cache Time",
            "type": "number",
            "buildship": { "index": 2 },
            "default": 0,
            "description": "Set cache duration in seconds"
          },
          "status": {
            "title": "Status code",
            "enum": ["200", "201", "202", "204", "400", "401", "403", "404", "429", "500"],
            "default": "200",
            "buildship": {
              "index": 0,
              "options": [
                { "label": "OK (200)", "value": "200" },
                { "label": "Created (201)", "value": "201" },
                { "value": "202", "label": "Accepted (202)" },
                { "value": "301", "label": "Redirect (301)" },
                { "label": "No Content (204)", "value": "204" },
                { "label": "Bad Request (400)", "value": "400" },
                { "label": "Unauthorized (401)", "value": "401" },
                { "label": "Forbidden (403)", "value": "403" },
                { "label": "Not Found (404)", "value": "404" },
                { "label": "Too Many Requests (429)", "value": "429" },
                { "value": "500", "label": "Internal Server Error (500)" }
              ]
            },
            "type": "string",
            "description": "The HTTP status code to return"
          }
        },
        "type": "object",
        "required": []
      }
    }
  ],
  "trigger": {
    "order": 1,
    "inputs": {
      "required": ["method", "path"],
      "type": "object",
      "properties": {
        "method": {
          "type": "string",
          "buildship": {
            "sensitive": false,
            "options": [
              { "label": "GET", "value": "GET" },
              { "label": "POST", "value": "POST" },
              { "label": "PUT", "value": "PUT" },
              { "label": "DELETE", "value": "DELETE" }
            ],
            "index": 1
          },
          "title": "Method",
          "description": "The HTTP method for the incoming request.",
          "enum": ["GET", "POST", "PUT", "DELETE"],
          "default": "GET",
          "pattern": ""
        },
        "path": {
          "description": "The path of the API Endpoint. Additionally, define the structure for the incoming API requests. [Learn more about API Specification here](https://docs.buildship.com/basics/api-spec#request-specification).",
          "title": "Path",
          "buildship": { "index": 0, "sensitive": false },
          "pattern": "",
          "type": "string",
          "default": "/"
        }
      }
    },
    "type": "http",
    "script": "",
    "dependencies": {},
    "groupId": null,
    "output": {
      "properties": {
        "headers": {
          "buildship": {},
          "description": "Headers of the request",
          "title": "Headers",
          "properties": {
            "authorization": {
              "title": "Authorization",
              "description": "Authorization header",
              "buildship": { "index": 1 },
              "type": "string"
            },
            "content-type": {
              "title": "Content-Type",
              "description": "Content-Type of the request",
              "type": "string",
              "buildship": { "index": 0 }
            }
          },
          "type": "object"
        },
        "query": {
          "description": "Query parameters",
          "type": "object",
          "title": "Query parameters",
          "buildship": { "index": 0 }
        },
        "body": { "title": "Body", "buildship": { "index": 1 }, "description": "Body of the request", "type": "object" }
      },
      "title": "Request",
      "type": "object",
      "buildship": {}
    },
    "live": true,
    "id": "http",
    "meta": {
      "name": "Rest API Call",
      "id": "http",
      "icon": {},
      "description": "Create an API / HTTP endpoint as the trigger or starting point for your workflow. This endpoint can be used in other apps to run the workflow. [Full documentation](https://docs.buildship.com/trigger-nodes/rest-api)"
    },
    "testingSchema": [
      {
        "type": "shortText",
        "label": "Endpoint URL",
        "disabled": true,
        "prefill": "endpointURL",
        "name": "endpointURL"
      },
      { "name": "apiRequestData", "type": "apiRequestData", "prefill": "apiRequestData" }
    ],
    "label": "Rest API Call",
    "instruction": { "bodyTemplate": "https://{{runtimeUrl}}/{{httpPath}}", "title": "Endpoint URL" },
    "request": {
      "title": "Request",
      "properties": {
        "headers": {
          "description": "Headers of the request",
          "title": "Request Headers",
          "properties": {},
          "type": "object",
          "buildship": {}
        },
        "body": {
          "buildship": {},
          "properties": {
            "threadId": { "title": "Thread Id", "type": "string", "buildship": { "index": 0 }, "description": "" },
            "message": { "buildship": { "index": 0 }, "description": "", "title": "Message", "type": "string" }
          },
          "description": "Body of the request",
          "type": "object",
          "title": "Body"
        },
        "query": {
          "title": "Query",
          "description": "Query parameters",
          "type": "object",
          "buildship": {},
          "properties": {}
        }
      },
      "type": "object",
      "required": [],
      "buildship": {}
    }
  },
  "nodeValues": {
    "72a68fa1-494d-4074-8319-7683b77cbd0c": { "workflowId": "", "contacts": "", "projectId": "", "wait": "true" },
    "0e30af29-0279-47ce-ac33-19c757c431aa": {
      "status": "200",
      "value": {
        "type": "javascript",
        "expression": "{\n  \"message\": ctx[\"root\"][\"17980d1f-d1f1-48b1-af9a-8f78afd71a03\"][\"response\"],\n  \"threadId\": \"\"\n}"
      },
      "cacheMaxAge": 0
    },
    "0e84ac71-749d-4409-98be-d3e8cbafe3d7": { "apiKey": "", "tracking": false, "emailMessage": "" },
    "17980d1f-d1f1-48b1-af9a-8f78afd71a03": {
      "maxTokens": 1024,
      "systemPrompt": "You are specialized on sending emails with a concise response given a context. Users will describe the message they want to send and the expected recipient.   You must use 'get contacts' to look for your contacts and then use 'Send Email' to the required contact  Your signature should be always AI curated message from Mail Assistant",
      "claudeApiKey": "",
      "userPrompt": { "keys": ["request", "body", "message"] },
      "model": "claude-3-haiku-20240307",
      "threadId": { "keys": ["request", "body", "threadId"] }
    },
    "http": { "path": "/claude-mail-assistant", "method": "POST" }
  },
  "notes": "<p>Use Assistants to read your databases and send emails.</p><p><br></p><p>Learn more on how to create this Assistant on: <a href=\"https://docs.buildship.com/ai-models/assistant#use-case-viii-email-assistant\" rel=\"noopener noreferrer\" target=\"_blank\">https://docs.buildship.com/ai-models/assistant#use-case-viii-email-assistant</a></p><p><br></p><p>Find more use cases at <a href=\"https://docs.buildship.com/ai-models/assistant\" rel=\"noopener noreferrer\" target=\"_blank\">https://docs.buildship.com/ai-models/assistant</a></p>"
}
