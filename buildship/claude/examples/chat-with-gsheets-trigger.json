{
  "nodes": [
    {
      "id": "5d629d13-9871-4c60-9da3-3af9b117bf9d",
      "name": "Claude Assistant",
      "meta": {
        "name": "Claude Assistant",
        "description": "",
        "id": "claude-assistant-node",
        "icon": {
          "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fanthropic.png?alt=media&token=ec0eb8dc-f0d4-4f97-a144-023f1aa8118e",
          "type": "URL"
        }
      },
      "subType": "assistant",
      "type": "script",
      "nodes": [
        {
          "type": "script",
          "label": "Get Sheets",
          "name": "Get Sheets",
          "inputs": {
            "required": ["apiKey", "includeGridData", "spreadsheetUrl", "ranges"],
            "type": "object",
            "properties": {
              "ranges": {
                "default": [],
                "description": "The ranges to retrieve from the spreadsheet.\n\n**SAMPLE INPUT:**\n```\n[\"Sheet1\"]\n```",
                "buildship": { "sensitive": false, "index": 1 },
                "pattern": "",
                "type": "string",
                "title": "Ranges"
              },
              "spreadsheetUrl": {
                "pattern": "",
                "type": "string",
                "title": "Sheet URL",
                "default": "",
                "description": "The URL of the Google Spreadsheet to fetch. [Refer API Documentation](https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/create).\n\nTIP ðŸ’¡: Available in the following format in your Google Sheets: `https://docs.google.com/spreadsheets/d/spreadsheet-id/edit`",
                "buildship": { "index": 0, "sensitive": false }
              }
            }
          },
          "_libRef": {
            "libNodeRefId": "@buildship/oauth-gsheets-get-sheet",
            "version": "1.0.3",
            "isDirty": true,
            "libType": "public",
            "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/oauth-gsheets-get-sheet/1.0.3/build.cjs",
            "integrity": "v3:f8f3b15ffb6cca5de72ce53e98a588b5"
          },
          "onFail": null,
          "dependencies": { "node-fetch": "2.7.0" },
          "meta": {
            "id": "oauth-gsheets-get-sheet",
            "icon": {
              "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2FGoogleSheets.png?alt=media&token=89b3cfec-6746-43da-a404-5d20adb60472",
              "type": "URL"
            },
            "name": "Get Sheets",
            "description": "Fetch a Google Spreadsheet using the Google Sheets API"
          },
          "integrations": ["gsheets"],
          "script": "import fetch from 'node-fetch';\n\nexport default async function fetchGoogleSpreadsheet({\n    spreadsheetUrl,\n    ranges\n}, {\n    auth,\n    logging\n}) {\n    const { access_token } = await auth.getToken();\n\n    // Extracting spreadsheetId from the URL\n    const regex = /\\/spreadsheets\\/d\\/([a-zA-Z0-9-_]+)/;\n    const match = spreadsheetUrl.match(regex);\n    if (!match) {\n        throw new Error('Invalid spreadsheet URL');\n    }\n    const spreadsheetId = match[1];\n\n  \n    const response = await fetch(`https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${ranges}`, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${access_token}`\n        }\n    });\n    const data = await response.json();\n    return data;\n}\n",
          "output": {
            "type": "object",
            "buildship": {},
            "description": "The data of the fetched Google Spreadsheet",
            "title": "Spreadsheet Data"
          },
          "id": "7311797f-8b8d-4c89-8b54-70ba2ca3430b"
        }
      ],
      "output": {
        "properties": {
          "chatHistory": { "buildship": { "index": 1 }, "title": "Chat History", "type": "array", "description": "" },
          "response": { "buildship": { "index": 0 }, "title": "Response", "type": "string", "description": "" },
          "error": { "description": "", "title": "Error", "buildship": { "index": 2 } },
          "data": {
            "buildship": { "index": 3 },
            "type": "object",
            "properties": {},
            "description": "",
            "title": "Data"
          }
        },
        "buildship": { "index": 0 },
        "type": "object",
        "title": "",
        "description": ""
      },
      "dependencies": { "axios": "0.28.1" },
      "script": "import axios from \"axios\";\n\nconst nodeToClaudeTool: (node: Node) => ClaudeTool = (node) => {\n  return {\n    // Use node.id as the name of the tool. Spaces are not allowed.\n    name: node.id,\n    description: node.meta.description ?? \"\",\n    input_schema: {\n      type: \"object\",\n      properties: Object.entries(node.inputs.properties)\n        .reduce((properties, [name, value]) => {\n          if (value.buildship && !value.buildship.toBeAutoFilled) return properties;\n          return {\n            ...properties, [name]: {\n              type: value.type,\n              enum: value.enum,\n              description: value.description\n            }\n          }\n        }, {}),\n      required: Object.entries(node.inputs.properties).map(([name, value]) => {\n        if (value.buildship && value.buildship.toBeAutoFilled && node.inputs.required.includes(name)) return name;\n        return false;\n      }).filter(Boolean) as string[],\n    },\n  };\n}\n\ntype Params = {\n  claudeApiKey: string;\n  model: string;\n  maxTokens: number;\n  userPrompt: string;\n  systemPrompt?: string;\n  chatHistory?: ClaudeMessage[];\n};\n\nexport default async function assistant(\n  { claudeApiKey, model, maxTokens, userPrompt, systemPrompt, chatHistory }: Params,\n  { logging, execute, nodes }: any\n) {\n  const version = \"2023-06-01\";\n  const beta = \"tools-2024-04-04\";\n\n  const client = axios.create({\n    baseURL: \"https://api.anthropic.com/v1\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'x-api-key': claudeApiKey,\n      'anthropic-version': version,\n      'anthropic-beta': beta\n    }\n  });\n\n  const tools: ClaudeTool[] = nodes?.map(nodeToClaudeTool) ?? [];\n\n  const initialMessages = [\n    ...(chatHistory ?? []),\n    {\n      \"role\": \"user\",\n      \"content\": userPrompt,\n    }];\n\n  const baseRequest = {\n    \"model\": model,\n    \"max_tokens\": maxTokens,\n    \"system\": systemPrompt || \"\",\n    \"tools\": tools,\n    \"messages\": initialMessages\n  } as ClaudeRequest;\n\n  try {\n    let request = { ...baseRequest };\n    let requestCount = 1;\n    logging.log(`Claude request(${requestCount}):`, baseRequest);\n    let response = await client.post(\"/messages\", request);\n    logging.log(`Claude response(${requestCount}): `, response.data);\n\n    do {\n      if (response.data.type === \"error\") {\n        throw response.data.error;\n      }\n\n      let result = response.data;\n\n      const isEndTurn = result.stop_reason === \"end_turn\";\n      if (isEndTurn) break;\n\n      const content = result.content;\n      request.messages.push({ role: \"assistant\", content });\n\n      const isToolUse = result.stop_reason === \"tool_use\" && content instanceof Array;\n      if (isToolUse) {\n        const toolUseMessageContent = [] as ClaudeToolResultContent[];\n\n        const toolUses: ClaudeToolUseContent[] = content.filter(content => content.type === \"tool_use\");\n        for (const toolUse of toolUses) {\n          const tool = tools.find(tool => tool.name === toolUse.name);\n          const node = nodes?.find((node: Node) => node.id === toolUse.name);\n          if (!tool || !node) {\n            logging.log(\"Failed to find tool:\");\n            logging.log(toolUse);\n            logging.log(node);\n            throw new Error(\"Failed to find tool\");\n          }\n          logging.log(\"Tool node: \", node.name);\n          // filter hallucinated inputs\n          const inputs = {} as Record<string, string>;\n          for (const [inputKey, inputValue] of Object.entries(toolUse.input)) {\n            if (node.inputs.properties[inputKey]) {\n              inputs[inputKey] = inputValue;\n            }\n          }\n          const toolResponse = await execute(node.label, inputs);\n          logging.log(\"Tool response: \", toolResponse);\n          toolUseMessageContent.push({\n            type: \"tool_result\",\n            tool_use_id: toolUse.id,\n            content: toolResponse ? JSON.stringify(toolResponse) : \"\",\n          });\n        }\n        request.messages.push({\n          role: \"user\",\n          content: toolUseMessageContent\n        });\n      }\n      requestCount++;\n      logging.log(`Claude request(${requestCount}):`, request);\n      response = await client.post(\"/messages\", request);\n      logging.log(`Claude response(${requestCount}): `, response.data);\n    } while (response && response.data && response.data.stop_reason !== \"end_turn\");\n\n    return {\n      response: response.data.content[0].text,\n      chatHistory: [...request.messages, { role: \"assistant\", content: response.data.content }],\n      data: response.data,\n      error: null,\n    }\n  } catch (error) {\n    logging.log(`Error: ${error}`);\n    return { error }\n  }\n}\n\ntype Node = {\n  label: string;\n  meta: {\n    id: string;\n    description: string;\n    name: string;\n    [key: string]: any;\n  };\n  inputs: {\n    type: string;\n    required: string[];\n    properties: Record<string, {\n      description: string;\n      buildship?: {\n        toBeAutoFilled?: boolean;\n        [key: string]: any;\n      }\n      [key: string]: any;\n    }>;\n  };\n  [key: string]: any;\n};\n\ntype ClaudeTool = {\n  name: string;\n  description: string;\n  input_schema: {\n    type: string;\n    properties: Record<string, {\n      type: string;\n      description: string;\n      enum?: string[];\n    }>;\n    required: string[];\n  };\n};\n\ntype ClaudeTextContent = {\n  type: \"text\";\n  text: string;\n};\n\ntype ClaudeToolUseContent = {\n  type: \"tool_use\",\n  id: string,\n  name: string,\n  input: Record<string, string>\n};\n\ntype ClaudeToolResultContent = {\n  type: \"tool_result\",\n  tool_use_id: string,\n  content: string\n};\n\ntype ClaudeMessage = {\n  role: \"user\" | \"assistant\",\n  content: ClaudeResponse[\"content\"]\n};\n\ntype ClaudeRequest = {\n  \"model\": string,\n  \"max_tokens\": number,\n  \"tools\": ClaudeTool[],\n  \"messages\": ClaudeMessage[]\n};\n\ntype ClaudeResponse = {\n  \"id\": string,\n  \"type\": \"message\",\n  \"role\": \"assistant\",\n  \"model\": string,\n  \"stop_sequence\": null,\n  \"usage\": { \"input_tokens\": number, \"output_tokens\": number },\n  \"content\": string | ClaudeTextContent[] | ClaudeToolUseContent[] | ClaudeToolResultContent[];\n  \"stop_reason\": \"tool_use\" | \"stop_sequence\" | \"end_turn\"\n};\n",
      "inputs": {
        "type": "object",
        "properties": {
          "threadId": {
            "pattern": "",
            "buildship": { "sensitive": false, "index": 5 },
            "type": "string",
            "title": "Thread Id",
            "description": "",
            "default": ""
          },
          "claudeApiKey": {
            "description": "The OpenAI API key to use for authentication.",
            "type": "string",
            "pattern": "",
            "title": "API Key",
            "buildship": { "index": 0, "sensitive": true }
          },
          "userPrompt": {
            "description": "",
            "default": "",
            "title": "User Prompt",
            "type": "string",
            "pattern": "",
            "buildship": { "index": 2, "sensitive": false }
          },
          "systemPrompt": {
            "default": "",
            "buildship": { "sensitive": false, "index": 1 },
            "type": "string",
            "description": "",
            "pattern": "",
            "title": "Instructions"
          },
          "model": {
            "default": "claude-3-opus-20240229",
            "type": "string",
            "title": "Model",
            "buildship": {
              "index": 4,
              "sensitive": false,
              "options": [
                { "label": "Claude 3 Opus", "value": "claude-3-opus-20240229" },
                { "label": "Claude 3 Sonnet", "value": "claude-3-sonnet-20240229" },
                { "label": "Claude 3 Haiku", "value": "claude-3-haiku-20240307" }
              ]
            },
            "pattern": "",
            "description": "",
            "enum": ["claude-3-opus-20240229", "claude-3-sonnet-20240229", "claude-3-haiku-20240307"]
          },
          "maxTokens": {
            "buildship": { "index": 4, "sensitive": false },
            "pattern": "",
            "title": "Max Tokens",
            "default": "",
            "type": "number",
            "description": ""
          }
        },
        "required": ["maxTokens", "userPrompt", "claudeApiKey", "model", "systemPrompt"]
      },
      "label": "Claude Assistant",
      "onFail": null,
      "integrations": []
    },
    {
      "response": { "2XX": { "properties": {}, "type": "object" } },
      "inputs": {
        "required": [],
        "properties": {
          "status": {
            "type": "string",
            "default": "200",
            "buildship": {
              "options": [
                { "label": "OK (200)", "value": "200" },
                { "value": "201", "label": "Created (201)" },
                { "value": "202", "label": "Accepted (202)" },
                { "label": "Redirect (301)", "value": "301" },
                { "label": "No Content (204)", "value": "204" },
                { "value": "400", "label": "Bad Request (400)" },
                { "label": "Unauthorized (401)", "value": "401" },
                { "label": "Forbidden (403)", "value": "403" },
                { "value": "404", "label": "Not Found (404)" },
                { "value": "429", "label": "Too Many Requests (429)" },
                { "value": "500", "label": "Internal Server Error (500)" }
              ],
              "index": 0
            },
            "enum": ["200", "201", "202", "204", "400", "401", "403", "404", "429", "500"],
            "description": "The HTTP status code to return",
            "title": "Status code"
          },
          "cacheMaxAge": {
            "description": "Set cache duration in seconds",
            "buildship": { "index": 2 },
            "title": "Cache Time",
            "type": "number",
            "default": 0
          },
          "value": {
            "type": "string",
            "default": "",
            "description": "The value to return",
            "buildship": { "index": 1 },
            "title": "Value"
          }
        },
        "type": "object"
      },
      "label": "Return",
      "id": "931a6204-fbf6-41ca-aab4-3adcf43d7877",
      "type": "return",
      "description": "The Return Node is used to return values from the workflow. It is generally the last node in the workflow. The return node is optional as the API can inherently return a 200 OK response by default. [Full Documentation](https://docs.buildship.com/core-nodes/return)."
    }
  ],
  "trigger": {
    "testingSchema": [
      {
        "name": "endpointURL",
        "prefill": "endpointURL",
        "label": "Endpoint URL",
        "type": "shortText",
        "disabled": true
      },
      { "type": "apiRequestData", "prefill": "apiRequestData", "name": "apiRequestData" }
    ],
    "groupId": null,
    "output": {
      "buildship": {},
      "type": "object",
      "properties": {
        "query": {
          "buildship": { "index": 0 },
          "type": "object",
          "description": "Query parameters",
          "title": "Query parameters"
        },
        "headers": {
          "type": "object",
          "title": "Headers",
          "buildship": {},
          "description": "Headers of the request",
          "properties": {
            "content-type": {
              "description": "Content-Type of the request",
              "title": "Content-Type",
              "buildship": { "index": 0 },
              "type": "string"
            },
            "authorization": {
              "type": "string",
              "buildship": { "index": 1 },
              "description": "Authorization header",
              "title": "Authorization"
            }
          }
        },
        "body": { "title": "Body", "description": "Body of the request", "type": "object", "buildship": { "index": 1 } }
      },
      "title": "Request"
    },
    "type": "http",
    "label": "Rest API Call",
    "id": "http",
    "live": true,
    "script": "",
    "order": 1,
    "dependencies": {},
    "instruction": { "title": "Endpoint URL", "bodyTemplate": "https://{{runtimeUrl}}/{{httpPath}}" },
    "request": {
      "type": "object",
      "title": "Request",
      "properties": {
        "body": {
          "title": "Body",
          "properties": {
            "message": { "description": "", "buildship": { "index": 0 }, "type": "string", "title": "Message" },
            "threadId": { "title": "Thread Id", "buildship": { "index": 0 }, "description": "", "type": "string" }
          },
          "buildship": {},
          "description": "Body of the request",
          "type": "object"
        },
        "headers": {
          "type": "object",
          "title": "Request Headers",
          "description": "Headers of the request",
          "properties": {},
          "buildship": {}
        },
        "query": {
          "type": "object",
          "title": "Query",
          "buildship": {},
          "description": "Query parameters",
          "properties": {}
        }
      },
      "buildship": {},
      "required": []
    },
    "meta": {
      "id": "http",
      "description": "Create an API / HTTP endpoint as the trigger or starting point for your workflow. This endpoint can be used in other apps to run the workflow. [Full documentation](https://docs.buildship.com/trigger-nodes/rest-api)",
      "icon": {},
      "name": "Rest API Call"
    },
    "inputs": {
      "type": "object",
      "properties": {
        "method": {
          "title": "Method",
          "type": "string",
          "enum": ["GET", "POST", "PUT", "DELETE"],
          "description": "The HTTP method for the incoming request.",
          "pattern": "",
          "buildship": {
            "index": 1,
            "sensitive": false,
            "options": [
              { "value": "GET", "label": "GET" },
              { "label": "POST", "value": "POST" },
              { "value": "PUT", "label": "PUT" },
              { "value": "DELETE", "label": "DELETE" }
            ]
          },
          "default": "GET"
        },
        "path": {
          "default": "/",
          "type": "string",
          "title": "Path",
          "buildship": { "sensitive": false, "index": 0 },
          "pattern": "",
          "description": "The path of the API Endpoint. Additionally, define the structure for the incoming API requests. [Learn more about API Specification here](https://docs.buildship.com/basics/api-spec#request-specification)."
        }
      },
      "required": ["method", "path"]
    }
  },
  "nodeValues": {
    "7311797f-8b8d-4c89-8b54-70ba2ca3430b": { "ranges": "", "spreadsheetUrl": "" },
    "931a6204-fbf6-41ca-aab4-3adcf43d7877": {
      "value": {
        "type": "javascript",
        "expression": "{\n  \"message\": ctx[\"root\"][\"5d629d13-9871-4c60-9da3-3af9b117bf9d\"][\"response\"],\n  \"threadId\": \"\"\n}"
      },
      "cacheMaxAge": 0,
      "status": "200"
    },
    "5d629d13-9871-4c60-9da3-3af9b117bf9d": {
      "userPrompt": { "keys": ["request", "body", "message"] },
      "threadId": { "keys": ["request", "body", "threadId"] },
      "systemPrompt": "You are a Azura Home specialist. You have a detailed knowledge of Azura Home's eco-friendly Mediterranean furniture and decor products. Your task is to provide informative and helpful responses to user inquiries about product materials, design inspirations, styles or pricing and any other specifics they might be interested in. Your answers should reflect the brand's commitment to sustainability, craftsmanship, and the Mediterranean aesthetic, helping users make informed decisions while fostering an appreciation for the unique qualities of each piece in the Azura Home collection. When you are given tools to use, you must use them following the guidelines for each tool.Guidelines:- when you start the conversation, you must use 'get sheets' tool to access Azure Home collection of products which read it from the defined spreadheet",
      "maxTokens": 1024,
      "claudeApiKey": "",
      "model": "claude-3-haiku-20240307"
    },
    "http": { "method": "POST", "path": "/claude-chat-with-gsheets" }
  },
  "notes": "<p>An assistant that allows you to chat with a google sheets. Here the sheets had data about furnitures. Try it using this test request body:</p><p><br></p><p>{</p><p>&nbsp;\"message\":\"what price range are your Mediterranean sofas?\"</p><p>}</p><p><br></p><p>Short Video: <a href=\"https://www.youtube.com/watch?v=OiQJQMk_2mo\" rel=\"noopener noreferrer\" target=\"_blank\">youtube.com/watch?v=OiQJQMk_2mo</a></p><p>Documentation: <a href=\"https://docs.buildship.com/ai-models/assistant#use-case-i-chat-with-assistant\" rel=\"noopener noreferrer\" target=\"_blank\">docs.buildship.com/ai-models/assistant</a></p>"
}
