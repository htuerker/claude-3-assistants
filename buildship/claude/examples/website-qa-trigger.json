{
  "nodes": [
    {
      "nodes": [
        {
          "type": "script",
          "integrations": [],
          "inputs": {
            "type": "object",
            "required": ["url", "selector"],
            "properties": {
              "url": {
                "pattern": "",
                "type": "string",
                "buildship": { "sensitive": false, "index": 0, "toBeAutoFilled": true },
                "title": "URL",
                "default": "",
                "description": "The url to scrape."
              },
              "selector": {
                "title": "Selector",
                "description": "A valid HTML selector.",
                "buildship": { "index": 1, "sensitive": false },
                "pattern": "",
                "type": "string",
                "default": "body"
              }
            }
          },
          "name": "get website",
          "meta": {
            "name": "get website",
            "description": "Scrape a given web url and return the text content",
            "icon": {
              "type": "SVG",
              "svg": "<path d=\"M20 18c1.1 0 1.99-.9 1.99-2L22 6c0-1.11-.9-2-2-2H4c-1.11 0-2 .89-2 2v10c0 1.1.89 2 2 2H0v2h24v-2h-4ZM4 16V6h16v10.01L4 16Zm5.0967-6.0469c0-1.027.836-1.864 1.864-1.864 1.027 0 1.864.837 1.864 1.864 0 1.027-.837 1.864-1.864 1.864-1.028 0-1.864-.837-1.864-1.864Zm7.032 4.236-2.482-2.482c.331-.505.527-1.107.527-1.754 0-1.772-1.441-3.213-3.213-3.213s-3.214 1.441-3.214 3.213 1.442 3.214 3.214 3.214c.636 0 1.225-.192 1.724-.511l2.489 2.488.955-.955Z\"></path>"
            },
            "id": "scrape-web-url"
          },
          "output": { "type": "object", "properties": {}, "buildship": {}, "title": "Scrape Web URL" },
          "onFail": null,
          "label": "get website",
          "id": "a1c40319-eaae-454a-b584-4d2d8bb2d607",
          "_libRef": {
            "libNodeRefId": "@buildship/scrape-web-url",
            "libType": "public",
            "version": "1.0.0",
            "src": "https://storage.googleapis.com/buildship-app-us-central1/builtNodes/scrape-web-url/1.0.0.cjs",
            "isDirty": true,
            "integrity": "v3:83c1c98b54e96bb03b6b641e1f9a3d6c"
          },
          "script": "import axios from \"axios\";\nimport cheerio from \"cheerio\";\n\nexport default async function scrapeUrl({ url, selector }) {\n  const { data } = await axios.get(url);\n\n  const $ = cheerio.load(data);\n\n  $(\"script\").remove();\n\n  const content = $(selector).text().replace(/\\n/g, \"\");\n\n  return { content }\n}",
          "dependencies": { "cheerio": "1.0.0-rc.12", "axios": "1.6.2" }
        }
      ],
      "type": "script",
      "meta": {
        "name": "Claude Assistant",
        "icon": {
          "type": "URL",
          "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fanthropic.png?alt=media&token=ec0eb8dc-f0d4-4f97-a144-023f1aa8118e"
        },
        "id": "claude-assistant-node",
        "description": ""
      },
      "integrations": [],
      "subType": "assistant",
      "dependencies": { "axios": "0.28.1" },
      "onFail": null,
      "output": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {},
            "buildship": { "index": 3 },
            "description": "",
            "title": "Data"
          },
          "response": { "title": "Response", "type": "string", "description": "", "buildship": { "index": 0 } },
          "chatHistory": { "description": "", "title": "Chat History", "type": "array", "buildship": { "index": 1 } },
          "error": { "description": "", "title": "Error", "buildship": { "index": 2 } }
        },
        "buildship": { "index": 0 },
        "description": "",
        "title": ""
      },
      "inputs": {
        "properties": {
          "model": {
            "enum": ["claude-3-opus-20240229", "claude-3-sonnet-20240229", "claude-3-haiku-20240307"],
            "title": "Model",
            "buildship": {
              "index": 4,
              "sensitive": false,
              "options": [
                { "value": "claude-3-opus-20240229", "label": "Claude 3 Opus" },
                { "value": "claude-3-sonnet-20240229", "label": "Claude 3 Sonnet" },
                { "label": "Claude 3 Haiku", "value": "claude-3-haiku-20240307" }
              ]
            },
            "pattern": "",
            "type": "string",
            "default": "claude-3-opus-20240229",
            "description": ""
          },
          "maxTokens": {
            "description": "",
            "title": "Max Tokens",
            "type": "number",
            "default": "",
            "buildship": { "sensitive": false, "index": 4 },
            "pattern": ""
          },
          "claudeApiKey": {
            "type": "string",
            "description": "The OpenAI API key to use for authentication.",
            "buildship": { "index": 0, "sensitive": true },
            "pattern": "",
            "title": "API Key"
          },
          "threadId": {
            "buildship": { "index": 5, "sensitive": false },
            "description": "",
            "type": "string",
            "pattern": "",
            "title": "Thread Id",
            "default": ""
          },
          "userPrompt": {
            "pattern": "",
            "description": "",
            "title": "User Prompt",
            "type": "string",
            "default": "",
            "buildship": { "index": 2, "sensitive": false }
          },
          "systemPrompt": {
            "default": "",
            "buildship": { "sensitive": false, "index": 1 },
            "title": "Instructions",
            "description": "",
            "type": "string",
            "pattern": ""
          }
        },
        "required": ["maxTokens", "userPrompt", "claudeApiKey", "model", "systemPrompt"],
        "type": "object"
      },
      "label": "Claude Assistant",
      "id": "edc050bb-97ae-457c-93f5-28a8b63b58e3",
      "name": "Claude Assistant",
      "script": "import axios from \"axios\";\n\nconst nodeToClaudeTool: (node: Node) => ClaudeTool = (node) => {\n  return {\n    // Use node.id as the name of the tool. Spaces are not allowed.\n    name: node.id,\n    description: node.meta.description ?? \"\",\n    input_schema: {\n      type: \"object\",\n      properties: Object.entries(node.inputs.properties)\n        .reduce((properties, [name, value]) => {\n          if (value.buildship && !value.buildship.toBeAutoFilled) return properties;\n          return {\n            ...properties, [name]: {\n              type: value.type,\n              enum: value.enum,\n              description: value.description\n            }\n          }\n        }, {}),\n      required: Object.entries(node.inputs.properties).map(([name, value]) => {\n        if (value.buildship && value.buildship.toBeAutoFilled && node.inputs.required.includes(name)) return name;\n        return false;\n      }).filter(Boolean) as string[],\n    },\n  };\n}\n\ntype Params = {\n  claudeApiKey: string;\n  model: string;\n  maxTokens: number;\n  userPrompt: string;\n  systemPrompt?: string;\n  chatHistory?: ClaudeMessage[];\n};\n\nexport default async function assistant(\n  { claudeApiKey, model, maxTokens, userPrompt, systemPrompt, chatHistory }: Params,\n  { logging, execute, nodes }: any\n) {\n  const version = \"2023-06-01\";\n  const beta = \"tools-2024-04-04\";\n\n  const client = axios.create({\n    baseURL: \"https://api.anthropic.com/v1\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'x-api-key': claudeApiKey,\n      'anthropic-version': version,\n      'anthropic-beta': beta\n    }\n  });\n\n  const tools: ClaudeTool[] = nodes?.map(nodeToClaudeTool) ?? [];\n\n  const initialMessages = [\n    ...(chatHistory ?? []),\n    {\n      \"role\": \"user\",\n      \"content\": userPrompt,\n    }];\n\n  const baseRequest = {\n    \"model\": model,\n    \"max_tokens\": maxTokens,\n    \"system\": systemPrompt || \"\",\n    \"tools\": tools,\n    \"messages\": initialMessages\n  } as ClaudeRequest;\n\n  try {\n    let request = { ...baseRequest };\n    let requestCount = 1;\n    logging.log(`Claude request(${requestCount}):`, baseRequest);\n    let response = await client.post(\"/messages\", request);\n    logging.log(`Claude response(${requestCount}): `, response.data);\n\n    do {\n      if (response.data.type === \"error\") {\n        throw response.data.error;\n      }\n\n      let result = response.data;\n\n      const isEndTurn = result.stop_reason === \"end_turn\";\n      if (isEndTurn) break;\n\n      const content = result.content;\n      request.messages.push({ role: \"assistant\", content });\n\n      const isToolUse = result.stop_reason === \"tool_use\" && content instanceof Array;\n      if (isToolUse) {\n        const toolUseMessageContent = [] as ClaudeToolResultContent[];\n\n        const toolUses: ClaudeToolUseContent[] = content.filter(content => content.type === \"tool_use\");\n        for (const toolUse of toolUses) {\n          const tool = tools.find(tool => tool.name === toolUse.name);\n          const node = nodes?.find((node: Node) => node.id === toolUse.name);\n          if (!tool || !node) {\n            logging.log(\"Failed to find tool:\");\n            logging.log(toolUse);\n            logging.log(node);\n            throw new Error(\"Failed to find tool\");\n          }\n          logging.log(\"Tool node: \", node.name);\n          // filter hallucinated inputs\n          const inputs = {} as Record<string, string>;\n          for (const [inputKey, inputValue] of Object.entries(toolUse.input)) {\n            if (node.inputs.properties[inputKey]) {\n              inputs[inputKey] = inputValue;\n            }\n          }\n          const toolResponse = await execute(node.label, inputs);\n          logging.log(\"Tool response: \", toolResponse);\n          toolUseMessageContent.push({\n            type: \"tool_result\",\n            tool_use_id: toolUse.id,\n            content: toolResponse ? JSON.stringify(toolResponse) : \"\",\n          });\n        }\n        request.messages.push({\n          role: \"user\",\n          content: toolUseMessageContent\n        });\n      }\n      requestCount++;\n      logging.log(`Claude request(${requestCount}):`, request);\n      response = await client.post(\"/messages\", request);\n      logging.log(`Claude response(${requestCount}): `, response.data);\n    } while (response && response.data && response.data.stop_reason !== \"end_turn\");\n\n    return {\n      response: response.data.content[0].text,\n      chatHistory: [...request.messages, { role: \"assistant\", content: response.data.content }],\n      data: response.data,\n      error: null,\n    }\n  } catch (error) {\n    logging.log(`Error: ${error}`);\n    return { error }\n  }\n}\n\ntype Node = {\n  label: string;\n  meta: {\n    id: string;\n    description: string;\n    name: string;\n    [key: string]: any;\n  };\n  inputs: {\n    type: string;\n    required: string[];\n    properties: Record<string, {\n      description: string;\n      buildship?: {\n        toBeAutoFilled?: boolean;\n        [key: string]: any;\n      }\n      [key: string]: any;\n    }>;\n  };\n  [key: string]: any;\n};\n\ntype ClaudeTool = {\n  name: string;\n  description: string;\n  input_schema: {\n    type: string;\n    properties: Record<string, {\n      type: string;\n      description: string;\n      enum?: string[];\n    }>;\n    required: string[];\n  };\n};\n\ntype ClaudeTextContent = {\n  type: \"text\";\n  text: string;\n};\n\ntype ClaudeToolUseContent = {\n  type: \"tool_use\",\n  id: string,\n  name: string,\n  input: Record<string, string>\n};\n\ntype ClaudeToolResultContent = {\n  type: \"tool_result\",\n  tool_use_id: string,\n  content: string\n};\n\ntype ClaudeMessage = {\n  role: \"user\" | \"assistant\",\n  content: ClaudeResponse[\"content\"]\n};\n\ntype ClaudeRequest = {\n  \"model\": string,\n  \"max_tokens\": number,\n  \"tools\": ClaudeTool[],\n  \"messages\": ClaudeMessage[]\n};\n\ntype ClaudeResponse = {\n  \"id\": string,\n  \"type\": \"message\",\n  \"role\": \"assistant\",\n  \"model\": string,\n  \"stop_sequence\": null,\n  \"usage\": { \"input_tokens\": number, \"output_tokens\": number },\n  \"content\": string | ClaudeTextContent[] | ClaudeToolUseContent[] | ClaudeToolResultContent[];\n  \"stop_reason\": \"tool_use\" | \"stop_sequence\" | \"end_turn\"\n};\n"
    },
    {
      "label": "Return",
      "inputs": {
        "required": [],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "title": "Status code",
            "enum": ["200", "201", "202", "204", "400", "401", "403", "404", "429", "500"],
            "description": "The HTTP status code to return",
            "default": "200",
            "buildship": {
              "index": 0,
              "options": [
                { "label": "OK (200)", "value": "200" },
                { "value": "201", "label": "Created (201)" },
                { "label": "Accepted (202)", "value": "202" },
                { "label": "Redirect (301)", "value": "301" },
                { "value": "204", "label": "No Content (204)" },
                { "label": "Bad Request (400)", "value": "400" },
                { "label": "Unauthorized (401)", "value": "401" },
                { "value": "403", "label": "Forbidden (403)" },
                { "label": "Not Found (404)", "value": "404" },
                { "value": "429", "label": "Too Many Requests (429)" },
                { "value": "500", "label": "Internal Server Error (500)" }
              ]
            }
          },
          "value": {
            "type": "string",
            "description": "The value to return",
            "buildship": { "index": 1 },
            "title": "Value",
            "default": ""
          },
          "cacheMaxAge": {
            "title": "Cache Time",
            "type": "number",
            "default": 0,
            "buildship": { "index": 2 },
            "description": "Set cache duration in seconds"
          }
        }
      },
      "response": { "2XX": { "properties": {}, "type": "object" } },
      "description": "The Return Node is used to return values from the workflow. It is generally the last node in the workflow. The return node is optional as the API can inherently return a 200 OK response by default. [Full Documentation](https://docs.buildship.com/core-nodes/return).",
      "id": "ad9228d1-378f-4cb3-aa15-b9c0eca56af2",
      "type": "return"
    }
  ],
  "trigger": {
    "meta": {
      "description": "Create an API / HTTP endpoint as the trigger or starting point for your workflow. This endpoint can be used in other apps to run the workflow. [Full documentation](https://docs.buildship.com/trigger-nodes/rest-api)",
      "icon": {},
      "name": "Rest API Call",
      "id": "http"
    },
    "testingSchema": [
      {
        "disabled": true,
        "type": "shortText",
        "name": "endpointURL",
        "label": "Endpoint URL",
        "prefill": "endpointURL"
      },
      { "type": "apiRequestData", "name": "apiRequestData", "prefill": "apiRequestData" }
    ],
    "groupId": null,
    "request": {
      "properties": {
        "body": {
          "buildship": {},
          "type": "object",
          "properties": {
            "message": { "title": "Message", "buildship": { "index": 0 }, "type": "string", "description": "" },
            "threadId": { "buildship": { "index": 0 }, "type": "string", "title": "Thread Id", "description": "" }
          },
          "title": "Body",
          "description": "Body of the request"
        },
        "headers": {
          "title": "Request Headers",
          "type": "object",
          "description": "Headers of the request",
          "buildship": {},
          "properties": {}
        },
        "query": {
          "description": "Query parameters",
          "title": "Query",
          "type": "object",
          "properties": {},
          "buildship": {}
        }
      },
      "type": "object",
      "title": "Request",
      "buildship": {},
      "required": []
    },
    "inputs": {
      "type": "object",
      "properties": {
        "method": {
          "type": "string",
          "pattern": "",
          "default": "GET",
          "description": "The HTTP method for the incoming request.",
          "title": "Method",
          "buildship": {
            "index": 1,
            "options": [
              { "value": "GET", "label": "GET" },
              { "label": "POST", "value": "POST" },
              { "value": "PUT", "label": "PUT" },
              { "value": "DELETE", "label": "DELETE" }
            ],
            "sensitive": false
          },
          "enum": ["GET", "POST", "PUT", "DELETE"]
        },
        "path": {
          "default": "/",
          "title": "Path",
          "type": "string",
          "pattern": "",
          "buildship": { "sensitive": false, "index": 0 },
          "description": "The path of the API Endpoint. Additionally, define the structure for the incoming API requests. [Learn more about API Specification here](https://docs.buildship.com/basics/api-spec#request-specification)."
        }
      },
      "required": ["method", "path"]
    },
    "live": true,
    "instruction": { "bodyTemplate": "https://{{runtimeUrl}}/{{httpPath}}", "title": "Endpoint URL" },
    "output": {
      "title": "Request",
      "properties": {
        "body": {
          "description": "Body of the request",
          "title": "Body",
          "buildship": { "index": 1 },
          "type": "object"
        },
        "headers": {
          "type": "object",
          "title": "Headers",
          "buildship": {},
          "properties": {
            "authorization": {
              "buildship": { "index": 1 },
              "title": "Authorization",
              "type": "string",
              "description": "Authorization header"
            },
            "content-type": {
              "description": "Content-Type of the request",
              "title": "Content-Type",
              "buildship": { "index": 0 },
              "type": "string"
            }
          },
          "description": "Headers of the request"
        },
        "query": {
          "buildship": { "index": 0 },
          "title": "Query parameters",
          "description": "Query parameters",
          "type": "object"
        }
      },
      "buildship": {},
      "type": "object"
    },
    "type": "http",
    "script": "",
    "order": 1,
    "dependencies": {},
    "label": "Rest API Call",
    "id": "http"
  },
  "nodeValues": {
    "edc050bb-97ae-457c-93f5-28a8b63b58e3": {
      "systemPrompt": "You are an expert in searching information from different sources. Your goal is to respond user questions and requests using the sourc they provide. You must respond in a concise way and readable way. Please ensure that the information is accurate and up-to-date.   When you are given tools to use, you must use them following the guidelines for each tool. Guidelines: - when user asks for information of an specific website you must use 'get website' to scrape a each given website and return the information",
      "model": "claude-3-haiku-20240307",
      "threadId": { "keys": ["request", "body", "threadId"] },
      "maxTokens": 1024,
      "userPrompt": { "keys": ["request", "body", "message"] },
      "claudeApiKey": ""
    },
    "http": { "path": "/claude-website-qa", "method": "POST" },
    "a1c40319-eaae-454a-b584-4d2d8bb2d607": { "selector": "body", "url": "" },
    "ad9228d1-378f-4cb3-aa15-b9c0eca56af2": {
      "value": {
        "type": "javascript",
        "expression": "{\n  \"message\": ctx[\"root\"][\"edc050bb-97ae-457c-93f5-28a8b63b58e3\"][\"response\"],\n  \"threadId\": \"\"\n}"
      },
      "status": "200",
      "cacheMaxAge": 0
    }
  },
  "notes": "<p>An assistant that scrape a website and get your Assistant to answer questions about it. Try it using this test request body:</p><p><br></p><p>{\"message\":\"What plans I can do in Barcelona. Use this website to answer: <a href=\"https://www.timeout.com/barcelona/things-to-do/best-things-to-do-in-barcelona%22%7D\" rel=\"noopener noreferrer\" target=\"_blank\">https://www.timeout.com/barcelona/things-to-do/best-things-to-do-in-barcelona\"}</a></p><p><br></p><p>Short Video: <a href=\"https://www.youtube.com/watch?v=OiQJQMk_2mo\" rel=\"noopener noreferrer\" target=\"_blank\">youtube.com/watch?v=OiQJQMk_2mo</a></p><p>Documentation: <a href=\"https://docs.buildship.com/ai-models/assistant#use-case-i-chat-with-assistant\" rel=\"noopener noreferrer\" target=\"_blank\">docs.buildship.com/ai-models/assistant</a></p>"
}
