[
  {
    "script": "import axios from \"axios\";\n\nconst nodeToClaudeTool = (node) => {\n  return {\n    // Use node.id as the name of the tool. Spaces are not allowed.\n    name: node.id,\n    description: node.meta.description ?? \"\",\n    input_schema: {\n      type: \"object\",\n      properties: Object.entries(node.inputs.properties)\n        .reduce((properties, [name, value]) => {\n          if (value.buildship && !value.buildship.toBeAutoFilled) return properties;\n          return {\n            ...properties, [name]: {\n              type: value.type,\n              enum: value.enum,\n              description: value.description\n            }\n          }\n        }, {}),\n      // required: node.inputs.required ?? [],\n      required: Object.entries(node.inputs.properties).map(([name, value]) => {\n          if (value.buildship && value.buildship.toBeAutoFilled && node.inputs.required.includes(name)) return name;\n          return false;\n        }).filter(Boolean)\n    },\n  };\n}\n\nexport default async function assistant(\n  { claudeApiKey, model, maxTokens, userPrompt, instructions, chatHistory },\n  { logging, execute, nodes }\n) {\n  // TODO\n  const version = \"2023-06-01\";\n  const beta = \"tools-2024-04-04\";\n\n  const client = axios.create({\n    baseURL: \"https://api.anthropic.com/v1\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'x-api-key': claudeApiKey,\n      'anthropic-version': version,\n      'anthropic-beta': beta\n    }\n  });\n\n  const tools = nodes?.map(nodeToClaudeTool) ?? [];\n\n  const initialMessages = [\n    ...(chatHistory ?? []),\n    {\n      \"role\": \"user\",\n      \"content\": userPrompt,\n    }];\n\n  const baseRequest = {\n    \"model\": model,\n    \"max_tokens\": maxTokens,\n    \"system\": instructions || \"\",\n    \"tools\": tools,\n    \"messages\": initialMessages\n  };\n\n  try {\n    let request = { ...baseRequest };\n    let requestCount = 1;\n    logging.log(`Claude request(${requestCount}):`, baseRequest);\n    let response = await client.post(\"/messages\", request);\n    logging.log(`Claude response(${requestCount}): `, response.data);\n\n    do {\n      if (response.status !== 200) {\n        // improve\n        if (response.data.type === \"error\") {\n          throw response.data.error;\n        }\n        throw response;\n      }\n\n      let result = response.data;\n\n      const isEndTurn = result.stop_reason === \"end_turn\";\n      if(isEndTurn) break;\n      \n      const content = result.content;\n      request.messages.push({ role: \"assistant\", content });\n      \n      const isToolUse = result.stop_reason === \"tool_use\" && content instanceof Array;\n      if (isToolUse) {\n        const toolUseMessage = {\n          role: \"user\",\n          content: []\n        };\n        const toolUses = content.filter(content => content.type === \"tool_use\");\n        for (const toolUse of toolUses) {\n          const tool = tools.find(tool => tool.name === toolUse.name);\n          const node = nodes?.find(node => node.id === toolUse.name);\n          if (!tool || !node) {\n            throw new Error(`Unknown tool: ${toolUse}`);\n          }\n          logging.log(\"Tool node: \", node.name);\n          const toolResponse = await execute(node.label, toolUse.input);\n          logging.log(\"Tool response: \", toolResponse);\n          toolUseMessage.content.push({\n            type: \"tool_result\",\n            tool_use_id: toolUse.id,\n            // use empty string as default content\n            content: toolResponse ? JSON.stringify(toolResponse) : \"\",\n          });\n        }\n        request.messages.push(toolUseMessage);\n      }\n\n      requestCount++;\n      logging.log(`Claude request(${requestCount}):`, request);\n      response = await client.post(\"/messages\", request);\n      logging.log(`Claude response(${requestCount}): `, response.data);\n    } while (response && response.data && response.data.stop_reason !== \"end_turn\");\n\n    return {\n      response: response.data.content[0].text,\n      chatHistory: [...request.messages, { role: \"assistant\", content: response.data.content }],\n      data: response.data,\n      error: null,\n    }\n  } catch (error) {\n    logging.log(`Error: ${error}`);\n    return { error }\n  }\n}",
    "inputs": {
      "properties": {
        "maxTokens": {
          "description": "",
          "type": "number",
          "buildship": {
            "sensitive": false,
            "index": 4
          },
          "default": "",
          "title": "Max Tokens",
          "pattern": ""
        },
        "instructions": {
          "pattern": "",
          "default": "",
          "description": "",
          "type": "string",
          "title": "Instructions",
          "buildship": {
            "sensitive": false,
            "index": 1
          }
        },
        "claudeApiKey": {
          "buildship": {
            "sensitive": true,
            "index": 0
          },
          "title": "API Key",
          "description": "The OpenAI API key to use for authentication.",
          "type": "string",
          "pattern": ""
        },
        "model": {
          "buildship": {
            "sensitive": false,
            "options": [
              {
                "label": "claude-3-opus-20240229",
                "value": "claude-3-opus-20240229"
              }
            ],
            "index": 4
          },
          "type": "string",
          "default": "claude-3-opus-20240229",
          "enum": ["claude-3-opus-20240229"],
          "description": "",
          "title": "Model",
          "pattern": ""
        },
        "chatHistory": {
          "buildship": {
            "sensitive": false,
            "index": 5
          },
          "description": "",
          "default": [],
          "type": "array",
          "title": "Chat History",
          "pattern": ""
        },
        "userPrompt": {
          "description": "",
          "type": "string",
          "pattern": "",
          "buildship": {
            "index": 2,
            "sensitive": false
          },
          "title": "User Prompt",
          "default": ""
        }
      },
      "type": "object",
      "required": ["model", "maxTokens", "userPrompt", "claudeApiKey", "instructions"]
    },
    "subType": "assistant",
    "onFail": null,
    "dependencies": {
      "axios": "0.28.1"
    },
    "integrations": [],
    "meta": {
      "id": "claude-assistant-node",
      "icon": {
        "type": "URL",
        "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fanthropic.png?alt=media&token=ec0eb8dc-f0d4-4f97-a144-023f1aa8118e"
      },
      "description": "",
      "name": "Claude Assistant"
    },
    "id": "3045865d-f89c-4efe-b786-4853ddccb7b5",
    "nodes": [],
    "label": "Claude Assistant",
    "type": "script",
    "output": {
      "properties": {
        "chatHistory": {
          "description": "",
          "title": "Chat History",
          "buildship": {
            "index": 1
          },
          "type": "array"
        },
        "error": {
          "buildship": {
            "index": 2
          },
          "title": "Error",
          "description": ""
        },
        "response": {
          "type": "string",
          "buildship": {
            "index": 0
          },
          "description": "",
          "title": "Response"
        },
        "data": {
          "buildship": {
            "index": 3
          },
          "title": "Data",
          "type": "object",
          "properties": {},
          "description": ""
        }
      },
      "title": "",
      "description": "",
      "buildship": {
        "index": 0
      },
      "type": "object"
    },
    "name": "Claude Assistant",
    "values": {
      "model": "claude-3-opus-20240229",
      "chatHistory": {
        "type": "javascript",
        "expression": "[]"
      },
      "maxTokens": 1024,
      "userPrompt": "",
      "claudeApiKey": "",
      "instructions": ""
    }
  }
]
