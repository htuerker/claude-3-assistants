{
  "nodes": [
    {
      "id": "62979cb6-d40c-45ef-bb6f-e48946447427",
      "name": "Groq Assistant",
      "type": "script",
      "nodes": [],
      "integrations": [],
      "label": "Groq Assistant",
      "subType": "assistant",
      "output": {
        "title": "",
        "properties": {
          "message": { "buildship": { "index": 0 }, "type": "string", "title": "Message", "description": "" },
          "threadId": { "type": "string", "title": "Thread Id", "buildship": { "index": 1 }, "description": "" },
          "data": { "description": "", "buildship": { "index": 2 }, "type": "string", "title": "Data" }
        },
        "type": "object",
        "description": "",
        "buildship": { "index": 0 }
      },
      "dependencies": { "groq-sdk": "0.3.3", "lodash": "4.17.21" },
      "inputs": {
        "required": ["maxTokens", "userPrompt", "systemPrompt", "groqApiKey", "model"],
        "type": "object",
        "properties": {
          "threadId": {
            "pattern": "",
            "buildship": { "index": 5, "sensitive": false },
            "default": "",
            "description": "",
            "type": "string",
            "title": "Thread Id"
          },
          "model": {
            "pattern": "",
            "default": "llama3-8b-8192",
            "type": "string",
            "enum": ["llama3-70b-8192", "llama3-8b-8192", "mixtral-8x7b-32768", "gemma-7b-it"],
            "buildship": {
              "options": [
                { "label": "LLaMA3 70b", "value": "llama3-70b-8192" },
                { "label": "LLaMA3 8b", "value": "llama3-8b-8192" },
                { "label": "Mixtral 8x7b", "value": "mixtral-8x7b-32768" },
                { "label": "Gemma 7b", "value": "gemma-7b-it" }
              ],
              "index": 4,
              "sensitive": false
            },
            "description": "",
            "title": "Model"
          },
          "groqApiKey": {
            "description": "",
            "title": "API Key",
            "pattern": "",
            "type": "string",
            "buildship": { "sensitive": true, "index": 0 }
          },
          "systemPrompt": {
            "buildship": { "index": 1, "sensitive": false },
            "type": "string",
            "description": "",
            "title": "Instructions",
            "pattern": "",
            "default": ""
          },
          "userPrompt": {
            "type": "string",
            "buildship": { "index": 2, "sensitive": false },
            "title": "User Prompt",
            "description": "",
            "pattern": "",
            "default": ""
          },
          "maxTokens": {
            "type": "number",
            "title": "Max Tokens",
            "description": "",
            "pattern": "",
            "default": "",
            "buildship": { "sensitive": false, "index": 4 }
          }
        }
      },
      "meta": {
        "name": "Groq Assistant",
        "description": "",
        "icon": {
          "type": "URL",
          "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fgroq.png?alt=media&token=7f60edf7-f402-4762-8334-00cb2981cef0"
        },
        "id": "groq-assistant-node"
      },
      "onFail": null,
      "script": "import Groq from 'groq-sdk';\nimport { snakeCase } from \"lodash\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsonc } from 'jsonc';\n\nconst getChatHistory = (threadId: string, logging: any) => {\n  // Load previous messages if the file exists\n  let previousMessages = [];\n  const filePath = process.env.BUCKET_FOLDER_PATH + '/nodes/groq-assistant/store/' + threadId + '.jsonl';\n  if (threadId) {\n    const fileExists = fs.existsSync(filePath);\n    if (fileExists) {\n      const fileContent = fs.readFileSync(filePath, 'utf8');\n      previousMessages = JSON.parse(fileContent);\n      logging.log(previousMessages);\n    }\n  }\n  return previousMessages;\n}\n\nconst appendChatHistory = (threadId: string, newMessages: unknown[]) => {\n  const filePath = process.env.BUCKET_FOLDER_PATH + '/nodes/groq-assistant/store/' + threadId + '.jsonl';\n  // Create folder path if it doesn't exist\n  const folderPath = path.dirname(filePath);\n  if (!fs.existsSync(folderPath)) {\n    fs.mkdirSync(folderPath, { recursive: true });\n  }\n  // Save userRequest and output to a JSONL file\n  const fileContent = JSON.stringify(newMessages);\n  fs.writeFileSync(filePath, fileContent);\n}\n\n\ntype Tool = Groq.Chat.CompletionCreateParams.Tool;\ntype FinishReason = \"stop\" | \"length\" | \"tool_calls\" | \"content_filter\";\n\nconst nodeToGroqTool: (node: Node) => Tool = (node) => {\n  return {\n    type: \"function\",\n    function: {\n      name: snakeCase(node.label || node.meta.name),\n      description: node.meta.description ?? \"\",\n      parameters: {\n        type: \"object\",\n        properties: Object.entries(node.inputs.properties)\n          .reduce((properties, [name, value]) => {\n            if (value.buildship && !value.buildship.toBeAutoFilled) return properties;\n            return {\n              ...properties, [name]: {\n                type: value.type,\n                enum: value.enum,\n                description: value.description\n              }\n            }\n          }, {}),\n        required: Object.entries(node.inputs.properties).map(([name, value]) => {\n          if (value.buildship && value.buildship.toBeAutoFilled && node.inputs.required.includes(name)) return name;\n          return false;\n        }).filter(Boolean),\n      }\n    }\n  };\n}\n\ntype Params = {\n  groqApiKey: string;\n  model: string;\n  maxTokens: number;\n  userPrompt: string;\n  systemPrompt: string;\n  threadId?: string;\n};\n\nexport default async function assistant(\n  { groqApiKey, model, maxTokens, userPrompt, systemPrompt, threadId }: Params,\n  { logging, execute, nodes }: any\n) {\n  const groq = new Groq({ apiKey: groqApiKey });\n\n  const tools: Tool[] = nodes?.map(nodeToGroqTool) ?? [];\n\n  /** \n  * Retrieve the conversation from the threadId if it exists, otherwise generate a new threadId\n  **/\n  threadId ||= uuidv4();\n  const chatHistory = getChatHistory(threadId, logging) as Groq.Chat.ChatCompletion.Choice.Message[];\n\n  const initialMessages: Groq.Chat.CompletionCreateParams.Message[] = [\n    {\n      \"role\": \"system\",\n      \"content\": systemPrompt\n    },\n    // append the chat history to the initial messages excluding the system messages\n    ...(chatHistory.filter(m => m.role !== \"system\") ?? []),\n    {\n      \"role\": \"user\",\n      \"content\": userPrompt,\n    }\n  ];\n\n  const baseRequest = {\n    \"model\": model,\n    \"max_tokens\": maxTokens,\n    \"tools\": tools,\n    \"messages\": initialMessages\n  };\n\n  try {\n    let requestCount = 1;\n    let request = { ...baseRequest };\n    let response: Groq.Chat.ChatCompletion;\n\n    let finish_reasons: FinishReason[] = [];\n\n    const isEndTurn = (reasons: FinishReason[]) =>\n      reasons.includes(\"stop\") ||\n      reasons.includes(\"length\") ||\n      reasons.includes(\"content_filter\");\n\n    do {\n      logging.log(`Groq request(${requestCount}):`, request);\n      response = await groq.chat.completions.create(request);\n      logging.log(`Groq response(${requestCount}): `, response);\n\n      const choices = response.choices;\n      finish_reasons = choices.map(choice => choice.finish_reason) as FinishReason[];\n\n      if (isEndTurn(finish_reasons)) {\n        break;\n      }\n      for (const choice of choices) {\n        request.messages.push(choice.message);\n\n        const finish_reason = choice.finish_reason as FinishReason;\n        const isToolUse = finish_reason === \"tool_calls\";\n\n        if (isToolUse) {\n          const toolCalls = choice.message.tool_calls || [];\n\n          for (const toolCall of toolCalls) {\n            const node: Node = nodes?.find((node: Node) =>\n              snakeCase(node.label || node.meta.name) === toolCall.function?.name);\n            if (!node) {\n              logging.log(\"Failed to find tool:\");\n              logging.log(toolCall);\n              logging.log(node);\n              throw new Error(\"Failed to find tool\");\n            }\n            logging.log(`Tool: ${node.label} `);\n            let args = {} as Record<string, unknown>;\n            try {\n              args = JSON.parse(toolCall.function?.arguments ?? \"{}\");\n            } catch (cause) {\n              logging.log(\"Failed to parse tool arguments\");\n              logging.log(toolCall.function?.arguments);\n              logging.log(cause);\n            }\n\n            // filter hallucinated inputs\n            const inputs = {} as Record<string, unknown>;\n            for (const [inputKey, inputValue] of Object.entries(args)) {\n              if (node.inputs.properties[inputKey]) {\n                inputs[inputKey] = inputValue;\n              }\n            }\n            const toolResponse = await execute(node.label, inputs);\n            logging.log(\"Tool response: \", toolResponse);\n            request.messages.push(\n              {\n                \"tool_call_id\": toolCall.id,\n                \"role\": \"tool\",\n                \"name\": toolCall.function?.name,\n                \"content\": toolResponse ? JSON.stringify(toolResponse) : \"\",\n              });\n          }\n        }\n      }\n      requestCount++;\n    } while (!isEndTurn(finish_reasons));\n\n    let newChatHistory = [...request.messages, ...(response.choices.map(c => c.message) || [])]\n    appendChatHistory(threadId, newChatHistory);\n    return {\n      message: response.choices[0]?.message?.content || \"No Response\",\n      threadId,\n      data: response\n    }\n  } catch (error) {\n    logging.log(\"Error:\");\n    logging.log(\n      // remove circular references\n      jsonc.parse(jsonc.stringify(error))\n    );\n    return { error }\n  }\n}\n\ntype Node = {\n  label: string;\n  meta: {\n    id: string;\n    description: string;\n    name: string;\n    [key: string]: any;\n  };\n  inputs: {\n    type: string;\n    required: string[];\n    properties: Record<string, {\n      description: string;\n      buildship?: {\n        toBeAutoFilled?: boolean;\n        [key: string]: any;\n      }\n      [key: string]: any;\n    }>;\n  };\n  [key: string]: any;\n};\n\n"
    },
    {
      "description": "The Return Node is used to return values from the workflow. It is generally the last node in the workflow. The return node is optional as the API can inherently return a 200 OK response by default. [Full Documentation](https://docs.buildship.com/core-nodes/return).",
      "id": "070a86f4-d0c2-4452-b36c-d9b587ced0f5",
      "inputs": {
        "required": [],
        "properties": {
          "status": {
            "enum": ["200", "201", "202", "204", "400", "401", "403", "404", "429", "500"],
            "default": "200",
            "type": "string",
            "description": "The HTTP status code to return",
            "title": "Status code",
            "buildship": {
              "options": [
                { "label": "OK (200)", "value": "200" },
                { "value": "201", "label": "Created (201)" },
                { "value": "202", "label": "Accepted (202)" },
                { "value": "301", "label": "Redirect (301)" },
                { "label": "No Content (204)", "value": "204" },
                { "value": "400", "label": "Bad Request (400)" },
                { "value": "401", "label": "Unauthorized (401)" },
                { "label": "Forbidden (403)", "value": "403" },
                { "value": "404", "label": "Not Found (404)" },
                { "value": "429", "label": "Too Many Requests (429)" },
                { "value": "500", "label": "Internal Server Error (500)" }
              ],
              "index": 0
            }
          },
          "value": {
            "type": "string",
            "default": "",
            "description": "The value to return",
            "title": "Value",
            "buildship": { "index": 1 }
          },
          "cacheMaxAge": {
            "description": "Set cache duration in seconds",
            "buildship": { "index": 2 },
            "default": 0,
            "title": "Cache Time",
            "type": "number"
          }
        },
        "type": "object"
      },
      "type": "return",
      "response": { "2XX": { "type": "object", "properties": {} } },
      "label": "Return"
    }
  ],
  "trigger": {
    "dependencies": {},
    "instruction": { "title": "Endpoint URL", "bodyTemplate": "https://{{runtimeUrl}}/{{httpPath}}" },
    "label": "Rest API Call",
    "meta": {
      "id": "http",
      "icon": {},
      "name": "Rest API Call",
      "description": "Create an API / HTTP endpoint as the trigger or starting point for your workflow. This endpoint can be used in other apps to run the workflow. [Full documentation](https://docs.buildship.com/trigger-nodes/rest-api)"
    },
    "order": 1,
    "type": "http",
    "groupId": null,
    "testingSchema": [
      {
        "name": "endpointURL",
        "disabled": true,
        "prefill": "endpointURL",
        "type": "shortText",
        "label": "Endpoint URL"
      },
      { "type": "apiRequestData", "prefill": "apiRequestData", "name": "apiRequestData" }
    ],
    "script": "",
    "request": {
      "buildship": {},
      "properties": {
        "headers": {
          "properties": {},
          "description": "Headers of the request",
          "type": "object",
          "title": "Request Headers",
          "buildship": {}
        },
        "query": {
          "title": "Query",
          "buildship": {},
          "description": "Query parameters",
          "type": "object",
          "properties": {}
        },
        "body": {
          "properties": {
            "message": { "title": "Message", "description": "", "buildship": { "index": 0 }, "type": "string" },
            "threadId": { "description": "", "buildship": { "index": 0 }, "title": "Thread Id", "type": "string" }
          },
          "type": "object",
          "buildship": {},
          "title": "Body",
          "description": "Body of the request"
        }
      },
      "type": "object",
      "title": "Request",
      "required": []
    },
    "id": "http",
    "inputs": {
      "properties": {
        "method": {
          "buildship": {
            "sensitive": false,
            "options": [
              { "value": "GET", "label": "GET" },
              { "value": "POST", "label": "POST" },
              { "value": "PUT", "label": "PUT" },
              { "value": "DELETE", "label": "DELETE" }
            ],
            "index": 1
          },
          "default": "GET",
          "enum": ["GET", "POST", "PUT", "DELETE"],
          "pattern": "",
          "title": "Method",
          "description": "The HTTP method for the incoming request.",
          "type": "string"
        },
        "path": {
          "default": "/",
          "type": "string",
          "title": "Path",
          "pattern": "",
          "buildship": { "index": 0, "sensitive": false },
          "description": "The path of the API Endpoint. Additionally, define the structure for the incoming API requests. [Learn more about API Specification here](https://docs.buildship.com/basics/api-spec#request-specification)."
        }
      },
      "type": "object",
      "required": ["method", "path"]
    },
    "live": true,
    "output": {
      "title": "Request",
      "buildship": {},
      "properties": {
        "body": {
          "title": "Body",
          "description": "Body of the request",
          "type": "object",
          "buildship": { "index": 1 }
        },
        "query": {
          "buildship": { "index": 0 },
          "type": "object",
          "description": "Query parameters",
          "title": "Query parameters"
        },
        "headers": {
          "description": "Headers of the request",
          "type": "object",
          "properties": {
            "authorization": {
              "description": "Authorization header",
              "type": "string",
              "buildship": { "index": 1 },
              "title": "Authorization"
            },
            "content-type": {
              "title": "Content-Type",
              "buildship": { "index": 0 },
              "type": "string",
              "description": "Content-Type of the request"
            }
          },
          "buildship": {},
          "title": "Headers"
        }
      },
      "type": "object"
    }
  },
  "nodeValues": {
    "http": { "path": "/groq-asssistant-trigger", "method": "POST" },
    "62979cb6-d40c-45ef-bb6f-e48946447427": {
      "userPrompt": { "keys": ["request", "body", "message"] },
      "groqApiKey": "",
      "threadId": { "keys": ["request", "body", "threadId"] },
      "maxTokens": 1024,
      "systemPrompt": "",
      "model": "llama3-8b-8192"
    },
    "f30d892c-f5ad-49c1-9301-4e309c9809ae": {
      "userPrompt": "",
      "model": "llama3-8b-8192",
      "maxTokens": 1024,
      "threadId": "",
      "groqApiKey": "",
      "systemPrompt": ""
    },
    "070a86f4-d0c2-4452-b36c-d9b587ced0f5": {
      "value": {
        "hasErrors": false,
        "type": "javascript",
        "expression": "{\n  \"message\": ctx[\"root\"][\"62979cb6-d40c-45ef-bb6f-e48946447427\"][\"message\"],\n  \"threadId\": ctx[\"root\"][\"62979cb6-d40c-45ef-bb6f-e48946447427\"][\"threadId\"]\n}"
      },
      "status": "200",
      "cacheMaxAge": 0
    }
  },
  "notes": "<p># Request</p><p>A simple request-response:</p><p>{</p><p><span style=\"background-color: rgb(240, 240, 240); color: rgb(29, 117, 179);\">\"message\"</span><span style=\"background-color: rgb(240, 240, 240); color: rgb(51, 51, 51);\">: </span><span style=\"background-color: rgb(240, 240, 240); color: rgb(179, 94, 20);\">\"Hello, Groq\"</span></p><p>}</p>"
}
