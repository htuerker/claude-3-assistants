{
  "nodes": [
    {
      "label": "Groq Assistant",
      "nodes": [
        {
          "label": "updateDatabase",
          "integrations": [],
          "script": "import { Firestore } from '@google-cloud/firestore';\n\nexport default async function createDocument({\n    collectionName,\n    id,\n    data,\n    merge,\n},{logging}) {\n    logging.log({data,id,collectionName})\n    logging.log({data})\n    const firestore = new Firestore(undefined);\n    if(id){\n      await firestore.collection(collectionName).doc(id).set(data, {\n          merge\n      });\n      return {\n          id,\n          path:`${collectionName}/${id}`,\n          status: 'success!'\n      };\n    } else{\n      const ref = await firestore.collection(collectionName).add(data);\n      return {\n          id:ref.id,\n          path:ref.path,\n          status: 'success!'\n      };\n    }\n}",
          "dependencies": { "@google-cloud/firestore": "7.1.0" },
          "inputs": {
            "type": "object",
            "properties": {
              "merge": {
                "type": "boolean",
                "title": "Merge",
                "buildship": { "index": 3 },
                "default": false,
                "description": "Whether to merge the data with any existing document"
              },
              "collectionName": {
                "description": "The name of your Firestore collection",
                "type": "string",
                "buildship": { "index": 0 },
                "title": "Collection Name"
              },
              "data": {
                "buildship": { "index": 2, "sensitive": false, "toBeAutoFilled": true },
                "default": {},
                "pattern": "",
                "type": "object",
                "title": "Quiz data",
                "properties": {},
                "description": "The quiz data in JSON format with fields: question, options, correctAnswer, keywords"
              },
              "id": {
                "title": "Document ID",
                "pattern": "",
                "description": "The ID of the document to create or update",
                "buildship": { "sensitive": false, "index": 1 },
                "type": "string"
              }
            },
            "required": ["collectionName", "merge", "data"]
          },
          "type": "script",
          "onFail": null,
          "meta": {
            "id": "buildship-create-document",
            "icon": {
              "type": "URL",
              "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2FIcon.png?alt=media&token=878ed11b-1cf2-45d8-9951-7e95a16d26af&_gl=1*1ld9l67*_ga*NzgyMDk5NjMxLjE2OTY4NzE3ODU.*_ga_CW55HF8NVT*MTY5NjkyMzc5OC4yLjEuMTY5NjkyMzgzMy4yNS4wLjA."
            },
            "description": "save the latest quiz to the database",
            "name": "Save Quiz Question"
          },
          "output": {
            "title": "Firestore Response",
            "properties": {
              "status": { "type": "string", "title": "Status", "buildship": { "index": 0 } },
              "id": { "type": "string", "description": "Document ID", "title": "Id", "buildship": { "index": 1 } },
              "path": { "title": "Path", "buildship": { "index": 2 }, "description": "Document Path", "type": "string" }
            },
            "type": "object",
            "description": "The response from the Firestore set operation",
            "buildship": {}
          },
          "_libRef": {
            "libNodeRefId": "@buildship/buildship-create-document",
            "isDirty": true,
            "version": "1.0.0",
            "libType": "public",
            "integrity": "v3:f8ff07ce9cbad39ca8528d0108cc4a3b",
            "src": "https://storage.googleapis.com/buildship-app-us-central1/cache/builtNodes/@buildship/buildship-create-document/v1_0_0.cjs"
          },
          "name": "Save Quiz Question",
          "description": "Save quiz data in JSON format:\n{\"question\":\"\", \"answers\":[list],\"correctAnswer\":\"\", \"keywords\":[list]}",
          "id": "9ae7aca1-6754-4785-8266-cdf1efc0163e"
        }
      ],
      "subType": "assistant",
      "inputs": {
        "properties": {
          "model": {
            "description": "",
            "buildship": {
              "sensitive": false,
              "index": 4,
              "options": [
                { "label": "LLaMA3 70b", "value": "llama3-70b-8192" },
                { "label": "LLaMA3 8b", "value": "llama3-8b-8192" },
                { "value": "mixtral-8x7b-32768", "label": "Mixtral 8x7b" },
                { "value": "gemma-7b-it", "label": "Gemma 7b" }
              ]
            },
            "type": "string",
            "enum": ["llama3-70b-8192", "llama3-8b-8192", "mixtral-8x7b-32768", "gemma-7b-it"],
            "default": "llama3-8b-8192",
            "pattern": "",
            "title": "Model"
          },
          "threadId": {
            "default": "",
            "description": "",
            "type": "string",
            "title": "Thread Id",
            "buildship": { "index": 5, "sensitive": false },
            "pattern": ""
          },
          "systemPrompt": {
            "buildship": { "index": 1, "sensitive": false },
            "type": "string",
            "pattern": "",
            "title": "Instructions",
            "description": "",
            "default": ""
          },
          "groqApiKey": {
            "title": "API Key",
            "pattern": "",
            "description": "",
            "buildship": { "index": 0, "sensitive": true },
            "type": "string"
          },
          "maxTokens": {
            "title": "Max Tokens",
            "description": "",
            "default": "",
            "buildship": { "sensitive": false, "index": 4 },
            "pattern": "",
            "type": "number"
          },
          "userPrompt": {
            "pattern": "",
            "title": "User Prompt",
            "default": "",
            "buildship": { "index": 2, "sensitive": false },
            "type": "string",
            "description": ""
          }
        },
        "type": "object",
        "required": ["maxTokens", "userPrompt", "systemPrompt", "groqApiKey", "model"]
      },
      "id": "3b34cd53-5546-4046-9e75-7a0178cbe0a6",
      "script": "import Groq from 'groq-sdk';\nimport { snakeCase } from \"lodash\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsonc } from 'jsonc';\n\nconst getChatHistory = (threadId: string, logging: any) => {\n  // Load previous messages if the file exists\n  let previousMessages = [];\n  const filePath = process.env.BUCKET_FOLDER_PATH + '/nodes/groq-assistant/store/' + threadId + '.jsonl';\n  if (threadId) {\n    const fileExists = fs.existsSync(filePath);\n    if (fileExists) {\n      const fileContent = fs.readFileSync(filePath, 'utf8');\n      previousMessages = JSON.parse(fileContent);\n      logging.log(previousMessages);\n    }\n  }\n  return previousMessages;\n}\n\nconst appendChatHistory = (threadId: string, newMessages: unknown[]) => {\n  const filePath = process.env.BUCKET_FOLDER_PATH + '/nodes/groq-assistant/store/' + threadId + '.jsonl';\n  // Create folder path if it doesn't exist\n  const folderPath = path.dirname(filePath);\n  if (!fs.existsSync(folderPath)) {\n    fs.mkdirSync(folderPath, { recursive: true });\n  }\n  // Save userRequest and output to a JSONL file\n  const fileContent = JSON.stringify(newMessages);\n  fs.writeFileSync(filePath, fileContent);\n}\n\n\ntype Tool = Groq.Chat.CompletionCreateParams.Tool;\ntype FinishReason = \"stop\" | \"length\" | \"tool_calls\" | \"content_filter\";\n\nconst nodeToGroqTool: (node: Node) => Tool = (node) => {\n  return {\n    type: \"function\",\n    function: {\n      name: snakeCase(node.label || node.meta.name),\n      description: node.meta.description ?? \"\",\n      parameters: {\n        type: \"object\",\n        properties: Object.entries(node.inputs.properties)\n          .reduce((properties, [name, value]) => {\n            if (value.buildship && !value.buildship.toBeAutoFilled) return properties;\n            return {\n              ...properties, [name]: {\n                type: value.type,\n                enum: value.enum,\n                description: value.description\n              }\n            }\n          }, {}),\n        required: Object.entries(node.inputs.properties).map(([name, value]) => {\n          if (value.buildship && value.buildship.toBeAutoFilled && node.inputs.required.includes(name)) return name;\n          return false;\n        }).filter(Boolean),\n      }\n    }\n  };\n}\n\ntype Params = {\n  groqApiKey: string;\n  model: string;\n  maxTokens: number;\n  userPrompt: string;\n  systemPrompt: string;\n  threadId?: string;\n};\n\nexport default async function assistant(\n  { groqApiKey, model, maxTokens, userPrompt, systemPrompt, threadId }: Params,\n  { logging, execute, nodes }: any\n) {\n  const groq = new Groq({ apiKey: groqApiKey });\n\n  const tools: Tool[] = nodes?.map(nodeToGroqTool) ?? [];\n\n  /** \n  * Retrieve the conversation from the threadId if it exists, otherwise generate a new threadId\n  **/\n  threadId ||= uuidv4();\n  const chatHistory = getChatHistory(threadId, logging) as Groq.Chat.ChatCompletion.Choice.Message[];\n\n  const initialMessages: Groq.Chat.CompletionCreateParams.Message[] = [\n    {\n      \"role\": \"system\",\n      \"content\": systemPrompt\n    },\n    // append the chat history to the initial messages excluding the system messages\n    ...(chatHistory.filter(m => m.role !== \"system\") ?? []),\n    {\n      \"role\": \"user\",\n      \"content\": userPrompt,\n    }\n  ];\n\n  const baseRequest = {\n    \"model\": model,\n    \"max_tokens\": maxTokens,\n    \"tools\": tools,\n    \"messages\": initialMessages\n  };\n\n  try {\n    let requestCount = 1;\n    let request = { ...baseRequest };\n    let response: Groq.Chat.ChatCompletion;\n\n    let finish_reasons: FinishReason[] = [];\n\n    const isEndTurn = (reasons: FinishReason[]) =>\n      reasons.includes(\"stop\") ||\n      reasons.includes(\"length\") ||\n      reasons.includes(\"content_filter\");\n\n    do {\n      logging.log(`Groq request(${requestCount}):`, request);\n      response = await groq.chat.completions.create(request);\n      logging.log(`Groq response(${requestCount}): `, response);\n\n      const choices = response.choices;\n      finish_reasons = choices.map(choice => choice.finish_reason) as FinishReason[];\n\n      if (isEndTurn(finish_reasons)) {\n        break;\n      }\n      for (const choice of choices) {\n        request.messages.push(choice.message);\n\n        const finish_reason = choice.finish_reason as FinishReason;\n        const isToolUse = finish_reason === \"tool_calls\";\n\n        if (isToolUse) {\n          const toolCalls = choice.message.tool_calls || [];\n\n          for (const toolCall of toolCalls) {\n            const node: Node = nodes?.find((node: Node) =>\n              snakeCase(node.label || node.meta.name) === toolCall.function?.name);\n            if (!node) {\n              logging.log(\"Failed to find tool:\");\n              logging.log(toolCall);\n              logging.log(node);\n              throw new Error(\"Failed to find tool\");\n            }\n            logging.log(`Tool: ${node.label} `);\n            let args = {} as Record<string, unknown>;\n            try {\n              args = JSON.parse(toolCall.function?.arguments ?? \"{}\");\n            } catch (cause) {\n              logging.log(\"Failed to parse tool arguments\");\n              logging.log(toolCall.function?.arguments);\n              logging.log(cause);\n            }\n\n            // filter hallucinated inputs\n            const inputs = {} as Record<string, unknown>;\n            for (const [inputKey, inputValue] of Object.entries(args)) {\n              if (node.inputs.properties[inputKey]) {\n                inputs[inputKey] = inputValue;\n              }\n            }\n            const toolResponse = await execute(node.label, inputs);\n            logging.log(\"Tool response: \", toolResponse);\n            request.messages.push(\n              {\n                \"tool_call_id\": toolCall.id,\n                \"role\": \"tool\",\n                \"name\": toolCall.function?.name,\n                \"content\": toolResponse ? JSON.stringify(toolResponse) : \"\",\n              });\n          }\n        }\n      }\n      requestCount++;\n    } while (!isEndTurn(finish_reasons));\n\n    let newChatHistory = [...request.messages, ...(response.choices.map(c => c.message) || [])]\n    appendChatHistory(threadId, newChatHistory);\n    return {\n      message: response.choices[0]?.message?.content || \"No Response\",\n      threadId,\n      data: response\n    }\n  } catch (error) {\n    logging.log(\"Error:\");\n    logging.log(\n      // remove circular references\n      jsonc.parse(jsonc.stringify(error))\n    );\n    return { error }\n  }\n}\n\ntype Node = {\n  label: string;\n  meta: {\n    id: string;\n    description: string;\n    name: string;\n    [key: string]: any;\n  };\n  inputs: {\n    type: string;\n    required: string[];\n    properties: Record<string, {\n      description: string;\n      buildship?: {\n        toBeAutoFilled?: boolean;\n        [key: string]: any;\n      }\n      [key: string]: any;\n    }>;\n  };\n  [key: string]: any;\n};\n\n",
      "onFail": null,
      "output": {
        "buildship": { "index": 0 },
        "title": "",
        "description": "",
        "properties": {
          "message": { "title": "Message", "buildship": { "index": 0 }, "type": "string", "description": "" },
          "data": { "description": "", "type": "string", "title": "Data", "buildship": { "index": 2 } },
          "threadId": { "title": "Thread Id", "buildship": { "index": 1 }, "description": "", "type": "string" }
        },
        "type": "object"
      },
      "dependencies": { "groq-sdk": "0.3.3", "lodash": "4.17.21" },
      "name": "Groq Assistant",
      "integrations": [],
      "meta": {
        "name": "Groq Assistant",
        "icon": {
          "type": "URL",
          "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fgroq.png?alt=media&token=7f60edf7-f402-4762-8334-00cb2981cef0"
        },
        "description": "",
        "id": "groq-assistant-node"
      },
      "type": "script"
    },
    {
      "description": "The Return Node is used to return values from the workflow. It is generally the last node in the workflow. The return node is optional as the API can inherently return a 200 OK response by default. [Full Documentation](https://docs.buildship.com/core-nodes/return).",
      "inputs": {
        "properties": {
          "value": {
            "title": "Value",
            "buildship": { "index": 1 },
            "type": "string",
            "description": "The value to return",
            "default": ""
          },
          "status": {
            "buildship": {
              "index": 0,
              "options": [
                { "value": "200", "label": "OK (200)" },
                { "value": "201", "label": "Created (201)" },
                { "value": "202", "label": "Accepted (202)" },
                { "value": "301", "label": "Redirect (301)" },
                { "value": "204", "label": "No Content (204)" },
                { "label": "Bad Request (400)", "value": "400" },
                { "value": "401", "label": "Unauthorized (401)" },
                { "label": "Forbidden (403)", "value": "403" },
                { "value": "404", "label": "Not Found (404)" },
                { "label": "Too Many Requests (429)", "value": "429" },
                { "label": "Internal Server Error (500)", "value": "500" }
              ]
            },
            "description": "The HTTP status code to return",
            "type": "string",
            "default": "200",
            "enum": ["200", "201", "202", "204", "400", "401", "403", "404", "429", "500"],
            "title": "Status code"
          },
          "cacheMaxAge": {
            "title": "Cache Time",
            "default": 0,
            "description": "Set cache duration in seconds",
            "buildship": { "index": 2 },
            "type": "number"
          }
        },
        "type": "object",
        "required": []
      },
      "id": "f0d93f76-ef6d-45b7-b3b9-db9fccdc1e9f",
      "label": "Return",
      "response": { "2XX": { "properties": {}, "type": "object" } },
      "type": "return"
    }
  ],
  "trigger": {
    "order": 1,
    "testingSchema": [
      {
        "name": "endpointURL",
        "prefill": "endpointURL",
        "disabled": true,
        "type": "shortText",
        "label": "Endpoint URL"
      },
      { "prefill": "apiRequestData", "name": "apiRequestData", "type": "apiRequestData" }
    ],
    "id": "http",
    "live": true,
    "groupId": null,
    "script": "",
    "dependencies": {},
    "label": "Rest API Call",
    "output": {
      "type": "object",
      "buildship": {},
      "properties": {
        "headers": {
          "properties": {
            "authorization": {
              "buildship": { "index": 1 },
              "type": "string",
              "title": "Authorization",
              "description": "Authorization header"
            },
            "content-type": {
              "title": "Content-Type",
              "buildship": { "index": 0 },
              "type": "string",
              "description": "Content-Type of the request"
            }
          },
          "description": "Headers of the request",
          "type": "object",
          "buildship": {},
          "title": "Headers"
        },
        "query": {
          "title": "Query parameters",
          "type": "object",
          "description": "Query parameters",
          "buildship": { "index": 0 }
        },
        "body": { "buildship": { "index": 1 }, "description": "Body of the request", "title": "Body", "type": "object" }
      },
      "title": "Request"
    },
    "inputs": {
      "properties": {
        "path": {
          "description": "The path of the API Endpoint. Additionally, define the structure for the incoming API requests. [Learn more about API Specification here](https://docs.buildship.com/basics/api-spec#request-specification).",
          "pattern": "",
          "buildship": { "sensitive": false, "index": 0 },
          "title": "Path",
          "type": "string",
          "default": "/"
        },
        "method": {
          "default": "GET",
          "title": "Method",
          "description": "The HTTP method for the incoming request.",
          "pattern": "",
          "enum": ["GET", "POST", "PUT", "DELETE"],
          "buildship": {
            "index": 1,
            "options": [
              { "value": "GET", "label": "GET" },
              { "value": "POST", "label": "POST" },
              { "label": "PUT", "value": "PUT" },
              { "value": "DELETE", "label": "DELETE" }
            ],
            "sensitive": false
          },
          "type": "string"
        }
      },
      "type": "object",
      "required": ["method", "path"]
    },
    "meta": {
      "name": "Rest API Call",
      "icon": {},
      "id": "http",
      "description": "Create an API / HTTP endpoint as the trigger or starting point for your workflow. This endpoint can be used in other apps to run the workflow. [Full documentation](https://docs.buildship.com/trigger-nodes/rest-api)"
    },
    "request": {
      "title": "Request",
      "buildship": {},
      "required": [],
      "properties": {
        "headers": {
          "type": "object",
          "buildship": {},
          "properties": {},
          "description": "Headers of the request",
          "title": "Request Headers"
        },
        "body": {
          "title": "Body",
          "type": "object",
          "description": "Body of the request",
          "buildship": {},
          "properties": {
            "threadId": { "type": "string", "title": "Thread Id", "description": "", "buildship": { "index": 0 } },
            "message": { "buildship": { "index": 0 }, "description": "", "title": "Message", "type": "string" }
          }
        },
        "query": {
          "title": "Query",
          "buildship": {},
          "type": "object",
          "description": "Query parameters",
          "properties": {}
        }
      },
      "type": "object"
    },
    "instruction": { "bodyTemplate": "https://{{runtimeUrl}}/{{httpPath}}", "title": "Endpoint URL" },
    "type": "http"
  },
  "nodeValues": {
    "http": { "path": "/groq-quiz-master", "method": "POST" },
    "62979cb6-d40c-45ef-bb6f-e48946447427": {
      "userPrompt": { "keys": ["request", "body", "message"] },
      "groqApiKey": "",
      "threadId": { "keys": ["request", "body", "threadId"] },
      "maxTokens": 1024,
      "systemPrompt": "",
      "model": "llama3-8b-8192"
    },
    "f30d892c-f5ad-49c1-9301-4e309c9809ae": {
      "userPrompt": "",
      "model": "llama3-8b-8192",
      "maxTokens": 1024,
      "threadId": "",
      "groqApiKey": "",
      "systemPrompt": ""
    },
    "070a86f4-d0c2-4452-b36c-d9b587ced0f5": {
      "value": {
        "hasErrors": false,
        "type": "javascript",
        "expression": "{\n  \"message\": ctx[\"root\"][\"3b34cd53-5546-4046-9e75-7a0178cbe0a6\"][\"message\"],\n  \"threadId\": ctx[\"root\"][\"3b34cd53-5546-4046-9e75-7a0178cbe0a6\"][\"threadId\"]\n}"
      },
      "status": "200",
      "cacheMaxAge": 0
    },
    "3b34cd53-5546-4046-9e75-7a0178cbe0a6": {
      "userPrompt": { "keys": ["request", "body", "message"] },
      "groqApiKey": "",
      "threadId": { "keys": ["request", "body", "threadId"] },
      "maxTokens": 1024,
      "systemPrompt": "You are a personal history tutor. You will answer questions in a concise way. If no question is given, you should provide a historical fact. You must generate a quiz on the topic and save it to database using given \"updateDatabase\" tool.",
      "model": "llama3-70b-8192"
    },
    "f0d93f76-ef6d-45b7-b3b9-db9fccdc1e9f": {
      "value": {
        "hasErrors": false,
        "type": "javascript",
        "expression": "{\n  \"message\": ctx[\"root\"][\"3b34cd53-5546-4046-9e75-7a0178cbe0a6\"][\"message\"],\n  \"threadId\": ctx[\"root\"][\"3b34cd53-5546-4046-9e75-7a0178cbe0a6\"][\"threadId\"]\n}"
      },
      "status": "200",
      "cacheMaxAge": 0
    },
    "9ae7aca1-6754-4785-8266-cdf1efc0163e": { "id": "", "collectionName": "Quiz", "merge": true, "data": {} }
  },
  "notes": "<p># Request</p><p>A simple request-response:</p><p>{</p><p><span style=\"background-color: rgb(240, 240, 240); color: rgb(29, 117, 179);\">\"message\"</span><span style=\"background-color: rgb(240, 240, 240); color: rgb(51, 51, 51);\">: </span><span style=\"background-color: rgb(240, 240, 240); color: rgb(179, 94, 20);\">\"Hello, Groq\"</span></p><p>}</p>"
}
