{
  "nodes": [
    {
      "inputs": {
        "type": "object",
        "properties": {
          "threadId": {
            "default": "",
            "title": "Thread Id",
            "pattern": "",
            "description": "",
            "type": "string",
            "buildship": { "sensitive": false, "index": 5 }
          },
          "userPrompt": {
            "description": "",
            "buildship": { "index": 2, "sensitive": false },
            "type": "string",
            "pattern": "",
            "title": "User Prompt",
            "default": ""
          },
          "systemPrompt": {
            "default": "",
            "title": "Instructions",
            "type": "string",
            "pattern": "",
            "description": "",
            "buildship": { "index": 1, "sensitive": false }
          },
          "model": {
            "default": "llama3-8b-8192",
            "buildship": {
              "options": [
                { "value": "llama3-70b-8192", "label": "LLaMA3 70b" },
                { "value": "llama3-8b-8192", "label": "LLaMA3 8b" },
                { "value": "mixtral-8x7b-32768", "label": "Mixtral 8x7b" },
                { "label": "Gemma 7b", "value": "gemma-7b-it" }
              ],
              "sensitive": false,
              "index": 4
            },
            "pattern": "",
            "enum": ["llama3-70b-8192", "llama3-8b-8192", "mixtral-8x7b-32768", "gemma-7b-it"],
            "description": "",
            "title": "Model",
            "type": "string"
          },
          "groqApiKey": {
            "description": "",
            "buildship": { "sensitive": true, "index": 0 },
            "title": "API Key",
            "type": "string",
            "pattern": ""
          },
          "maxTokens": {
            "buildship": { "sensitive": false, "index": 4 },
            "pattern": "",
            "description": "",
            "title": "Max Tokens",
            "type": "number",
            "default": ""
          }
        },
        "required": ["maxTokens", "userPrompt", "systemPrompt", "groqApiKey", "model"]
      },
      "integrations": [],
      "type": "script",
      "name": "Groq Assistant",
      "onFail": null,
      "dependencies": { "lodash": "4.17.21", "groq-sdk": "0.3.3" },
      "nodes": [
        {
          "name": "Get Sheets",
          "dependencies": { "node-fetch": "2.7.0" },
          "label": "Get Sheets",
          "meta": {
            "icon": {
              "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2FGoogleSheets.png?alt=media&token=89b3cfec-6746-43da-a404-5d20adb60472",
              "type": "URL"
            },
            "description": "Fetch a Google Spreadsheet using the Google Sheets API",
            "name": "Get Sheets",
            "id": "oauth-gsheets-get-sheet"
          },
          "integrations": ["gsheets"],
          "script": "import fetch from 'node-fetch';\n\nexport default async function fetchGoogleSpreadsheet({\n    spreadsheetUrl,\n    ranges\n}, {\n    auth,\n    logging\n}) {\n    const { access_token } = await auth.getToken();\n\n    // Extracting spreadsheetId from the URL\n    const regex = /\\/spreadsheets\\/d\\/([a-zA-Z0-9-_]+)/;\n    const match = spreadsheetUrl.match(regex);\n    if (!match) {\n        throw new Error('Invalid spreadsheet URL');\n    }\n    const spreadsheetId = match[1];\n\n  \n    const response = await fetch(`https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${ranges}`, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${access_token}`\n        }\n    });\n    const data = await response.json();\n    return data;\n}\n",
          "inputs": {
            "required": ["apiKey", "includeGridData", "spreadsheetUrl", "ranges"],
            "properties": {
              "ranges": {
                "pattern": "",
                "buildship": { "index": 1, "sensitive": false },
                "type": "string",
                "default": [],
                "title": "Ranges",
                "description": "The ranges to retrieve from the spreadsheet.\n\n**SAMPLE INPUT:**\n```\n[\"Sheet1\"]\n```"
              },
              "spreadsheetUrl": {
                "default": "",
                "pattern": "",
                "description": "The URL of the Google Spreadsheet to fetch. [Refer API Documentation](https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/create).\n\nTIP ðŸ’¡: Available in the following format in your Google Sheets: `https://docs.google.com/spreadsheets/d/spreadsheet-id/edit`",
                "type": "string",
                "buildship": { "index": 0, "sensitive": false },
                "title": "Sheet URL"
              }
            },
            "type": "object"
          },
          "onFail": null,
          "type": "script",
          "id": "5aa8cefb-8095-4b11-93fa-66c1f64f4ab6",
          "_libRef": {
            "integrity": "v3:f8f3b15ffb6cca5de72ce53e98a588b5",
            "libNodeRefId": "@buildship/oauth-gsheets-get-sheet",
            "version": "1.0.3",
            "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/oauth-gsheets-get-sheet/1.0.3/build.cjs",
            "libType": "public",
            "isDirty": true
          },
          "output": {
            "title": "Spreadsheet Data",
            "buildship": {},
            "description": "The data of the fetched Google Spreadsheet",
            "type": "object"
          }
        }
      ],
      "id": "1cf64e0a-0e9e-4a98-a23a-e37e786e0620",
      "label": "Groq Assistant",
      "output": {
        "buildship": { "index": 0 },
        "properties": {
          "threadId": { "type": "string", "description": "", "buildship": { "index": 1 }, "title": "Thread Id" },
          "data": { "description": "", "title": "Data", "type": "string", "buildship": { "index": 2 } },
          "message": { "type": "string", "description": "", "buildship": { "index": 0 }, "title": "Message" }
        },
        "description": "",
        "type": "object",
        "title": ""
      },
      "subType": "assistant",
      "script": "import Groq from 'groq-sdk';\nimport { snakeCase } from \"lodash\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsonc } from 'jsonc';\n\nconst getChatHistory = (threadId: string, logging: any) => {\n  // Load previous messages if the file exists\n  let previousMessages = [];\n  const filePath = process.env.BUCKET_FOLDER_PATH + '/nodes/groq-assistant/store/' + threadId + '.jsonl';\n  if (threadId) {\n    const fileExists = fs.existsSync(filePath);\n    if (fileExists) {\n      const fileContent = fs.readFileSync(filePath, 'utf8');\n      previousMessages = JSON.parse(fileContent);\n      logging.log(previousMessages);\n    }\n  }\n  return previousMessages;\n}\n\nconst appendChatHistory = (threadId: string, newMessages: unknown[]) => {\n  const filePath = process.env.BUCKET_FOLDER_PATH + '/nodes/groq-assistant/store/' + threadId + '.jsonl';\n  // Create folder path if it doesn't exist\n  const folderPath = path.dirname(filePath);\n  if (!fs.existsSync(folderPath)) {\n    fs.mkdirSync(folderPath, { recursive: true });\n  }\n  // Save userRequest and output to a JSONL file\n  const fileContent = JSON.stringify(newMessages);\n  fs.writeFileSync(filePath, fileContent);\n}\n\n\ntype Tool = Groq.Chat.CompletionCreateParams.Tool;\ntype FinishReason = \"stop\" | \"length\" | \"tool_calls\" | \"content_filter\";\n\nconst nodeToGroqTool: (node: Node) => Tool = (node) => {\n  return {\n    type: \"function\",\n    function: {\n      name: snakeCase(node.label || node.meta.name),\n      description: node.meta.description ?? \"\",\n      parameters: {\n        type: \"object\",\n        properties: Object.entries(node.inputs.properties)\n          .reduce((properties, [name, value]) => {\n            if (value.buildship && !value.buildship.toBeAutoFilled) return properties;\n            return {\n              ...properties, [name]: {\n                type: value.type,\n                enum: value.enum,\n                description: value.description\n              }\n            }\n          }, {}),\n        required: Object.entries(node.inputs.properties).map(([name, value]) => {\n          if (value.buildship && value.buildship.toBeAutoFilled && node.inputs.required.includes(name)) return name;\n          return false;\n        }).filter(Boolean),\n      }\n    }\n  };\n}\n\ntype Params = {\n  groqApiKey: string;\n  model: string;\n  maxTokens: number;\n  userPrompt: string;\n  systemPrompt: string;\n  threadId?: string;\n};\n\nexport default async function assistant(\n  { groqApiKey, model, maxTokens, userPrompt, systemPrompt, threadId }: Params,\n  { logging, execute, nodes }: any\n) {\n  const groq = new Groq({ apiKey: groqApiKey });\n\n  const tools: Tool[] = nodes?.map(nodeToGroqTool) ?? [];\n\n  /** \n  * Retrieve the conversation from the threadId if it exists, otherwise generate a new threadId\n  **/\n  threadId ||= uuidv4();\n  const chatHistory = getChatHistory(threadId, logging) as Groq.Chat.ChatCompletion.Choice.Message[];\n\n  const initialMessages: Groq.Chat.CompletionCreateParams.Message[] = [\n    {\n      \"role\": \"system\",\n      \"content\": systemPrompt\n    },\n    // append the chat history to the initial messages excluding the system messages\n    ...(chatHistory.filter(m => m.role !== \"system\") ?? []),\n    {\n      \"role\": \"user\",\n      \"content\": userPrompt,\n    }\n  ];\n\n  const baseRequest = {\n    \"model\": model,\n    \"max_tokens\": maxTokens,\n    \"tools\": tools,\n    \"messages\": initialMessages\n  };\n\n  try {\n    let requestCount = 1;\n    let request = { ...baseRequest };\n    let response: Groq.Chat.ChatCompletion;\n\n    let finish_reasons: FinishReason[] = [];\n\n    const isEndTurn = (reasons: FinishReason[]) =>\n      reasons.includes(\"stop\") ||\n      reasons.includes(\"length\") ||\n      reasons.includes(\"content_filter\");\n\n    do {\n      logging.log(`Groq request(${requestCount}):`, request);\n      response = await groq.chat.completions.create(request);\n      logging.log(`Groq response(${requestCount}): `, response);\n\n      const choices = response.choices;\n      finish_reasons = choices.map(choice => choice.finish_reason) as FinishReason[];\n\n      if (isEndTurn(finish_reasons)) {\n        break;\n      }\n      for (const choice of choices) {\n        request.messages.push(choice.message);\n\n        const finish_reason = choice.finish_reason as FinishReason;\n        const isToolUse = finish_reason === \"tool_calls\";\n\n        if (isToolUse) {\n          const toolCalls = choice.message.tool_calls || [];\n\n          for (const toolCall of toolCalls) {\n            const node: Node = nodes?.find((node: Node) =>\n              snakeCase(node.label || node.meta.name) === toolCall.function?.name);\n            if (!node) {\n              logging.log(\"Failed to find tool:\");\n              logging.log(toolCall);\n              logging.log(node);\n              throw new Error(\"Failed to find tool\");\n            }\n            logging.log(`Tool: ${node.label} `);\n            let args = {} as Record<string, unknown>;\n            try {\n              args = JSON.parse(toolCall.function?.arguments ?? \"{}\");\n            } catch (cause) {\n              logging.log(\"Failed to parse tool arguments\");\n              logging.log(toolCall.function?.arguments);\n              logging.log(cause);\n            }\n\n            // filter hallucinated inputs\n            const inputs = {} as Record<string, unknown>;\n            for (const [inputKey, inputValue] of Object.entries(args)) {\n              if (node.inputs.properties[inputKey]) {\n                inputs[inputKey] = inputValue;\n              }\n            }\n            const toolResponse = await execute(node.label, inputs);\n            logging.log(\"Tool response: \", toolResponse);\n            request.messages.push(\n              {\n                \"tool_call_id\": toolCall.id,\n                \"role\": \"tool\",\n                \"name\": toolCall.function?.name,\n                \"content\": toolResponse ? JSON.stringify(toolResponse) : \"\",\n              });\n          }\n        }\n      }\n      requestCount++;\n    } while (!isEndTurn(finish_reasons));\n\n    let newChatHistory = [...request.messages, ...(response.choices.map(c => c.message) || [])]\n    appendChatHistory(threadId, newChatHistory);\n    return {\n      message: response.choices[0]?.message?.content || \"No Response\",\n      threadId,\n      data: response\n    }\n  } catch (error) {\n    logging.log(\"Error:\");\n    logging.log(\n      // remove circular references\n      jsonc.parse(jsonc.stringify(error))\n    );\n    return { error }\n  }\n}\n\ntype Node = {\n  label: string;\n  meta: {\n    id: string;\n    description: string;\n    name: string;\n    [key: string]: any;\n  };\n  inputs: {\n    type: string;\n    required: string[];\n    properties: Record<string, {\n      description: string;\n      buildship?: {\n        toBeAutoFilled?: boolean;\n        [key: string]: any;\n      }\n      [key: string]: any;\n    }>;\n  };\n  [key: string]: any;\n};\n\n",
      "meta": {
        "name": "Groq Assistant",
        "description": "",
        "icon": {
          "type": "URL",
          "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fgroq.png?alt=media&token=7f60edf7-f402-4762-8334-00cb2981cef0"
        },
        "id": "groq-assistant-node"
      }
    },
    {
      "response": { "2XX": { "type": "object", "properties": {} } },
      "label": "Return",
      "description": "The Return Node is used to return values from the workflow. It is generally the last node in the workflow. The return node is optional as the API can inherently return a 200 OK response by default. [Full Documentation](https://docs.buildship.com/core-nodes/return).",
      "id": "a0979fab-fc60-4f11-9ccf-e32d861059a5",
      "inputs": {
        "properties": {
          "status": {
            "buildship": {
              "options": [
                { "label": "OK (200)", "value": "200" },
                { "value": "201", "label": "Created (201)" },
                { "label": "Accepted (202)", "value": "202" },
                { "value": "301", "label": "Redirect (301)" },
                { "value": "204", "label": "No Content (204)" },
                { "value": "400", "label": "Bad Request (400)" },
                { "value": "401", "label": "Unauthorized (401)" },
                { "value": "403", "label": "Forbidden (403)" },
                { "value": "404", "label": "Not Found (404)" },
                { "value": "429", "label": "Too Many Requests (429)" },
                { "value": "500", "label": "Internal Server Error (500)" }
              ],
              "index": 0
            },
            "type": "string",
            "title": "Status code",
            "description": "The HTTP status code to return",
            "enum": ["200", "201", "202", "204", "400", "401", "403", "404", "429", "500"],
            "default": "200"
          },
          "cacheMaxAge": {
            "default": 0,
            "buildship": { "index": 2 },
            "description": "Set cache duration in seconds",
            "title": "Cache Time",
            "type": "number"
          },
          "value": {
            "type": "string",
            "description": "The value to return",
            "buildship": { "index": 1 },
            "title": "Value",
            "default": ""
          }
        },
        "required": [],
        "type": "object"
      },
      "type": "return"
    }
  ],
  "trigger": {
    "output": {
      "type": "object",
      "title": "Request",
      "buildship": {},
      "properties": {
        "query": {
          "title": "Query parameters",
          "buildship": { "index": 0 },
          "type": "object",
          "description": "Query parameters"
        },
        "headers": {
          "type": "object",
          "description": "Headers of the request",
          "buildship": {},
          "title": "Headers",
          "properties": {
            "authorization": {
              "type": "string",
              "buildship": { "index": 1 },
              "title": "Authorization",
              "description": "Authorization header"
            },
            "content-type": {
              "type": "string",
              "description": "Content-Type of the request",
              "buildship": { "index": 0 },
              "title": "Content-Type"
            }
          }
        },
        "body": { "buildship": { "index": 1 }, "type": "object", "title": "Body", "description": "Body of the request" }
      }
    },
    "label": "Rest API Call",
    "order": 1,
    "script": "",
    "type": "http",
    "request": {
      "properties": {
        "query": {
          "description": "Query parameters",
          "buildship": {},
          "title": "Query",
          "properties": {},
          "type": "object"
        },
        "body": {
          "buildship": {},
          "type": "object",
          "title": "Body",
          "properties": {
            "message": { "type": "string", "title": "Message", "buildship": { "index": 0 }, "description": "" },
            "threadId": { "buildship": { "index": 0 }, "type": "string", "title": "Thread Id", "description": "" }
          },
          "description": "Body of the request"
        },
        "headers": {
          "type": "object",
          "title": "Request Headers",
          "properties": {},
          "buildship": {},
          "description": "Headers of the request"
        }
      },
      "title": "Request",
      "buildship": {},
      "required": [],
      "type": "object"
    },
    "meta": {
      "id": "http",
      "description": "Create an API / HTTP endpoint as the trigger or starting point for your workflow. This endpoint can be used in other apps to run the workflow. [Full documentation](https://docs.buildship.com/trigger-nodes/rest-api)",
      "icon": {},
      "name": "Rest API Call"
    },
    "groupId": null,
    "instruction": { "bodyTemplate": "https://{{runtimeUrl}}/{{httpPath}}", "title": "Endpoint URL" },
    "testingSchema": [
      {
        "label": "Endpoint URL",
        "disabled": true,
        "prefill": "endpointURL",
        "type": "shortText",
        "name": "endpointURL"
      },
      { "type": "apiRequestData", "name": "apiRequestData", "prefill": "apiRequestData" }
    ],
    "inputs": {
      "type": "object",
      "properties": {
        "path": {
          "description": "The path of the API Endpoint. Additionally, define the structure for the incoming API requests. [Learn more about API Specification here](https://docs.buildship.com/basics/api-spec#request-specification).",
          "type": "string",
          "pattern": "",
          "default": "/",
          "buildship": { "index": 0, "sensitive": false },
          "title": "Path"
        },
        "method": {
          "default": "GET",
          "type": "string",
          "enum": ["GET", "POST", "PUT", "DELETE"],
          "pattern": "",
          "buildship": {
            "options": [
              { "label": "GET", "value": "GET" },
              { "label": "POST", "value": "POST" },
              { "label": "PUT", "value": "PUT" },
              { "value": "DELETE", "label": "DELETE" }
            ],
            "index": 1,
            "sensitive": false
          },
          "title": "Method",
          "description": "The HTTP method for the incoming request."
        }
      },
      "required": ["method", "path"]
    },
    "dependencies": {},
    "live": true,
    "id": "http"
  },
  "nodeValues": {
    "http": { "path": "/groq-data-analyst", "method": "POST" },
    "1cf64e0a-0e9e-4a98-a23a-e37e786e0620": {
      "groqApiKey": "",
      "systemPrompt": "You are a Data Insight Analyst. You should be concise and accurate provide accurate analysis, ensuring that its interpretations and groupings are well-supported by the data. You have a formal, professional tone, focusing on providing concise, evidence-based responses. When additional information is needed for a comprehensive analysis, you will request more data rather than making assumptions. You should avoid speculation and you should provide precise, relevant analytical insights, tailored to enhance the user's understanding of the dataWhen you are given tools to use, you must use them following the guidelines for each tool.Guidelines:- when you start, you must use 'Get Sheets' to access user survey data from Google spreadsheets, the tool do not require any parameter such as spreadsheet id etc.",
      "threadId": { "keys": ["request", "body", "threadId"] },
      "userPrompt": { "keys": ["request", "body", "message"] },
      "maxTokens": 1024,
      "model": "llama3-70b-8192"
    },
    "a0979fab-fc60-4f11-9ccf-e32d861059a5": {
      "cacheMaxAge": 0,
      "value": {
        "hasErrors": false,
        "type": "javascript",
        "expression": "{\n  \"message\": ctx[\"root\"][\"1cf64e0a-0e9e-4a98-a23a-e37e786e0620\"][\"message\"],\n  \"threadId\": ctx[\"root\"][\"1cf64e0a-0e9e-4a98-a23a-e37e786e0620\"][\"threadId\"]\n}"
      },
      "status": "200"
    },
    "5aa8cefb-8095-4b11-93fa-66c1f64f4ab6": { "integrations": {}, "spreadsheetUrl": "", "ranges": "" }
  },
  "notes": "<p>A Data Analyst that can look at a database or survey results and come up with insights.</p><p><br></p><p>Try it using this test request body:</p><p><br></p><p>{</p><p>\"message\":\"What was the most popular discovery source?\"</p><p>}</p><p><br></p><p>Short Video: <a href=\"https://www.youtube.com/watch?v=OiQJQMk_2mo\" rel=\"noopener noreferrer\" target=\"_blank\">youtube.com/watch?v=OiQJQMk_2mo</a></p><p>Documentation: <a href=\"https://docs.buildship.com/ai-models/assistant#use-case-i-chat-with-assistant\" rel=\"noopener noreferrer\" target=\"_blank\">docs.buildship.com/ai-models/assistant</a></p>"
}
