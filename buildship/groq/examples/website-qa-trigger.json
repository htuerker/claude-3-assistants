{
  "nodes": [
    {
      "name": "Groq Assistant",
      "inputs": {
        "required": ["maxTokens", "userPrompt", "systemPrompt", "groqApiKey", "model"],
        "properties": {
          "systemPrompt": {
            "pattern": "",
            "type": "string",
            "title": "Instructions",
            "buildship": { "index": 1, "sensitive": false },
            "description": "",
            "default": ""
          },
          "groqApiKey": {
            "pattern": "",
            "title": "API Key",
            "type": "string",
            "description": "",
            "buildship": { "index": 0, "sensitive": true }
          },
          "userPrompt": {
            "pattern": "",
            "type": "string",
            "default": "",
            "buildship": { "index": 2, "sensitive": false },
            "title": "User Prompt",
            "description": ""
          },
          "model": {
            "type": "string",
            "pattern": "",
            "description": "",
            "enum": ["llama3-70b-8192", "llama3-8b-8192", "mixtral-8x7b-32768", "gemma-7b-it"],
            "title": "Model",
            "default": "llama3-8b-8192",
            "buildship": {
              "options": [
                { "value": "llama3-70b-8192", "label": "LLaMA3 70b" },
                { "value": "llama3-8b-8192", "label": "LLaMA3 8b" },
                { "value": "mixtral-8x7b-32768", "label": "Mixtral 8x7b" },
                { "label": "Gemma 7b", "value": "gemma-7b-it" }
              ],
              "index": 4,
              "sensitive": false
            }
          },
          "maxTokens": {
            "default": "",
            "title": "Max Tokens",
            "pattern": "",
            "buildship": { "sensitive": false, "index": 4 },
            "description": "",
            "type": "number"
          },
          "threadId": {
            "buildship": { "sensitive": false, "index": 5 },
            "type": "string",
            "title": "Thread Id",
            "default": "",
            "pattern": "",
            "description": ""
          }
        },
        "type": "object"
      },
      "subType": "assistant",
      "onFail": null,
      "dependencies": {
        "uuid": "9.0.1",
        "lodash": "4.17.21",
        "fs": "0.0.2",
        "path": "0.12.7",
        "jsonc": "2.0.0",
        "groq-sdk": "0.3.3"
      },
      "nodes": [
        {
          "meta": {
            "id": "scrape-web-url",
            "name": "get website",
            "icon": {
              "type": "SVG",
              "svg": "<path d=\"M20 18c1.1 0 1.99-.9 1.99-2L22 6c0-1.11-.9-2-2-2H4c-1.11 0-2 .89-2 2v10c0 1.1.89 2 2 2H0v2h24v-2h-4ZM4 16V6h16v10.01L4 16Zm5.0967-6.0469c0-1.027.836-1.864 1.864-1.864 1.027 0 1.864.837 1.864 1.864 0 1.027-.837 1.864-1.864 1.864-1.028 0-1.864-.837-1.864-1.864Zm7.032 4.236-2.482-2.482c.331-.505.527-1.107.527-1.754 0-1.772-1.441-3.213-3.213-3.213s-3.214 1.441-3.214 3.213 1.442 3.214 3.214 3.214c.636 0 1.225-.192 1.724-.511l2.489 2.488.955-.955Z\"></path>"
            },
            "description": "Scrape a given web url and return the text content"
          },
          "onFail": null,
          "script": "import axios from \"axios\";\nimport cheerio from \"cheerio\";\n\nexport default async function scrapeUrl({ url, selector }) {\n  const { data } = await axios.get(url);\n\n  const $ = cheerio.load(data);\n\n  $(\"script\").remove();\n\n  const content = $(selector).text().replace(/\\n/g, \"\");\n\n  return { content }\n}",
          "id": "76916127-b5ab-483a-b5a0-fafd4ce6b7e2",
          "type": "script",
          "integrations": [],
          "_libRef": {
            "src": "https://storage.googleapis.com/buildship-app-us-central1/builtNodes/scrape-web-url/1.0.0.cjs",
            "integrity": "v3:83c1c98b54e96bb03b6b641e1f9a3d6c",
            "isDirty": true,
            "libNodeRefId": "@buildship/scrape-web-url",
            "version": "1.0.0",
            "libType": "public"
          },
          "label": "get website",
          "inputs": {
            "type": "object",
            "properties": {
              "selector": {
                "pattern": "",
                "buildship": { "index": 1, "sensitive": false },
                "type": "string",
                "title": "Selector",
                "default": "body",
                "description": "A valid HTML selector."
              },
              "url": {
                "default": "",
                "title": "URL",
                "pattern": "",
                "type": "string",
                "buildship": { "toBeAutoFilled": true, "index": 0, "sensitive": false },
                "description": "The url to scrape."
              }
            },
            "required": ["url", "selector"]
          },
          "name": "get website",
          "output": { "buildship": {}, "type": "object", "title": "Scrape Web URL", "properties": {} },
          "dependencies": { "cheerio": "1.0.0-rc.12", "axios": "1.6.2" }
        }
      ],
      "integrations": [],
      "meta": {
        "id": "groq-assistant-node",
        "description": "",
        "name": "Groq Assistant",
        "icon": {
          "type": "URL",
          "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fgroq.png?alt=media&token=7f60edf7-f402-4762-8334-00cb2981cef0"
        }
      },
      "label": "Groq Assistant",
      "output": {
        "description": "",
        "title": "",
        "type": "object",
        "buildship": { "index": 0 },
        "properties": {
          "message": { "type": "string", "description": "", "title": "Message", "buildship": { "index": 0 } },
          "data": { "title": "Data", "buildship": { "index": 2 }, "description": "", "type": "string" },
          "threadId": { "buildship": { "index": 1 }, "type": "string", "description": "", "title": "Thread Id" }
        }
      },
      "id": "0a52df97-4603-4861-bdd9-a5347c726121",
      "script": "import Groq from 'groq-sdk';\nimport { snakeCase } from \"lodash\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsonc } from 'jsonc';\n\nconst getChatHistory = (threadId: string, logging: any) => {\n  // Load previous messages if the file exists\n  let previousMessages = [];\n  const filePath = process.env.BUCKET_FOLDER_PATH + '/nodes/groq-assistant/store/' + threadId + '.jsonl';\n  if (threadId) {\n    const fileExists = fs.existsSync(filePath);\n    if (fileExists) {\n      const fileContent = fs.readFileSync(filePath, 'utf8');\n      previousMessages = JSON.parse(fileContent);\n      logging.log(previousMessages);\n    }\n  }\n  return previousMessages;\n}\n\nconst appendChatHistory = (threadId: string, newMessages: unknown[]) => {\n  const filePath = process.env.BUCKET_FOLDER_PATH + '/nodes/groq-assistant/store/' + threadId + '.jsonl';\n  // Create folder path if it doesn't exist\n  const folderPath = path.dirname(filePath);\n  if (!fs.existsSync(folderPath)) {\n    fs.mkdirSync(folderPath, { recursive: true });\n  }\n  // Save userRequest and output to a JSONL file\n  const fileContent = JSON.stringify(newMessages);\n  fs.writeFileSync(filePath, fileContent);\n}\n\n\ntype Tool = Groq.Chat.CompletionCreateParams.Tool;\ntype FinishReason = \"stop\" | \"length\" | \"tool_calls\" | \"content_filter\";\n\nconst nodeToGroqTool: (node: Node) => Tool = (node) => {\n  return {\n    type: \"function\",\n    function: {\n      name: snakeCase(node.label || node.meta.name),\n      description: node.meta.description ?? \"\",\n      parameters: {\n        type: \"object\",\n        properties: Object.entries(node.inputs.properties)\n          .reduce((properties, [name, value]) => {\n            if (value.buildship && !value.buildship.toBeAutoFilled) return properties;\n            return {\n              ...properties, [name]: {\n                type: value.type,\n                enum: value.enum,\n                description: value.description\n              }\n            }\n          }, {}),\n        required: Object.entries(node.inputs.properties).map(([name, value]) => {\n          if (value.buildship && value.buildship.toBeAutoFilled && node.inputs.required.includes(name)) return name;\n          return false;\n        }).filter(Boolean),\n      }\n    }\n  };\n}\n\ntype Params = {\n  groqApiKey: string;\n  model: string;\n  maxTokens: number;\n  userPrompt: string;\n  systemPrompt: string;\n  threadId?: string;\n};\n\nexport default async function assistant(\n  { groqApiKey, model, maxTokens, userPrompt, systemPrompt, threadId }: Params,\n  { logging, execute, nodes }: any\n) {\n  const groq = new Groq({ apiKey: groqApiKey });\n\n  const tools: Tool[] = nodes?.map(nodeToGroqTool) ?? [];\n\n  /** \n  * Retrieve the conversation from the threadId if it exists, otherwise generate a new threadId\n  **/\n  threadId ||= uuidv4();\n  const chatHistory = getChatHistory(threadId, logging) as Groq.Chat.ChatCompletion.Choice.Message[];\n\n  const initialMessages: Groq.Chat.CompletionCreateParams.Message[] = [\n    {\n      \"role\": \"system\",\n      \"content\": systemPrompt\n    },\n    // append the chat history to the initial messages excluding the system messages\n    ...(chatHistory.filter(m => m.role !== \"system\") ?? []),\n    {\n      \"role\": \"user\",\n      \"content\": userPrompt,\n    }\n  ];\n\n  const baseRequest = {\n    \"model\": model,\n    \"max_tokens\": maxTokens,\n    \"tools\": tools,\n    \"messages\": initialMessages\n  };\n\n  try {\n    let requestCount = 1;\n    let request = { ...baseRequest };\n    let response: Groq.Chat.ChatCompletion;\n\n    let finish_reasons: FinishReason[] = [];\n\n    const isEndTurn = (reasons: FinishReason[]) =>\n      reasons.includes(\"stop\") ||\n      reasons.includes(\"length\") ||\n      reasons.includes(\"content_filter\");\n\n    do {\n      logging.log(`Groq request(${requestCount}):`, request);\n      response = await groq.chat.completions.create(request);\n      logging.log(`Groq response(${requestCount}): `, response);\n\n      const choices = response.choices;\n      finish_reasons = choices.map(choice => choice.finish_reason) as FinishReason[];\n\n      if (isEndTurn(finish_reasons)) {\n        break;\n      }\n      for (const choice of choices) {\n        request.messages.push(choice.message);\n\n        const finish_reason = choice.finish_reason as FinishReason;\n        const isToolUse = finish_reason === \"tool_calls\";\n\n        if (isToolUse) {\n          const toolCalls = choice.message.tool_calls || [];\n\n          for (const toolCall of toolCalls) {\n            const node: Node = nodes?.find((node: Node) =>\n              snakeCase(node.label || node.meta.name) === toolCall.function?.name);\n            if (!node) {\n              logging.log(\"Failed to find tool:\");\n              logging.log(toolCall);\n              logging.log(node);\n              throw new Error(\"Failed to find tool\");\n            }\n            logging.log(`Tool: ${node.label} `);\n            let args = {} as Record<string, unknown>;\n            try {\n              args = JSON.parse(toolCall.function?.arguments ?? \"{}\");\n            } catch (cause) {\n              logging.log(\"Failed to parse tool arguments\");\n              logging.log(toolCall.function?.arguments);\n              logging.log(cause);\n            }\n\n            // filter hallucinated inputs\n            const inputs = {} as Record<string, unknown>;\n            for (const [inputKey, inputValue] of Object.entries(args)) {\n              if (node.inputs.properties[inputKey]) {\n                inputs[inputKey] = inputValue;\n              }\n            }\n            const toolResponse = await execute(node.label, inputs);\n            logging.log(\"Tool response: \", toolResponse);\n            request.messages.push(\n              {\n                \"tool_call_id\": toolCall.id,\n                \"role\": \"tool\",\n                \"name\": toolCall.function?.name,\n                \"content\": toolResponse ? JSON.stringify(toolResponse) : \"\",\n              });\n          }\n        }\n      }\n      requestCount++;\n    } while (!isEndTurn(finish_reasons));\n\n    let newChatHistory = [...request.messages, ...(response.choices.map(c => c.message) || [])]\n    appendChatHistory(threadId, newChatHistory);\n    return {\n      message: response.choices[0]?.message?.content || \"No Response\",\n      threadId,\n      data: response\n    }\n  } catch (error) {\n    logging.log(\"Error:\");\n    logging.log(\n      // remove circular references\n      jsonc.parse(jsonc.stringify(error))\n    );\n    return { error }\n  }\n}\n\ntype Node = {\n  label: string;\n  meta: {\n    id: string;\n    description: string;\n    name: string;\n    [key: string]: any;\n  };\n  inputs: {\n    type: string;\n    required: string[];\n    properties: Record<string, {\n      description: string;\n      buildship?: {\n        toBeAutoFilled?: boolean;\n        [key: string]: any;\n      }\n      [key: string]: any;\n    }>;\n  };\n  [key: string]: any;\n};\n\n",
      "type": "script"
    },
    {
      "id": "297d2ae8-d5e0-4acb-b599-57b320102247",
      "inputs": {
        "type": "object",
        "required": [],
        "properties": {
          "status": {
            "enum": ["200", "201", "202", "204", "400", "401", "403", "404", "429", "500"],
            "title": "Status code",
            "default": "200",
            "buildship": {
              "options": [
                { "label": "OK (200)", "value": "200" },
                { "value": "201", "label": "Created (201)" },
                { "value": "202", "label": "Accepted (202)" },
                { "label": "Redirect (301)", "value": "301" },
                { "label": "No Content (204)", "value": "204" },
                { "value": "400", "label": "Bad Request (400)" },
                { "value": "401", "label": "Unauthorized (401)" },
                { "value": "403", "label": "Forbidden (403)" },
                { "value": "404", "label": "Not Found (404)" },
                { "value": "429", "label": "Too Many Requests (429)" },
                { "value": "500", "label": "Internal Server Error (500)" }
              ],
              "index": 0
            },
            "type": "string",
            "description": "The HTTP status code to return"
          },
          "value": {
            "description": "The value to return",
            "buildship": { "index": 1 },
            "type": "string",
            "title": "Value",
            "default": ""
          },
          "cacheMaxAge": {
            "type": "number",
            "default": 0,
            "description": "Set cache duration in seconds",
            "buildship": { "index": 2 },
            "title": "Cache Time"
          }
        }
      },
      "response": { "2XX": { "properties": {}, "type": "object" } },
      "label": "Return",
      "description": "The Return Node is used to return values from the workflow. It is generally the last node in the workflow. The return node is optional as the API can inherently return a 200 OK response by default. [Full Documentation](https://docs.buildship.com/core-nodes/return).",
      "type": "return"
    }
  ],
  "trigger": {
    "groupId": null,
    "request": {
      "properties": {
        "headers": {
          "type": "object",
          "description": "Headers of the request",
          "properties": {},
          "buildship": {},
          "title": "Request Headers"
        },
        "body": {
          "buildship": {},
          "type": "object",
          "properties": {
            "message": { "description": "", "title": "Message", "type": "string", "buildship": { "index": 0 } },
            "threadId": { "title": "Thread Id", "description": "", "buildship": { "index": 0 }, "type": "string" }
          },
          "description": "Body of the request",
          "title": "Body"
        },
        "query": {
          "title": "Query",
          "buildship": {},
          "properties": {},
          "description": "Query parameters",
          "type": "object"
        }
      },
      "type": "object",
      "title": "Request",
      "required": [],
      "buildship": {}
    },
    "inputs": {
      "properties": {
        "method": {
          "pattern": "",
          "buildship": {
            "options": [
              { "value": "GET", "label": "GET" },
              { "value": "POST", "label": "POST" },
              { "label": "PUT", "value": "PUT" },
              { "value": "DELETE", "label": "DELETE" }
            ],
            "sensitive": false,
            "index": 1
          },
          "title": "Method",
          "description": "The HTTP method for the incoming request.",
          "enum": ["GET", "POST", "PUT", "DELETE"],
          "type": "string",
          "default": "GET"
        },
        "path": {
          "type": "string",
          "buildship": { "sensitive": false, "index": 0 },
          "default": "/",
          "title": "Path",
          "pattern": "",
          "description": "The path of the API Endpoint. Additionally, define the structure for the incoming API requests. [Learn more about API Specification here](https://docs.buildship.com/basics/api-spec#request-specification)."
        }
      },
      "type": "object",
      "required": ["method", "path"]
    },
    "id": "http",
    "meta": {
      "description": "Create an API / HTTP endpoint as the trigger or starting point for your workflow. This endpoint can be used in other apps to run the workflow. [Full documentation](https://docs.buildship.com/trigger-nodes/rest-api)",
      "name": "Rest API Call",
      "id": "http",
      "icon": {}
    },
    "label": "Rest API Call",
    "type": "http",
    "script": "",
    "dependencies": {},
    "order": 1,
    "output": {
      "buildship": {},
      "properties": {
        "query": {
          "description": "Query parameters",
          "type": "object",
          "title": "Query parameters",
          "buildship": { "index": 0 }
        },
        "headers": {
          "description": "Headers of the request",
          "properties": {
            "authorization": {
              "buildship": { "index": 1 },
              "title": "Authorization",
              "type": "string",
              "description": "Authorization header"
            },
            "content-type": {
              "buildship": { "index": 0 },
              "type": "string",
              "description": "Content-Type of the request",
              "title": "Content-Type"
            }
          },
          "title": "Headers",
          "type": "object",
          "buildship": {}
        },
        "body": { "type": "object", "title": "Body", "buildship": { "index": 1 }, "description": "Body of the request" }
      },
      "type": "object",
      "title": "Request"
    },
    "live": true,
    "instruction": { "title": "Endpoint URL", "bodyTemplate": "https://{{runtimeUrl}}/{{httpPath}}" },
    "testingSchema": [
      {
        "type": "shortText",
        "label": "Endpoint URL",
        "disabled": true,
        "prefill": "endpointURL",
        "name": "endpointURL"
      },
      { "type": "apiRequestData", "name": "apiRequestData", "prefill": "apiRequestData" }
    ]
  },
  "nodeValues": {
    "76916127-b5ab-483a-b5a0-fafd4ce6b7e2": { "url": "", "selector": "body" },
    "0a52df97-4603-4861-bdd9-a5347c726121": {
      "systemPrompt": "You are an expert in searching information from different sources. Your goal is to respond user questions and requests using the sourc they provide. You must respond in a concise way and readable way. Please ensure that the information is accurate and up-to-date.   When you are given tools to use, you must use them following the guidelines for each tool. Guidelines: - when user asks for information of an specific website you must use 'get website' to scrape a each given website and return the information",
      "maxTokens": 1024,
      "threadId": { "keys": ["request", "body", "threadId"] },
      "groqApiKey": "",
      "model": "llama3-70b-8192",
      "userPrompt": { "keys": ["request", "body", "message"] }
    },
    "http": { "path": "/groq-website-qa", "method": "POST" },
    "297d2ae8-d5e0-4acb-b599-57b320102247": {
      "status": "200",
      "value": {
        "expression": "{\n  \"message\": ctx[\"root\"][\"0a52df97-4603-4861-bdd9-a5347c726121\"][\"message\"],\n  \"threadId\": ctx[\"root\"][\"0a52df97-4603-4861-bdd9-a5347c726121\"][\"threadId\"]\n}",
        "hasErrors": false,
        "type": "javascript"
      },
      "cacheMaxAge": 0
    }
  },
  "notes": "<p>An assistant that scrape a website and get your Assistant to answer questions about it. Try it using this test request body:</p><p><br></p><p>{\"message\":\"What plans I can do in Barcelona. Use this website to answer: <a href=\"https://www.timeout.com/barcelona/things-to-do/best-things-to-do-in-barcelona%22%7D\" rel=\"noopener noreferrer\" target=\"_blank\">https://www.timeout.com/barcelona/things-to-do/best-things-to-do-in-barcelona\"}</a></p><p><br></p><p>Short Video: <a href=\"https://www.youtube.com/watch?v=OiQJQMk_2mo\" rel=\"noopener noreferrer\" target=\"_blank\">youtube.com/watch?v=OiQJQMk_2mo</a></p><p>Documentation: <a href=\"https://docs.buildship.com/ai-models/assistant#use-case-i-chat-with-assistant\" rel=\"noopener noreferrer\" target=\"_blank\">docs.buildship.com/ai-models/assistant</a></p>"
}
