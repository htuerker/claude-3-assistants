{
  "nodes": [
    {
      "id": "b7eb02b3-a4ac-43df-b0b3-e8ffefc786ab",
      "inputs": {
        "type": "object",
        "required": ["maxTokens", "userPrompt", "systemPrompt", "groqApiKey", "model"],
        "properties": {
          "systemPrompt": {
            "default": "",
            "description": "",
            "type": "string",
            "title": "Instructions",
            "buildship": { "index": 1, "sensitive": false },
            "pattern": ""
          },
          "groqApiKey": {
            "buildship": { "index": 0, "sensitive": true },
            "type": "string",
            "description": "",
            "pattern": "",
            "title": "API Key"
          },
          "threadId": {
            "description": "",
            "title": "Thread Id",
            "pattern": "",
            "default": "",
            "buildship": { "index": 5, "sensitive": false },
            "type": "string"
          },
          "userPrompt": {
            "description": "",
            "type": "string",
            "buildship": { "sensitive": false, "index": 2 },
            "default": "",
            "pattern": "",
            "title": "User Prompt"
          },
          "maxTokens": {
            "title": "Max Tokens",
            "buildship": { "index": 4, "sensitive": false },
            "description": "",
            "default": "",
            "pattern": "",
            "type": "number"
          },
          "model": {
            "buildship": {
              "sensitive": false,
              "index": 4,
              "options": [
                { "label": "LLaMA3 70b", "value": "llama3-70b-8192" },
                { "label": "LLaMA3 8b", "value": "llama3-8b-8192" },
                { "label": "Mixtral 8x7b", "value": "mixtral-8x7b-32768" },
                { "label": "Gemma 7b", "value": "gemma-7b-it" }
              ]
            },
            "default": "llama3-8b-8192",
            "type": "string",
            "pattern": "",
            "title": "Model",
            "enum": ["llama3-70b-8192", "llama3-8b-8192", "mixtral-8x7b-32768", "gemma-7b-it"],
            "description": ""
          }
        }
      },
      "script": "import Groq from 'groq-sdk';\nimport { snakeCase } from \"lodash\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsonc } from 'jsonc';\n\nconst getChatHistory = (threadId: string, logging: any) => {\n  // Load previous messages if the file exists\n  let previousMessages = [];\n  const filePath = process.env.BUCKET_FOLDER_PATH + '/nodes/groq-assistant/store/' + threadId + '.jsonl';\n  if (threadId) {\n    const fileExists = fs.existsSync(filePath);\n    if (fileExists) {\n      const fileContent = fs.readFileSync(filePath, 'utf8');\n      previousMessages = JSON.parse(fileContent);\n      logging.log(previousMessages);\n    }\n  }\n  return previousMessages;\n}\n\nconst appendChatHistory = (threadId: string, newMessages: unknown[]) => {\n  const filePath = process.env.BUCKET_FOLDER_PATH + '/nodes/groq-assistant/store/' + threadId + '.jsonl';\n  // Create folder path if it doesn't exist\n  const folderPath = path.dirname(filePath);\n  if (!fs.existsSync(folderPath)) {\n    fs.mkdirSync(folderPath, { recursive: true });\n  }\n  // Save userRequest and output to a JSONL file\n  const fileContent = JSON.stringify(newMessages);\n  fs.writeFileSync(filePath, fileContent);\n}\n\n\ntype Tool = Groq.Chat.CompletionCreateParams.Tool;\ntype FinishReason = \"stop\" | \"length\" | \"tool_calls\" | \"content_filter\";\n\nconst nodeToGroqTool: (node: Node) => Tool = (node) => {\n  return {\n    type: \"function\",\n    function: {\n      name: snakeCase(node.label || node.meta.name),\n      description: node.meta.description ?? \"\",\n      parameters: {\n        type: \"object\",\n        properties: Object.entries(node.inputs.properties)\n          .reduce((properties, [name, value]) => {\n            if (value.buildship && !value.buildship.toBeAutoFilled) return properties;\n            return {\n              ...properties, [name]: {\n                type: value.type,\n                enum: value.enum,\n                description: value.description\n              }\n            }\n          }, {}),\n        required: Object.entries(node.inputs.properties).map(([name, value]) => {\n          if (value.buildship && value.buildship.toBeAutoFilled && node.inputs.required.includes(name)) return name;\n          return false;\n        }).filter(Boolean),\n      }\n    }\n  };\n}\n\ntype Params = {\n  groqApiKey: string;\n  model: string;\n  maxTokens: number;\n  userPrompt: string;\n  systemPrompt: string;\n  threadId?: string;\n};\n\nexport default async function assistant(\n  { groqApiKey, model, maxTokens, userPrompt, systemPrompt, threadId }: Params,\n  { logging, execute, nodes }: any\n) {\n  const groq = new Groq({ apiKey: groqApiKey });\n\n  const tools: Tool[] = nodes?.map(nodeToGroqTool) ?? [];\n\n  /** \n  * Retrieve the conversation from the threadId if it exists, otherwise generate a new threadId\n  **/\n  threadId ||= uuidv4();\n  const chatHistory = getChatHistory(threadId, logging) as Groq.Chat.ChatCompletion.Choice.Message[];\n\n  const initialMessages: Groq.Chat.CompletionCreateParams.Message[] = [\n    {\n      \"role\": \"system\",\n      \"content\": systemPrompt\n    },\n    // append the chat history to the initial messages excluding the system messages\n    ...(chatHistory.filter(m => m.role !== \"system\") ?? []),\n    {\n      \"role\": \"user\",\n      \"content\": userPrompt,\n    }\n  ];\n\n  const baseRequest = {\n    \"model\": model,\n    \"max_tokens\": maxTokens,\n    \"tools\": tools,\n    \"messages\": initialMessages\n  };\n\n  try {\n    let requestCount = 1;\n    let request = { ...baseRequest };\n    let response: Groq.Chat.ChatCompletion;\n\n    let finish_reasons: FinishReason[] = [];\n\n    const isEndTurn = (reasons: FinishReason[]) =>\n      reasons.includes(\"stop\") ||\n      reasons.includes(\"length\") ||\n      reasons.includes(\"content_filter\");\n\n    do {\n      logging.log(`Groq request(${requestCount}):`, request);\n      response = await groq.chat.completions.create(request);\n      logging.log(`Groq response(${requestCount}): `, response);\n\n      const choices = response.choices;\n      finish_reasons = choices.map(choice => choice.finish_reason) as FinishReason[];\n\n      if (isEndTurn(finish_reasons)) {\n        break;\n      }\n      for (const choice of choices) {\n        request.messages.push(choice.message);\n\n        const finish_reason = choice.finish_reason as FinishReason;\n        const isToolUse = finish_reason === \"tool_calls\";\n\n        if (isToolUse) {\n          const toolCalls = choice.message.tool_calls || [];\n\n          for (const toolCall of toolCalls) {\n            const node: Node = nodes?.find((node: Node) =>\n              snakeCase(node.label || node.meta.name) === toolCall.function?.name);\n            if (!node) {\n              logging.log(\"Failed to find tool:\");\n              logging.log(toolCall);\n              logging.log(node);\n              throw new Error(\"Failed to find tool\");\n            }\n            logging.log(`Tool: ${node.label} `);\n            let args = {} as Record<string, unknown>;\n            try {\n              args = JSON.parse(toolCall.function?.arguments ?? \"{}\");\n            } catch (cause) {\n              logging.log(\"Failed to parse tool arguments\");\n              logging.log(toolCall.function?.arguments);\n              logging.log(cause);\n            }\n\n            // filter hallucinated inputs\n            const inputs = {} as Record<string, unknown>;\n            for (const [inputKey, inputValue] of Object.entries(args)) {\n              if (node.inputs.properties[inputKey]) {\n                inputs[inputKey] = inputValue;\n              }\n            }\n            const toolResponse = await execute(node.label, inputs);\n            logging.log(\"Tool response: \", toolResponse);\n            request.messages.push(\n              {\n                \"tool_call_id\": toolCall.id,\n                \"role\": \"tool\",\n                \"name\": toolCall.function?.name,\n                \"content\": toolResponse ? JSON.stringify(toolResponse) : \"\",\n              });\n          }\n        }\n      }\n      requestCount++;\n    } while (!isEndTurn(finish_reasons));\n\n    let newChatHistory = [...request.messages, ...(response.choices.map(c => c.message) || [])]\n    appendChatHistory(threadId, newChatHistory);\n    return {\n      message: response.choices[0]?.message?.content || \"No Response\",\n      threadId,\n      data: response\n    }\n  } catch (error) {\n    logging.log(\"Error:\");\n    logging.log(\n      // remove circular references\n      jsonc.parse(jsonc.stringify(error))\n    );\n    return { error }\n  }\n}\n\ntype Node = {\n  label: string;\n  meta: {\n    id: string;\n    description: string;\n    name: string;\n    [key: string]: any;\n  };\n  inputs: {\n    type: string;\n    required: string[];\n    properties: Record<string, {\n      description: string;\n      buildship?: {\n        toBeAutoFilled?: boolean;\n        [key: string]: any;\n      }\n      [key: string]: any;\n    }>;\n  };\n  [key: string]: any;\n};\n\n",
      "nodes": [
        {
          "type": "script",
          "output": {
            "description": "The data of the fetched Google Spreadsheet",
            "title": "Spreadsheet Data",
            "type": "object",
            "buildship": {}
          },
          "dependencies": { "node-fetch": "2.7.0" },
          "id": "801fb7d0-04b8-43f6-93b1-2f28ec247c5f",
          "name": "Get Sheets",
          "_libRef": {
            "isDirty": true,
            "version": "1.0.3",
            "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/oauth-gsheets-get-sheet/1.0.3/build.cjs",
            "integrity": "v3:f8f3b15ffb6cca5de72ce53e98a588b5",
            "libNodeRefId": "@buildship/oauth-gsheets-get-sheet",
            "libType": "public"
          },
          "label": "Get Sheets",
          "integrations": ["gsheets"],
          "onFail": null,
          "inputs": {
            "type": "object",
            "properties": {
              "ranges": {
                "description": "The ranges to retrieve from the spreadsheet.\n\n**SAMPLE INPUT:**\n```\n[\"Sheet1\"]\n```",
                "pattern": "",
                "type": "string",
                "title": "Ranges",
                "default": [],
                "buildship": { "index": 1, "sensitive": false }
              },
              "spreadsheetUrl": {
                "default": "",
                "buildship": { "index": 0, "sensitive": false },
                "type": "string",
                "pattern": "",
                "title": "Sheet URL",
                "description": "The URL of the Google Spreadsheet to fetch. [Refer API Documentation](https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/create).\n\nTIP 💡: Available in the following format in your Google Sheets: `https://docs.google.com/spreadsheets/d/spreadsheet-id/edit`"
              }
            },
            "required": ["apiKey", "includeGridData", "spreadsheetUrl", "ranges"]
          },
          "meta": {
            "id": "oauth-gsheets-get-sheet",
            "name": "Get Sheets",
            "description": "Fetch a Google Spreadsheet using the Google Sheets API",
            "icon": {
              "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2FGoogleSheets.png?alt=media&token=89b3cfec-6746-43da-a404-5d20adb60472",
              "type": "URL"
            }
          },
          "script": "import fetch from 'node-fetch';\n\nexport default async function fetchGoogleSpreadsheet({\n    spreadsheetUrl,\n    ranges\n}, {\n    auth,\n    logging\n}) {\n    const { access_token } = await auth.getToken();\n\n    // Extracting spreadsheetId from the URL\n    const regex = /\\/spreadsheets\\/d\\/([a-zA-Z0-9-_]+)/;\n    const match = spreadsheetUrl.match(regex);\n    if (!match) {\n        throw new Error('Invalid spreadsheet URL');\n    }\n    const spreadsheetId = match[1];\n\n  \n    const response = await fetch(`https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${ranges}`, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${access_token}`\n        }\n    });\n    const data = await response.json();\n    return data;\n}\n"
        }
      ],
      "integrations": [],
      "dependencies": { "groq-sdk": "0.3.3", "lodash": "4.17.21" },
      "name": "Groq Assistant",
      "label": "Groq Assistant",
      "output": {
        "properties": {
          "data": { "title": "Data", "description": "", "buildship": { "index": 2 }, "type": "string" },
          "threadId": { "buildship": { "index": 1 }, "type": "string", "description": "", "title": "Thread Id" },
          "message": { "description": "", "title": "Message", "buildship": { "index": 0 }, "type": "string" }
        },
        "description": "",
        "type": "object",
        "buildship": { "index": 0 },
        "title": ""
      },
      "onFail": null,
      "meta": {
        "description": "",
        "icon": {
          "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fgroq.png?alt=media&token=7f60edf7-f402-4762-8334-00cb2981cef0",
          "type": "URL"
        },
        "name": "Groq Assistant",
        "id": "groq-assistant-node"
      },
      "type": "script",
      "subType": "assistant"
    },
    {
      "id": "78862179-feda-44fd-9d80-60a4eccb8dd7",
      "label": "Return",
      "description": "The Return Node is used to return values from the workflow. It is generally the last node in the workflow. The return node is optional as the API can inherently return a 200 OK response by default. [Full Documentation](https://docs.buildship.com/core-nodes/return).",
      "inputs": {
        "properties": {
          "status": {
            "default": "200",
            "type": "string",
            "enum": ["200", "201", "202", "204", "400", "401", "403", "404", "429", "500"],
            "title": "Status code",
            "description": "The HTTP status code to return",
            "buildship": {
              "options": [
                { "value": "200", "label": "OK (200)" },
                { "label": "Created (201)", "value": "201" },
                { "label": "Accepted (202)", "value": "202" },
                { "value": "301", "label": "Redirect (301)" },
                { "label": "No Content (204)", "value": "204" },
                { "value": "400", "label": "Bad Request (400)" },
                { "label": "Unauthorized (401)", "value": "401" },
                { "value": "403", "label": "Forbidden (403)" },
                { "label": "Not Found (404)", "value": "404" },
                { "value": "429", "label": "Too Many Requests (429)" },
                { "value": "500", "label": "Internal Server Error (500)" }
              ],
              "index": 0
            }
          },
          "cacheMaxAge": {
            "title": "Cache Time",
            "buildship": { "index": 2 },
            "type": "number",
            "default": 0,
            "description": "Set cache duration in seconds"
          },
          "value": {
            "default": "",
            "description": "The value to return",
            "title": "Value",
            "type": "string",
            "buildship": { "index": 1 }
          }
        },
        "required": [],
        "type": "object"
      },
      "type": "return",
      "response": { "2XX": { "properties": {}, "type": "object" } }
    }
  ],
  "trigger": {
    "groupId": null,
    "meta": {
      "name": "Rest API Call",
      "icon": {},
      "description": "Create an API / HTTP endpoint as the trigger or starting point for your workflow. This endpoint can be used in other apps to run the workflow. [Full documentation](https://docs.buildship.com/trigger-nodes/rest-api)",
      "id": "http"
    },
    "instruction": { "title": "Endpoint URL", "bodyTemplate": "https://{{runtimeUrl}}/{{httpPath}}" },
    "id": "http",
    "dependencies": {},
    "order": 1,
    "inputs": {
      "type": "object",
      "required": ["method", "path"],
      "properties": {
        "path": {
          "buildship": { "sensitive": false, "index": 0 },
          "description": "The path of the API Endpoint. Additionally, define the structure for the incoming API requests. [Learn more about API Specification here](https://docs.buildship.com/basics/api-spec#request-specification).",
          "title": "Path",
          "type": "string",
          "default": "/",
          "pattern": ""
        },
        "method": {
          "type": "string",
          "title": "Method",
          "buildship": {
            "options": [
              { "value": "GET", "label": "GET" },
              { "label": "POST", "value": "POST" },
              { "label": "PUT", "value": "PUT" },
              { "label": "DELETE", "value": "DELETE" }
            ],
            "sensitive": false,
            "index": 1
          },
          "default": "GET",
          "enum": ["GET", "POST", "PUT", "DELETE"],
          "pattern": "",
          "description": "The HTTP method for the incoming request."
        }
      }
    },
    "live": true,
    "type": "http",
    "script": "",
    "label": "Rest API Call",
    "output": {
      "type": "object",
      "buildship": {},
      "title": "Request",
      "properties": {
        "query": {
          "type": "object",
          "buildship": { "index": 0 },
          "title": "Query parameters",
          "description": "Query parameters"
        },
        "body": {
          "type": "object",
          "buildship": { "index": 1 },
          "description": "Body of the request",
          "title": "Body"
        },
        "headers": {
          "buildship": {},
          "properties": {
            "content-type": {
              "buildship": { "index": 0 },
              "type": "string",
              "title": "Content-Type",
              "description": "Content-Type of the request"
            },
            "authorization": {
              "type": "string",
              "title": "Authorization",
              "buildship": { "index": 1 },
              "description": "Authorization header"
            }
          },
          "type": "object",
          "description": "Headers of the request",
          "title": "Headers"
        }
      }
    },
    "request": {
      "properties": {
        "body": {
          "type": "object",
          "title": "Body",
          "properties": {
            "threadId": { "description": "", "buildship": { "index": 0 }, "title": "Thread Id", "type": "string" },
            "message": { "type": "string", "buildship": { "index": 0 }, "description": "", "title": "Message" }
          },
          "description": "Body of the request",
          "buildship": {}
        },
        "query": {
          "properties": {},
          "type": "object",
          "buildship": {},
          "title": "Query",
          "description": "Query parameters"
        },
        "headers": {
          "description": "Headers of the request",
          "type": "object",
          "buildship": {},
          "title": "Request Headers",
          "properties": {}
        }
      },
      "buildship": {},
      "type": "object",
      "required": [],
      "title": "Request"
    },
    "testingSchema": [
      {
        "type": "shortText",
        "disabled": true,
        "label": "Endpoint URL",
        "name": "endpointURL",
        "prefill": "endpointURL"
      },
      { "type": "apiRequestData", "prefill": "apiRequestData", "name": "apiRequestData" }
    ]
  },
  "nodeValues": {
    "http": { "path": "/groq-chat-with-gsheets", "method": "POST" },
    "78862179-feda-44fd-9d80-60a4eccb8dd7": {
      "cacheMaxAge": 0,
      "status": "200",
      "value": {
        "type": "javascript",
        "hasErrors": false,
        "expression": "{\n  \"message\": ctx[\"root\"][\"b7eb02b3-a4ac-43df-b0b3-e8ffefc786ab\"][\"message\"],\n  \"threadId\": ctx[\"root\"][\"b7eb02b3-a4ac-43df-b0b3-e8ffefc786ab\"][\"threadId\"]\n}"
      }
    },
    "801fb7d0-04b8-43f6-93b1-2f28ec247c5f": { "ranges": "", "integrations": {}, "spreadsheetUrl": "" },
    "b7eb02b3-a4ac-43df-b0b3-e8ffefc786ab": {
      "threadId": { "keys": ["request", "body", "threadId"] },
      "model": "llama3-8b-8192",
      "groqApiKey": "",
      "maxTokens": 1024,
      "systemPrompt": "You are a Azura Home specialist. You have a detailed knowledge of Azura Home's eco-friendly Mediterranean furniture and decor products. Your task is to provide informative and helpful responses to user inquiries about product materials, design inspirations, styles or pricing and any other specifics they might be interested in. Your answers should reflect the brand's commitment to sustainability, craftsmanship, and the Mediterranean aesthetic, helping users make informed decisions while fostering an appreciation for the unique qualities of each piece in the Azura Home collection. When you are given tools to use, you must use them following the guidelines for each tool.Guidelines:- when you start the conversation, you must use 'get sheets' tool to access Azure Home collection of products which read it from the defined spreadheet",
      "userPrompt": { "keys": ["request", "body", "message"] }
    }
  },
  "notes": "<p>An assistant that allows you to chat with a google sheets. Here the sheets had data about furnitures. Try it using this test request body:</p><p><br></p><p>{</p><p>&nbsp;\"message\":\"what price range are your Mediterranean sofas?\"</p><p>}</p><p><br></p><p>Short Video: <a href=\"https://www.youtube.com/watch?v=OiQJQMk_2mo\" rel=\"noopener noreferrer\" target=\"_blank\">youtube.com/watch?v=OiQJQMk_2mo</a></p><p>Documentation: <a href=\"https://docs.buildship.com/ai-models/assistant#use-case-i-chat-with-assistant\" rel=\"noopener noreferrer\" target=\"_blank\">docs.buildship.com/ai-models/assistant</a></p>"
}
